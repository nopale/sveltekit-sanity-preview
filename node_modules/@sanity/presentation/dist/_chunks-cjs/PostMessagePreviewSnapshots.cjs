"use strict";
var react = require("react"), rxjs = require("rxjs"), sanity = require("sanity"), __defProp = Object.defineProperty, __defProps = Object.defineProperties, __getOwnPropDescs = Object.getOwnPropertyDescriptors, __getOwnPropSymbols = Object.getOwnPropertySymbols, __hasOwnProp = Object.prototype.hasOwnProperty, __propIsEnum = Object.prototype.propertyIsEnumerable, __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: !0, configurable: !0, writable: !0, value }) : obj[key] = value, __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    __hasOwnProp.call(b, prop) && __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b))
      __propIsEnum.call(b, prop) && __defNormalProp(a, prop, b[prop]);
  return a;
}, __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
const PostMessagePreviews = (props) => {
  const {
    comlink,
    refs,
    perspective
  } = props, documentPreviewStore = sanity.useDocumentPreviewStore(), schema = sanity.useSchema(), refsSubject = react.useMemo(() => new rxjs.Subject(), []), previews$ = react.useMemo(() => refsSubject.asObservable().pipe(rxjs.switchMap((refs_0) => rxjs.combineLatest(refs_0.map((ref) => {
    const draftRef = __spreadProps(__spreadValues({}, ref), {
      _id: sanity.getDraftId(ref._id)
    }), draft$ = perspective === "previewDrafts" ? documentPreviewStore.observeForPreview(draftRef, schema.get(draftRef._type)).pipe(
      // Share to prevent double subscribe in the merge
      rxjs.share(),
      // Don't emit if no snapshot is returned
      rxjs.skipWhile((p) => p.snapshot === null)
    ) : (
      // Don't emit if not displaying drafts
      rxjs.NEVER
    ), publishedRef = __spreadProps(__spreadValues({}, ref), {
      _id: sanity.getPublishedId(ref._id)
    }), published$ = documentPreviewStore.observeForPreview(publishedRef, schema.get(publishedRef._type));
    return rxjs.merge(published$.pipe(rxjs.takeUntil(draft$)), draft$).pipe(rxjs.filter((p_0) => !!p_0.snapshot), rxjs.map((p_1) => {
      const snapshot = p_1.snapshot;
      return {
        _id: sanity.getPublishedId(snapshot._id),
        title: snapshot.title,
        subtitle: snapshot.subtitle,
        description: snapshot.description,
        imageUrl: snapshot.imageUrl
      };
    }));
  }))), rxjs.debounceTime(0)), [documentPreviewStore, refsSubject, schema, perspective]);
  return react.useEffect(() => {
    const sub = previews$.subscribe((snapshots) => {
      comlink.post("presentation/preview-snapshots", {
        snapshots
      });
    });
    return () => {
      sub.unsubscribe();
    };
  }, [comlink, previews$]), react.useEffect(() => {
    refsSubject.next(refs);
  }, [refs, refsSubject]), null;
};
var PostMessagePreviewSnapshots = react.memo(PostMessagePreviews);
exports.default = PostMessagePreviewSnapshots;
//# sourceMappingURL=PostMessagePreviewSnapshots.cjs.map
