{"version":3,"file":"LoaderQueries.cjs","sources":["../../src/loader/LoaderQueries.tsx"],"sourcesContent":["import {\n  createCompatibilityActors,\n  getQueryCacheKey,\n  type LoaderControllerMsg,\n  type LoaderNodeMsg,\n} from '@repo/visual-editing-helpers'\nimport {useQueryParams, useRevalidate} from '@repo/visual-editing-helpers/hooks'\nimport type {\n  ClientConfig,\n  ClientPerspective,\n  ContentSourceMap,\n  QueryParams,\n  SyncTag,\n} from '@sanity/client'\nimport {applySourceDocuments, getPublishedId} from '@sanity/client/csm'\nimport {\n  createConnectionMachine,\n  type ChannelInstance,\n  type Controller,\n  type StatusEvent,\n} from '@sanity/comlink'\nimport {applyPatch} from 'mendoza'\nimport LRUCache from 'mnemonist/lru-cache-with-delete'\nimport {memo, useEffect, useMemo, useState} from 'react'\nimport {\n  useClient,\n  // useCurrentUser,\n  useDataset,\n  useProjectId,\n  type SanityClient,\n  type SanityDocument,\n} from 'sanity'\nimport {\n  LIVE_QUERY_CACHE_BATCH_SIZE,\n  LIVE_QUERY_CACHE_SIZE,\n  MIN_LOADER_QUERY_LISTEN_HEARTBEAT_INTERVAL,\n} from '../constants'\nimport type {\n  LiveQueriesState,\n  LiveQueriesStateValue,\n  LoaderConnection,\n  PresentationPerspective,\n} from '../types'\nimport type {DocumentOnPage} from '../useDocumentsOnPage'\n\nexport interface LoaderQueriesProps {\n  liveDocument: Partial<SanityDocument> | null | undefined\n  controller: Controller | undefined\n  perspective: ClientPerspective\n  documentsOnPage: {_id: string; _type: string}[]\n  onLoadersConnection: (event: StatusEvent) => void\n  onDocumentsOnPage: (\n    key: string,\n    perspective: PresentationPerspective,\n    state: DocumentOnPage[],\n  ) => void\n}\n\nexport default function LoaderQueries(props: LoaderQueriesProps): JSX.Element {\n  const {\n    liveDocument,\n    controller,\n    perspective: activePerspective,\n    documentsOnPage,\n    onLoadersConnection,\n    onDocumentsOnPage,\n  } = props\n\n  const [comlink, setComlink] = useState<ChannelInstance<LoaderControllerMsg, LoaderNodeMsg>>()\n  const [liveQueries, setLiveQueries] = useState<LiveQueriesState>({})\n\n  const projectId = useProjectId()\n  const dataset = useDataset()\n\n  useEffect(() => {\n    const interval = setInterval(\n      () =>\n        setLiveQueries((liveQueries) => {\n          if (Object.keys(liveQueries).length < 1) {\n            return liveQueries\n          }\n\n          const now = Date.now()\n          const hasAnyExpired = Object.values(liveQueries).some(\n            (liveQuery) =>\n              liveQuery.heartbeat !== false && now > liveQuery.receivedAt + liveQuery.heartbeat,\n          )\n          if (!hasAnyExpired) {\n            return liveQueries\n          }\n          const next = {} as LiveQueriesState\n          for (const [key, value] of Object.entries(liveQueries)) {\n            if (value.heartbeat !== false && now > value.receivedAt + value.heartbeat) {\n              continue\n            }\n            next[key] = value\n          }\n          return next\n        }),\n      MIN_LOADER_QUERY_LISTEN_HEARTBEAT_INTERVAL,\n    )\n    return () => clearInterval(interval)\n  }, [])\n\n  useEffect(() => {\n    if (controller) {\n      const comlink = controller.createChannel<LoaderControllerMsg, LoaderNodeMsg>(\n        {\n          name: 'presentation',\n          connectTo: 'loaders',\n          heartbeat: true,\n        },\n        createConnectionMachine<LoaderControllerMsg, LoaderNodeMsg>().provide({\n          actors: createCompatibilityActors<LoaderControllerMsg>(),\n        }),\n      )\n      setComlink(comlink)\n\n      comlink.onStatus(onLoadersConnection)\n\n      comlink.on('loader/documents', (data) => {\n        if (data.projectId === projectId && data.dataset === dataset) {\n          onDocumentsOnPage(\n            'loaders',\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            data.perspective as unknown as any,\n            data.documents,\n          )\n        }\n      })\n\n      comlink.on('loader/query-listen', (data) => {\n        if (data.projectId === projectId && data.dataset === dataset) {\n          if (\n            typeof data.heartbeat === 'number' &&\n            data.heartbeat < MIN_LOADER_QUERY_LISTEN_HEARTBEAT_INTERVAL\n          ) {\n            throw new Error(\n              `Loader query listen heartbeat interval must be at least ${MIN_LOADER_QUERY_LISTEN_HEARTBEAT_INTERVAL}ms`,\n            )\n          }\n          setLiveQueries((prev) => ({\n            ...prev,\n            [getQueryCacheKey(data.query, data.params)]: {\n              perspective: data.perspective,\n              query: data.query,\n              params: data.params,\n              receivedAt: Date.now(),\n              heartbeat: data.heartbeat ?? false,\n            } satisfies LiveQueriesStateValue,\n          }))\n        }\n      })\n\n      return comlink.start()\n    }\n    return\n  }, [controller, dataset, onDocumentsOnPage, onLoadersConnection, projectId])\n\n  const [cache] = useState(() => new LRUCache<string, SanityDocument>(LIVE_QUERY_CACHE_SIZE))\n  const studioClient = useClient({apiVersion: '2023-10-16'})\n  const clientConfig = useMemo(() => studioClient.config(), [studioClient])\n  const client = useMemo(\n    () =>\n      studioClient.withConfig({\n        resultSourceMap: 'withKeyArraySelector',\n      }),\n    [studioClient],\n  )\n  useEffect(() => {\n    if (comlink) {\n      const {projectId, dataset} = clientConfig\n      // @todo - Can this be migrated/deprecated in favour of emitting\n      // `presentation/perspective` at a higher level?\n      comlink.post('loader/perspective', {\n        projectId: projectId!,\n        dataset: dataset!,\n        perspective: activePerspective,\n      })\n    }\n  }, [comlink, clientConfig, activePerspective])\n\n  const turboIds = useMemo(() => {\n    const documentsActuallyInUse = documentsOnPage.map(({_id}) => _id)\n    const set = new Set(documentsActuallyInUse)\n    const ids = [...set]\n    const max = cache.capacity\n    if (ids.length >= max) {\n      ids.length = max\n    }\n    return ids\n  }, [cache.capacity, documentsOnPage])\n\n  const [documentsCacheLastUpdated, setDocumentsCacheLastUpdated] = useState(0)\n\n  return (\n    <>\n      <Turbo\n        cache={cache}\n        client={client}\n        turboIds={turboIds}\n        setDocumentsCacheLastUpdated={setDocumentsCacheLastUpdated}\n      />\n      {Object.entries(liveQueries).map(([key, {query, params, perspective}]) => (\n        <QuerySubscription\n          key={`${key}${perspective}`}\n          cache={cache}\n          projectId={clientConfig.projectId!}\n          dataset={clientConfig.dataset!}\n          perspective={perspective}\n          query={query}\n          params={params}\n          comlink={comlink}\n          client={client}\n          refreshInterval={activePerspective ? 2000 : 0}\n          liveDocument={liveDocument}\n          documentsCacheLastUpdated={documentsCacheLastUpdated}\n        />\n      ))}\n    </>\n  )\n}\n\ninterface SharedProps {\n  /**\n   * The Sanity client to use for fetching data and listening to mutations.\n   */\n  client: SanityClient\n  /**\n   * How frequently queries should be refetched in the background to refresh the parts of queries that can't be source mapped.\n   * Setting it to `0` will disable background refresh.\n   * @defaultValue 10000\n   */\n  refreshInterval?: number\n  /**\n   * The documents cache to use for turbo-charging queries.\n   */\n  cache: LRUCache<string, SanityDocument>\n}\n\ninterface TurboProps extends Pick<SharedProps, 'client' | 'cache'> {\n  turboIds: string[]\n  setDocumentsCacheLastUpdated: (timestamp: number) => void\n}\n/**\n * A turbo-charged mutation observer that uses Content Source Maps to apply mendoza patches on your queries\n */\nconst Turbo = memo(function Turbo(props: TurboProps) {\n  const {cache, client, turboIds, setDocumentsCacheLastUpdated} = props\n  // Figure out which documents are missing from the cache\n  const [batch, setBatch] = useState<string[][]>([])\n  useEffect(() => {\n    const batchSet = new Set(batch.flat())\n    const nextBatch = new Set<string>()\n    for (const turboId of turboIds) {\n      if (!batchSet.has(turboId) && !cache.has(turboId)) {\n        nextBatch.add(turboId)\n      }\n    }\n    const nextBatchSlice = [...nextBatch].slice(0, LIVE_QUERY_CACHE_BATCH_SIZE)\n    if (nextBatchSlice.length === 0) return\n    setBatch((prevBatch) => [...prevBatch.slice(-LIVE_QUERY_CACHE_BATCH_SIZE), nextBatchSlice])\n  }, [batch, cache, turboIds])\n\n  // Use the same listen instance and patch documents as they come in\n  useEffect(() => {\n    const subscription = client\n      .listen(\n        '*',\n        {},\n        {\n          events: ['mutation'],\n          effectFormat: 'mendoza',\n          includePreviousRevision: false,\n          includeResult: false,\n          tag: 'presentation-loader',\n        },\n      )\n      .subscribe((update) => {\n        if (update.type === 'mutation' && update.transition === 'disappear') {\n          if (cache.delete(update.documentId)) {\n            setDocumentsCacheLastUpdated(Date.now())\n          }\n        }\n\n        if (update.type !== 'mutation' || !update.effects?.apply?.length) return\n        // Schedule a reach state update with the ID of the document that were mutated\n        // This react handler will apply the document to related source map snapshots\n        const cachedDocument = cache.peek(update.documentId)\n        if (cachedDocument as SanityDocument) {\n          // eslint-disable-next-line @typescript-eslint/no-explicit-any\n          const patchDoc = {...cachedDocument} as any\n          delete patchDoc._rev\n          const patchedDocument = applyPatch(patchDoc, update.effects.apply)\n          cache.set(update.documentId, patchedDocument)\n          setDocumentsCacheLastUpdated(Date.now())\n        }\n      })\n    return () => subscription.unsubscribe()\n  }, [cache, client, setDocumentsCacheLastUpdated])\n\n  return (\n    <>\n      {batch.map((ids) => (\n        <GetDocuments\n          key={JSON.stringify(ids)}\n          cache={cache}\n          client={client}\n          ids={ids}\n          setDocumentsCacheLastUpdated={setDocumentsCacheLastUpdated}\n        />\n      ))}\n    </>\n  )\n})\n\ninterface GetDocumentsProps extends Pick<SharedProps, 'client' | 'cache'> {\n  ids: string[]\n  setDocumentsCacheLastUpdated: (timestamp: number) => void\n}\nconst GetDocuments = memo(function GetDocuments(props: GetDocumentsProps) {\n  const {client, cache, ids, setDocumentsCacheLastUpdated} = props\n\n  useEffect(() => {\n    const missingIds = ids.filter((id) => !cache.has(id))\n    if (missingIds.length === 0) return\n    client.getDocuments(missingIds).then((documents) => {\n      for (const doc of documents) {\n        if (doc && doc?._id) {\n          cache.set(doc._id, doc)\n          setDocumentsCacheLastUpdated(Date.now())\n        }\n      }\n      // eslint-disable-next-line no-console\n    }, console.error)\n  }, [cache, client, ids, setDocumentsCacheLastUpdated])\n\n  return null\n})\nGetDocuments.displayName = 'GetDocuments'\n\ninterface QuerySubscriptionProps\n  extends Pick<\n    UseQuerySubscriptionProps,\n    'client' | 'cache' | 'refreshInterval' | 'liveDocument' | 'documentsCacheLastUpdated'\n  > {\n  projectId: string\n  dataset: string\n  perspective: ClientPerspective\n  query: string\n  params: QueryParams\n  comlink: LoaderConnection | undefined\n}\nfunction QuerySubscription(props: QuerySubscriptionProps) {\n  const {\n    cache,\n    projectId,\n    dataset,\n    perspective,\n    query,\n    client,\n    refreshInterval,\n    liveDocument,\n    comlink,\n    documentsCacheLastUpdated,\n  } = props\n\n  const params = useQueryParams(props.params)\n  const data = useQuerySubscription({\n    cache,\n    client,\n    liveDocument,\n    params,\n    perspective,\n    query,\n    refreshInterval,\n    documentsCacheLastUpdated,\n  })\n  const result = data?.result\n  const resultSourceMap = data?.resultSourceMap\n  const tags = data?.tags\n\n  useEffect(() => {\n    if (resultSourceMap) {\n      comlink?.post('loader/query-change', {\n        projectId,\n        dataset,\n        perspective,\n        query,\n        params,\n        result,\n        resultSourceMap,\n        tags,\n      })\n    }\n  }, [comlink, dataset, params, perspective, projectId, query, result, resultSourceMap, tags])\n\n  return null\n}\n\ninterface UseQuerySubscriptionProps\n  extends Required<Pick<SharedProps, 'client' | 'refreshInterval' | 'cache'>> {\n  liveDocument: Partial<SanityDocument> | null | undefined\n  query: string\n  params: QueryParams\n  perspective: ClientPerspective\n  documentsCacheLastUpdated: number\n}\nfunction useQuerySubscription(props: UseQuerySubscriptionProps) {\n  const {\n    cache,\n    liveDocument,\n    client,\n    refreshInterval,\n    query,\n    params,\n    perspective,\n    documentsCacheLastUpdated,\n  } = props\n  const [snapshot, setSnapshot] = useState<{\n    result: unknown\n    resultSourceMap?: ContentSourceMap\n    tags?: SyncTag[]\n  } | null>(null)\n  const {projectId, dataset} = useMemo(() => {\n    const {projectId, dataset} = client.config()\n    return {projectId, dataset} as Required<Pick<ClientConfig, 'projectId' | 'dataset'>>\n  }, [client])\n\n  // Make sure any async errors bubble up to the nearest error boundary\n  const [error, setError] = useState<unknown>(null)\n  if (error) throw error\n\n  const [revalidate, startRefresh] = useRevalidate({refreshInterval})\n  const shouldRefetch = revalidate === 'refresh' || revalidate === 'inflight'\n  useEffect(() => {\n    if (!shouldRefetch) {\n      return\n    }\n\n    let fulfilled = false\n    let fetching = false\n    const controller = new AbortController()\n    // eslint-disable-next-line no-inner-declarations\n    async function effect() {\n      const {signal} = controller\n      fetching = true\n      const {result, resultSourceMap, syncTags} = await client.fetch(query, params, {\n        tag: 'presentation-loader',\n        signal,\n        perspective,\n        filterResponse: false,\n      })\n      fetching = false\n\n      if (!signal.aborted) {\n        setSnapshot({result, resultSourceMap, tags: syncTags})\n\n        fulfilled = true\n      }\n    }\n    const onFinally = startRefresh()\n    effect()\n      .catch((error) => {\n        fetching = false\n        if (error.name !== 'AbortError') {\n          setError(error)\n        }\n      })\n      .finally(onFinally)\n    return () => {\n      if (!fulfilled && !fetching) {\n        controller.abort()\n      }\n    }\n  }, [\n    client,\n    dataset,\n    liveDocument,\n    params,\n    perspective,\n    projectId,\n    query,\n    shouldRefetch,\n    startRefresh,\n  ])\n\n  return useMemo(() => {\n    if (documentsCacheLastUpdated && snapshot?.resultSourceMap) {\n      return {\n        result: turboChargeResultIfSourceMap(\n          cache,\n          liveDocument,\n          snapshot.result,\n          perspective,\n          snapshot.resultSourceMap,\n        ),\n        resultSourceMap: snapshot.resultSourceMap,\n      }\n    }\n    return snapshot\n  }, [cache, documentsCacheLastUpdated, liveDocument, perspective, snapshot])\n}\n\nlet warnedAboutCrossDatasetReference = false\nexport function turboChargeResultIfSourceMap<T = unknown>(\n  cache: SharedProps['cache'],\n  liveDocument: Partial<SanityDocument> | null | undefined,\n  result: T,\n  perspective: ClientPerspective,\n  resultSourceMap?: ContentSourceMap,\n): T {\n  if (perspective === 'raw') {\n    throw new Error('turboChargeResultIfSourceMap does not support raw perspective')\n  }\n  return applySourceDocuments(\n    result,\n    resultSourceMap,\n    (sourceDocument) => {\n      if (sourceDocument._projectId) {\n        // @TODO Handle cross dataset references\n        if (!warnedAboutCrossDatasetReference) {\n          // eslint-disable-next-line no-console\n          console.warn(\n            'Cross dataset references are not supported yet, ignoring source document',\n            sourceDocument,\n          )\n          warnedAboutCrossDatasetReference = true\n        }\n        return undefined\n      }\n      // If there's a displayed document, always prefer it\n      if (\n        liveDocument?._id &&\n        getPublishedId(liveDocument._id) === getPublishedId(sourceDocument._id)\n      ) {\n        return liveDocument\n      }\n      // Fallback to general documents cache\n      return cache.get(sourceDocument._id)\n    },\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    (changedValue: any, {previousValue}) => {\n      if (typeof changedValue === 'number' && typeof previousValue === 'string') {\n        // If the string() function was used in the query, we need to convert the source value to a string as well\n        return `${changedValue}`\n      }\n      return changedValue\n    },\n    perspective,\n  )\n}\n"],"names":["LoaderQueries","props","liveDocument","controller","perspective","activePerspective","documentsOnPage","onLoadersConnection","onDocumentsOnPage","comlink","setComlink","useState","liveQueries","setLiveQueries","projectId","useProjectId","dataset","useDataset","useEffect","interval","setInterval","Object","keys","length","now","Date","values","some","liveQuery","heartbeat","receivedAt","next","key","value","entries","MIN_LOADER_QUERY_LISTEN_HEARTBEAT_INTERVAL","clearInterval","createChannel","name","connectTo","createConnectionMachine","provide","actors","createCompatibilityActors","onStatus","on","data","documents","Error","prev","getQueryCacheKey","query","params","start","cache","LRUCache","LIVE_QUERY_CACHE_SIZE","studioClient","useClient","apiVersion","clientConfig","useMemo","config","client","withConfig","resultSourceMap","post","turboIds","documentsActuallyInUse","map","_id","ids","Set","max","capacity","documentsCacheLastUpdated","setDocumentsCacheLastUpdated","jsxs","Fragment","jsx","Turbo","memo","$","_c","t0","Symbol","for","batch","setBatch","t1","t2","batchSet","flat","nextBatch","turboId","has","add","nextBatchSlice","slice","LIVE_QUERY_CACHE_BATCH_SIZE","prevBatch","t3","t4","subscription","listen","events","effectFormat","includePreviousRevision","includeResult","tag","subscribe","update","type","transition","delete","documentId","effects","apply","cachedDocument","peek","patchDoc","_rev","patchedDocument","applyPatch","set","unsubscribe","t5","t6","JSON","stringify","GetDocuments","missingIds","filter","id","getDocuments","then","doc","console","error","displayName","QuerySubscription","refreshInterval","useQueryParams","useQuerySubscription","result","tags","snapshot","setSnapshot","setError","revalidate","startRefresh","useRevalidate","shouldRefetch","fulfilled","fetching","AbortController","effect","signal","syncTags","fetch","filterResponse","aborted","onFinally","catch","finally","abort","turboChargeResultIfSourceMap","warnedAboutCrossDatasetReference","applySourceDocuments","sourceDocument","_projectId","warn","getPublishedId","get","changedValue","previousValue"],"mappings":"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"}