"use strict";
var reactCompilerRuntime = require("react-compiler-runtime"), react = require("react"), rxjs = require("rxjs"), sanity = require("sanity"), index = require("./index.cjs");
const PostMessageDocuments = (props) => {
  const $ = reactCompilerRuntime.c(13), {
    comlink
  } = props;
  let t0;
  $[0] === Symbol.for("react.memo_cache_sentinel") ? (t0 = {
    apiVersion: index.API_VERSION
  }, $[0] = t0) : t0 = $[0];
  const client = sanity.useClient(t0);
  let t1, t2;
  $[1] !== client || $[2] !== comlink ? (t1 = () => {
    const listener = client.listen('*[!(_id in path("_.**"))]', {}, {
      effectFormat: "mendoza",
      events: ["welcome", "mutation", "reconnect"],
      includePreviousRevision: !1,
      includeResult: !1,
      tag: "presentation-documents",
      visibility: "transaction"
    }).pipe(rxjs.filter(_temp)), welcome = listener.pipe(rxjs.filter(_temp2), rxjs.shareReplay({
      bufferSize: 1,
      refCount: !1
    })), unsubscribe = comlink.on("visual-editing/snapshot-welcome", async () => ({
      event: await new Promise((resolve) => {
        welcome.pipe(rxjs.first()).subscribe((event_1) => {
          resolve(event_1);
        });
      })
    })), reconnect = listener.pipe(rxjs.filter(_temp3)), mutations = listener.pipe(rxjs.filter(_temp4)), events = rxjs.merge(welcome, mutations, reconnect).subscribe((event_5) => {
      comlink.post("presentation/snapshot-event", {
        event: event_5
      });
    });
    return () => {
      unsubscribe(), events.unsubscribe();
    };
  }, t2 = [client, comlink], $[1] = client, $[2] = comlink, $[3] = t1, $[4] = t2) : (t1 = $[3], t2 = $[4]), react.useEffect(t1, t2);
  let t3, t4;
  $[5] !== client || $[6] !== comlink ? (t3 = () => comlink.on("visual-editing/fetch-snapshot", async (data) => ({
    snapshot: await client.getDocument(data.documentId, {
      tag: "document.snapshots"
    })
  })), t4 = [client, comlink], $[5] = client, $[6] = comlink, $[7] = t3, $[8] = t4) : (t3 = $[7], t4 = $[8]), react.useEffect(t3, t4);
  let t5, t6;
  return $[9] !== client || $[10] !== comlink ? (t5 = () => comlink.on("visual-editing/mutate", async (data_0) => client.dataRequest("mutate", data_0, {
    visibility: "async",
    returnDocuments: !0
  })), t6 = [client, comlink], $[9] = client, $[10] = comlink, $[11] = t5, $[12] = t6) : (t5 = $[11], t6 = $[12]), react.useEffect(t5, t6), null;
};
var PostMessageDocuments$1 = react.memo(PostMessageDocuments);
function _temp(event) {
  return event.type === "welcome" || event.type === "reconnect" || event.type === "mutation";
}
function _temp2(event_0) {
  return event_0.type === "welcome";
}
function _temp3(event_3) {
  return event_3.type === "reconnect";
}
function _temp4(event_4) {
  return event_4.type === "mutation";
}
exports.default = PostMessageDocuments$1;
//# sourceMappingURL=PostMessageDocuments.cjs.map
