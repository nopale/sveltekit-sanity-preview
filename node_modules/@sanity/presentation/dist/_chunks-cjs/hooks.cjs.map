{"version":3,"file":"hooks.cjs","sources":["../../../visual-editing-helpers/dist/hooks.js"],"sourcesContent":["import { useMemo, useState, useCallback, useEffect, useSyncExternalStore } from \"react\";\nfunction useQueryParams(params) {\n  const stringifiedParams = useMemo(() => JSON.stringify(params || {}), [params]);\n  return useMemo(() => JSON.parse(stringifiedParams), [stringifiedParams]);\n}\nfunction useRevalidate(props) {\n  const { refreshInterval } = props, shouldPause = useShouldPause(), [state, setState] = useState(\"hit\"), startRefresh = useCallback(() => (setState(\"inflight\"), () => setState(\"hit\")), []);\n  return useEffect(() => {\n    if (!refreshInterval || state !== \"hit\")\n      return;\n    const timeout = setTimeout(() => setState(\"stale\"), refreshInterval);\n    return () => clearTimeout(timeout);\n  }, [refreshInterval, state]), useEffect(() => {\n    if (state !== \"hit\")\n      return;\n    const onFocus = () => setState(\"stale\");\n    return window.addEventListener(\"focus\", onFocus), () => window.removeEventListener(\"focus\", onFocus);\n  }, [refreshInterval, state]), useEffect(() => {\n    shouldPause && state === \"hit\" && setState(\"stale\"), !shouldPause && state === \"stale\" && setState(\"refresh\");\n  }, [shouldPause, state]), [state, startRefresh];\n}\nfunction useShouldPause() {\n  const [online, setOnline] = useState(!1);\n  useEffect(() => {\n    setOnline(navigator.onLine);\n    const online2 = () => setOnline(!0), offline = () => setOnline(!1);\n    return window.addEventListener(\"online\", online2), window.addEventListener(\"offline\", offline), () => {\n      window.removeEventListener(\"online\", online2), window.removeEventListener(\"offline\", offline);\n    };\n  }, []);\n  const visibilityState = useSyncExternalStore(\n    onVisibilityChange,\n    () => document.visibilityState,\n    () => \"hidden\"\n  );\n  return !online || visibilityState === \"hidden\";\n}\nfunction onVisibilityChange(onStoreChange) {\n  return document.addEventListener(\"visibilitychange\", onStoreChange), () => document.removeEventListener(\"visibilitychange\", onStoreChange);\n}\nexport {\n  useQueryParams,\n  useRevalidate\n};\n//# sourceMappingURL=hooks.js.map\n"],"names":["useQueryParams","params","stringifiedParams","useMemo","JSON","stringify","parse"],"mappings":";;AAOO,SAASA,eAAeC,QAAsD;AAC7EC,QAAAA,oBAAoBC,cAAQ,MAAMC,KAAKC,UAAUJ,UAAU,CAAK,CAAA,GAAA,CAACA,MAAM,CAAC;AACvEE,SAAAA,MAAAA,QAAQ,MAAMC,KAAKE,MAAMJ,iBAAiB,GAAkB,CAACA,iBAAiB,CAAC;AACxF;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"}