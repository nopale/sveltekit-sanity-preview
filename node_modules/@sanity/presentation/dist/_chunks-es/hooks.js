import { c } from "react-compiler-runtime";
import { useMemo, useState, useCallback, useEffect, useSyncExternalStore } from "react";
function useQueryParams(params) {
  const stringifiedParams = useMemo(() => JSON.stringify(params || {}), [params]);
  return useMemo(() => JSON.parse(stringifiedParams), [stringifiedParams]);
}
function useRevalidate(props) {
  const {
    refreshInterval
  } = props, shouldPause = useShouldPause(), [state, setState] = useState("hit"), startRefresh = useCallback(() => (setState("inflight"), () => setState("hit")), []);
  return useEffect(() => {
    if (!refreshInterval || state !== "hit") return;
    const timeout = setTimeout(() => setState("stale"), refreshInterval);
    return () => clearTimeout(timeout);
  }, [refreshInterval, state]), useEffect(() => {
    if (state !== "hit") return;
    const onFocus = () => setState("stale");
    return window.addEventListener("focus", onFocus), () => window.removeEventListener("focus", onFocus);
  }, [refreshInterval, state]), useEffect(() => {
    shouldPause && state === "hit" && setState("stale"), !shouldPause && state === "stale" && setState("refresh");
  }, [shouldPause, state]), [state, startRefresh];
}
function useShouldPause() {
  const $ = c(2), [online, setOnline] = useState(!1);
  let t0, t1;
  $[0] === Symbol.for("react.memo_cache_sentinel") ? (t0 = () => {
    setOnline(navigator.onLine);
    const online2 = () => setOnline(!0), offline = () => setOnline(!1);
    return window.addEventListener("online", online2), window.addEventListener("offline", offline), () => {
      window.removeEventListener("online", online2), window.removeEventListener("offline", offline);
    };
  }, t1 = [], $[0] = t0, $[1] = t1) : (t0 = $[0], t1 = $[1]), useEffect(t0, t1);
  const visibilityState = useSyncExternalStore(onVisibilityChange, _temp, _temp2);
  return !online || visibilityState === "hidden";
}
function _temp2() {
  return "hidden";
}
function _temp() {
  return document.visibilityState;
}
function onVisibilityChange(onStoreChange) {
  return document.addEventListener("visibilitychange", onStoreChange), () => document.removeEventListener("visibilitychange", onStoreChange);
}
export {
  useQueryParams,
  useRevalidate
};
//# sourceMappingURL=hooks.js.map
