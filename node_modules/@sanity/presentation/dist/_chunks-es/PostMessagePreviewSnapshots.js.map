{"version":3,"file":"PostMessagePreviewSnapshots.js","sources":["../../src/editor/PostMessagePreviewSnapshots.tsx"],"sourcesContent":["import type {PreviewSnapshot} from '@repo/visual-editing-helpers'\nimport type {ClientPerspective} from '@sanity/client'\nimport {memo, useEffect, useMemo, type FC} from 'react'\nimport {\n  combineLatest,\n  debounceTime,\n  filter,\n  map,\n  merge,\n  NEVER,\n  share,\n  skipWhile,\n  Subject,\n  switchMap,\n  takeUntil,\n} from 'rxjs'\nimport {getDraftId, getPublishedId} from 'sanity'\nimport {useDocumentPreviewStore, useSchema, type PreviewValue} from '../internals'\nimport type {VisualEditingConnection} from '../types'\n\ntype Ref = {\n  _id: string\n  _type: string\n}\n\nexport interface PostMessagePreviewsProps {\n  comlink: VisualEditingConnection\n  perspective: ClientPerspective\n  refs: Ref[]\n}\n\nconst PostMessagePreviews: FC<PostMessagePreviewsProps> = (props) => {\n  const {comlink, refs, perspective} = props\n  const documentPreviewStore = useDocumentPreviewStore()\n  const schema = useSchema()\n\n  const refsSubject = useMemo(() => new Subject<Ref[]>(), [])\n\n  const previews$ = useMemo(() => {\n    return refsSubject.asObservable().pipe(\n      switchMap((refs) => {\n        return combineLatest(\n          refs.map((ref) => {\n            const draftRef = {...ref, _id: getDraftId(ref._id)}\n            const draft$ =\n              perspective === 'previewDrafts'\n                ? documentPreviewStore\n                    .observeForPreview(draftRef, schema.get(draftRef._type)!)\n                    .pipe(\n                      // Share to prevent double subscribe in the merge\n                      share(),\n                      // Don't emit if no snapshot is returned\n                      skipWhile((p) => p.snapshot === null),\n                    )\n                : // Don't emit if not displaying drafts\n                  NEVER\n\n            const publishedRef = {...ref, _id: getPublishedId(ref._id)}\n            const published$ = documentPreviewStore.observeForPreview(\n              publishedRef,\n              schema.get(publishedRef._type)!,\n            )\n\n            return merge(published$.pipe(takeUntil(draft$)), draft$).pipe(\n              filter((p) => !!p.snapshot),\n              map((p) => {\n                const snapshot = p.snapshot as PreviewValue & {\n                  _id: string\n                }\n                return {\n                  _id: getPublishedId(snapshot._id),\n                  title: snapshot.title,\n                  subtitle: snapshot.subtitle,\n                  description: snapshot.description,\n                  imageUrl: snapshot.imageUrl,\n                } as PreviewSnapshot\n              }),\n            )\n          }),\n        )\n      }),\n      debounceTime(0),\n    )\n  }, [documentPreviewStore, refsSubject, schema, perspective])\n\n  useEffect(() => {\n    const sub = previews$.subscribe((snapshots) => {\n      comlink.post('presentation/preview-snapshots', {snapshots})\n    })\n\n    return () => {\n      sub.unsubscribe()\n    }\n  }, [comlink, previews$])\n\n  useEffect(() => {\n    refsSubject.next(refs)\n  }, [refs, refsSubject])\n\n  return null\n}\n\nexport default memo(PostMessagePreviews)\n"],"names":["PostMessagePreviews","props","comlink","refs","perspective","documentPreviewStore","useDocumentPreviewStore","schema","useSchema","refsSubject","useMemo","Subject","previews$","asObservable","pipe","switchMap","combineLatest","map","ref","draftRef","_id","getDraftId","draft$","observeForPreview","get","_type","share","skipWhile","p","snapshot","NEVER","publishedRef","getPublishedId","published$","merge","takeUntil","filter","title","subtitle","description","imageUrl","debounceTime","useEffect","sub","subscribe","snapshots","post","unsubscribe","next","memo"],"mappings":";;;;;;;;;;;AA+BA,MAAMA,sBAAqDC,CAAU,UAAA;AAC7D,QAAA;AAAA,IAACC;AAAAA,IAASC;AAAAA,IAAMC;AAAAA,EAAeH,IAAAA,OAC/BI,uBAAuBC,wBAAAA,GACvBC,SAASC,aAETC,cAAcC,QAAQ,MAAM,IAAIC,QAAe,GAAG,CAAA,CAAE,GAEpDC,YAAYF,QAAQ,MACjBD,YAAYI,aAAAA,EAAeC,KAChCC,UAAWZ,CAAAA,WACFa,cACLb,OAAKc,IAAKC,CAAQ,QAAA;AACVC,UAAAA,WAAW,iCAAID,GAAJ,GAAA;AAAA,MAASE,KAAKC,WAAWH,IAAIE,GAAG;AAAA,IAC3CE,CAAAA,GAAAA,SACJlB,gBAAgB,kBACZC,qBACGkB,kBAAkBJ,UAAUZ,OAAOiB,IAAIL,SAASM,KAAK,CAAE,EACvDX;AAAAA;AAAAA,MAECY,MAAM;AAAA;AAAA,MAENC,UAAWC,CAAAA,MAAMA,EAAEC,aAAa,IAAI;AAAA,IACtC;AAAA;AAAA,MAEFC;AAAAA,OAEAC,eAAe,iCAAIb,GAAJ,GAAA;AAAA,MAASE,KAAKY,eAAed,IAAIE,GAAG;AAAA,IAAA,CAAC,GACpDa,aAAa5B,qBAAqBkB,kBACtCQ,cACAxB,OAAOiB,IAAIO,aAAaN,KAAK,CAC/B;AAEA,WAAOS,MAAMD,WAAWnB,KAAKqB,UAAUb,MAAM,CAAC,GAAGA,MAAM,EAAER,KACvDsB,OAAQR,SAAM,CAAC,CAACA,IAAEC,QAAQ,GAC1BZ,IAAKW,CAAM,QAAA;AACT,YAAMC,WAAWD,IAAEC;AAGZ,aAAA;AAAA,QACLT,KAAKY,eAAeH,SAAST,GAAG;AAAA,QAChCiB,OAAOR,SAASQ;AAAAA,QAChBC,UAAUT,SAASS;AAAAA,QACnBC,aAAaV,SAASU;AAAAA,QACtBC,UAAUX,SAASW;AAAAA,MACrB;AAAA,IAAA,CACD,CACH;AAAA,EAAA,CACD,CACH,CACD,GACDC,aAAa,CAAC,CAChB,GACC,CAACpC,sBAAsBI,aAAaF,QAAQH,WAAW,CAAC;AAE3DsC,SAAAA,UAAU,MAAM;AACRC,UAAAA,MAAM/B,UAAUgC,UAAWC,CAAc,cAAA;AAC7C3C,cAAQ4C,KAAK,kCAAkC;AAAA,QAACD;AAAAA,MAAAA,CAAU;AAAA,IAAA,CAC3D;AAED,WAAO,MAAM;AACXF,UAAII,YAAY;AAAA,IAClB;AAAA,KACC,CAAC7C,SAASU,SAAS,CAAC,GAEvB8B,UAAU,MAAM;AACdjC,gBAAYuC,KAAK7C,IAAI;AAAA,EACpB,GAAA,CAACA,MAAMM,WAAW,CAAC,GAEf;AACT;AAEA,IAAewC,8BAAAA,KAAKjD,mBAAmB;"}