import { c } from "react-compiler-runtime";
import { createContext, useContext, memo, useEffect } from "react";
function createNoopLogger() {
  const logger = {
    updateUserProperties() {
    },
    trace,
    log
  };
  function trace(telemetryTrace) {
    return {
      start() {
      },
      log(data) {
      },
      complete() {
      },
      newContext(name) {
        return logger;
      },
      error(error) {
      },
      await: (promise) => promise
    };
  }
  function log(event, data) {
  }
  return logger;
}
const noopLogger = createNoopLogger(), TelemetryLoggerContext = createContext(noopLogger);
function useTelemetry() {
  return useContext(TelemetryLoggerContext);
}
const PostMessageTelemetry = (props) => {
  const $ = c(4), {
    comlink
  } = props, telemetry = useTelemetry();
  let t0, t1;
  return $[0] !== comlink || $[1] !== telemetry ? (t0 = () => comlink.on("visual-editing/telemetry-log", async (message) => {
    const {
      event,
      data
    } = message;
    data ? telemetry.log(event, data) : telemetry.log(event);
  }), t1 = [comlink, telemetry], $[0] = comlink, $[1] = telemetry, $[2] = t0, $[3] = t1) : (t0 = $[2], t1 = $[3]), useEffect(t0, t1), null;
};
var PostMessageTelemetry$1 = memo(PostMessageTelemetry);
export {
  PostMessageTelemetry$1 as default
};
//# sourceMappingURL=PostMessageTelemetry.js.map
