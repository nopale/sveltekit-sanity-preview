{"version":3,"file":"index.cjs","sources":["../src/editor/create-editor-schema.ts","../src/editor/define-schema.ts","../src/utils/debug.ts","../src/utils/paths.ts","../src/utils/ranges.ts","../src/utils/selection.ts","../src/utils/values.ts","../src/utils/weakMaps.ts","../src/editor/nodes/DefaultObject.tsx","../src/editor/nodes/index.ts","../src/editor/components/DraggableBlock.tsx","../src/editor/components/Element.tsx","../src/editor/hooks/usePortableTextEditor.ts","../src/editor/nodes/DefaultAnnotation.tsx","../src/utils/schema.ts","../src/editor/mutation-machine.ts","../src/utils/validateValue.ts","../src/utils/withChanges.ts","../src/utils/withoutPatching.ts","../../../node_modules/.pnpm/@sanity+diff-match-patch@3.1.2/node_modules/@sanity/diff-match-patch/dist/index.js","../src/utils/withUndoRedo.ts","../src/editor/plugins/createWithUndoRedo.ts","../src/editor/sync-machine.ts","../src/editor/components/Synchronizer.tsx","../src/utils/operationToPatches.ts","../src/editor/plugins/create-with-event-listeners.ts","../src/editor/plugins/createWithMaxBlocks.ts","../src/editor/plugins/createWithObjectKeys.ts","../src/utils/applyPatch.ts","../src/editor/plugins/createWithPatches.ts","../src/editor/plugins/createWithPlaceholderBlock.ts","../src/editor/plugins/createWithPortableTextBlockStyle.ts","../../../node_modules/.pnpm/@portabletext+toolkit@2.0.16/node_modules/@portabletext/toolkit/dist/index.js","../src/utils/sibling-utils.ts","../src/editor/plugins/createWithPortableTextMarkModel.ts","../src/editor/plugins/createWithPortableTextSelections.ts","../src/editor/plugins/createWithSchemaTypes.ts","../src/editor/plugins/createWithUtils.ts","../src/editor/plugins/with-plugins.ts","../src/editor/create-slate-editor.tsx","../src/behavior-actions/behavior.action.list-item.ts","../src/behavior-actions/behavior.action.style.ts","../src/editor/plugins/createWithEditableAPI.ts","../src/behavior-actions/behavior.action-utils.insert-block.ts","../src/behavior-actions/behavior.action.insert-block-object.ts","../src/behavior-actions/behavior.action.insert-break.ts","../src/behavior-actions/behavior.action.insert-inline-object.ts","../src/behavior-actions/behavior.action.insert-span.ts","../src/behavior-actions/behavior.action.text-block.set.ts","../src/behavior-actions/behavior.action.text-block.unset.ts","../src/behavior-actions/behavior.actions.ts","../src/editor/get-active-decorators.ts","../src/editor/editor-machine.ts","../src/editor/get-value.ts","../src/editor/editor-selector.ts","../src/editor/key-generator.ts","../src/editor/create-editor.ts","../src/editor/editor-actor-context.ts","../src/editor/hooks/usePortableTextEditorSelection.tsx","../src/editor/PortableTextEditor.tsx","../src/editor/components/Leaf.tsx","../src/editor/plugins/createWithHotKeys.ts","../src/editor/plugins/createWithInsertData.ts","../src/editor/withSyncRangeDecorations.ts","../src/editor/Editable.tsx","../src/editor/editor-provider.tsx","../src/editor/editor-event-listener.tsx"],"sourcesContent":["import type {\n  ArraySchemaType,\n  BlockSchemaType,\n  ObjectSchemaType,\n  PortableTextBlock,\n  SchemaType,\n  SpanSchemaType,\n} from '@sanity/types'\nimport type {EditorSchema} from './define-schema'\n\nexport function createEditorSchema(\n  portableTextType: ArraySchemaType<PortableTextBlock>,\n): EditorSchema {\n  if (!portableTextType) {\n    throw new Error(\"Parameter 'portabletextType' missing (required)\")\n  }\n  const blockType = portableTextType.of?.find(findBlockType) as\n    | BlockSchemaType\n    | undefined\n  if (!blockType) {\n    throw new Error('Block type is not defined in this schema (required)')\n  }\n  const childrenField = blockType.fields?.find(\n    (field) => field.name === 'children',\n  ) as {type: ArraySchemaType} | undefined\n  if (!childrenField) {\n    throw new Error('Children field for block type found in schema (required)')\n  }\n  const ofType = childrenField.type.of\n  if (!ofType) {\n    throw new Error(\n      'Valid types for block children not found in schema (required)',\n    )\n  }\n  const spanType = ofType.find((memberType) => memberType.name === 'span') as\n    | ObjectSchemaType\n    | undefined\n  if (!spanType) {\n    throw new Error('Span type not found in schema (required)')\n  }\n  const inlineObjectTypes = (ofType.filter(\n    (memberType) => memberType.name !== 'span',\n  ) || []) as ObjectSchemaType[]\n  const blockObjectTypes = (portableTextType.of?.filter(\n    (field) => field.name !== blockType.name,\n  ) || []) as ObjectSchemaType[]\n  return {\n    styles: resolveEnabledStyles(blockType),\n    decorators: resolveEnabledDecorators(spanType),\n    lists: resolveEnabledListItems(blockType),\n    block: blockType,\n    span: spanType,\n    portableText: portableTextType,\n    inlineObjects: inlineObjectTypes,\n    blockObjects: blockObjectTypes,\n    annotations: (spanType as SpanSchemaType).annotations,\n  }\n}\n\nfunction resolveEnabledStyles(blockType: ObjectSchemaType) {\n  const styleField = blockType.fields?.find(\n    (btField) => btField.name === 'style',\n  )\n  if (!styleField) {\n    throw new Error(\n      \"A field with name 'style' is not defined in the block type (required).\",\n    )\n  }\n  const textStyles =\n    styleField.type.options?.list &&\n    styleField.type.options.list?.filter(\n      (style: {value: string}) => style.value,\n    )\n  if (!textStyles || textStyles.length === 0) {\n    throw new Error(\n      'The style fields need at least one style ' +\n        \"defined. I.e: {title: 'Normal', value: 'normal'}.\",\n    )\n  }\n  return textStyles\n}\n\nfunction resolveEnabledDecorators(spanType: ObjectSchemaType) {\n  return (spanType as any).decorators\n}\n\nfunction resolveEnabledListItems(blockType: ObjectSchemaType) {\n  const listField = blockType.fields?.find(\n    (btField) => btField.name === 'listItem',\n  )\n  if (!listField) {\n    throw new Error(\n      \"A field with name 'listItem' is not defined in the block type (required).\",\n    )\n  }\n  const listItems =\n    listField.type.options?.list &&\n    listField.type.options.list.filter((list: {value: string}) => list.value)\n  if (!listItems) {\n    throw new Error('The list field need at least to be an empty array')\n  }\n  return listItems\n}\n\nfunction findBlockType(type: SchemaType): BlockSchemaType | null {\n  if (type.type) {\n    return findBlockType(type.type)\n  }\n\n  if (type.name === 'block') {\n    return type as BlockSchemaType\n  }\n\n  return null\n}\n","import {Schema as SanitySchema} from '@sanity/schema'\nimport {defineField, defineType, type ObjectSchemaType} from '@sanity/types'\nimport startCase from 'lodash.startcase'\nimport type {PortableTextMemberSchemaTypes} from '../types/editor'\nimport {createEditorSchema} from './create-editor-schema'\n\n/**\n * @public\n */\nexport type BaseDefinition = {\n  name: string\n  title?: string\n}\n\n/**\n * @public\n */\nexport type SchemaDefinition<\n  TBaseDefinition extends BaseDefinition = BaseDefinition,\n> = {\n  decorators?: ReadonlyArray<TBaseDefinition>\n  blockObjects?: ReadonlyArray<TBaseDefinition>\n  inlineObjects?: ReadonlyArray<TBaseDefinition>\n  annotations?: ReadonlyArray<TBaseDefinition>\n  lists?: ReadonlyArray<TBaseDefinition>\n  styles?: ReadonlyArray<TBaseDefinition>\n}\n\n/**\n * @public\n */\nexport function defineSchema<const TSchemaDefinition extends SchemaDefinition>(\n  definition: TSchemaDefinition,\n): TSchemaDefinition {\n  return definition\n}\n\n/**\n * @public\n */\nexport type EditorSchema = PortableTextMemberSchemaTypes\n\nexport function compileSchemaDefinition<\n  TSchemaDefinition extends SchemaDefinition,\n>(definition?: TSchemaDefinition) {\n  const blockObjects =\n    definition?.blockObjects?.map((blockObject) =>\n      defineType({\n        type: 'object',\n        // Very naive way to work around `SanitySchema.compile` adding default\n        // fields to objects with the name `image`\n        name: blockObject.name === 'image' ? 'tmp-image' : blockObject.name,\n        title: blockObject.title,\n        fields: [],\n      }),\n    ) ?? []\n  const inlineObjects =\n    definition?.inlineObjects?.map((inlineObject) =>\n      defineType({\n        type: 'object',\n        name: inlineObject.name,\n        title: inlineObject.title,\n        fields: [],\n      }),\n    ) ?? []\n\n  const portableTextSchema = defineField({\n    type: 'array',\n    name: 'portable-text',\n    of: [\n      ...blockObjects.map((blockObject) => ({type: blockObject.name})),\n      {\n        type: 'block',\n        name: 'block',\n        of: inlineObjects.map((inlineObject) => ({type: inlineObject.name})),\n        marks: {\n          decorators:\n            definition?.decorators?.map((decorator) => ({\n              title: decorator.title ?? startCase(decorator.name),\n              value: decorator.name,\n            })) ?? [],\n          annotations:\n            definition?.annotations?.map((annotation) => ({\n              name: annotation.name,\n              type: 'object',\n              title: annotation.title,\n            })) ?? [],\n        },\n        lists:\n          definition?.lists?.map((list) => ({\n            value: list.name,\n            title: list.title ?? startCase(list.name),\n          })) ?? [],\n        styles:\n          definition?.styles?.map((style) => ({\n            value: style.name,\n            title: style.title ?? startCase(style.name),\n          })) ?? [],\n      },\n    ],\n  })\n\n  const schema = SanitySchema.compile({\n    types: [portableTextSchema, ...blockObjects, ...inlineObjects],\n  }).get('portable-text')\n\n  const pteSchema = createEditorSchema(schema)\n\n  return {\n    ...pteSchema,\n    blockObjects: pteSchema.blockObjects.map((blockObject) =>\n      blockObject.name === 'tmp-image'\n        ? ({\n            ...blockObject,\n            name: 'image',\n            type: {\n              ...blockObject.type,\n              name: 'image',\n            },\n          } as ObjectSchemaType)\n        : blockObject,\n    ),\n  } satisfies EditorSchema\n}\n","import debug from 'debug'\n\nconst rootName = 'sanity-pte:'\n\nexport default debug(rootName)\nexport function debugWithName(name: string): debug.Debugger {\n  const namespace = `${rootName}${name}`\n  if (debug && debug.enabled(namespace)) {\n    return debug(namespace)\n  }\n  return debug(rootName)\n}\n","import {isKeySegment, type Path} from '@sanity/types'\nimport {isEqual} from 'lodash'\nimport {\n  Editor,\n  Element,\n  type Descendant,\n  type Point,\n  type Path as SlatePath,\n} from 'slate'\nimport type {PortableTextMemberSchemaTypes} from '../types/editor'\nimport type {ObjectWithKeyAndType} from './ranges'\n\nexport function createKeyedPath(\n  point: Point,\n  value: ObjectWithKeyAndType[] | undefined,\n  types: PortableTextMemberSchemaTypes,\n): Path | null {\n  const blockPath = [point.path[0]]\n  if (!value) {\n    return null\n  }\n  const block = value[blockPath[0]]\n  if (!block) {\n    return null\n  }\n  const keyedBlockPath = [{_key: block._key}]\n  if (block._type !== types.block.name) {\n    return keyedBlockPath as Path\n  }\n  let keyedChildPath: Path | undefined\n  const childPath = point.path.slice(0, 2)\n  const child = Array.isArray(block.children) && block.children[childPath[1]]\n  if (child) {\n    keyedChildPath = ['children', {_key: child._key}]\n  }\n  return (\n    keyedChildPath ? [...keyedBlockPath, ...keyedChildPath] : keyedBlockPath\n  ) as Path\n}\n\nexport function toSlatePath(path: Path, editor: Editor): SlatePath {\n  if (!editor) {\n    return []\n  }\n  const [block, blockPath] = Array.from(\n    Editor.nodes(editor, {\n      at: [],\n      match: (n) =>\n        isKeySegment(path[0]) && (n as Descendant)._key === path[0]._key,\n    }),\n  )[0] || [undefined, undefined]\n\n  if (!block || !Element.isElement(block)) {\n    return []\n  }\n\n  if (editor.isVoid(block)) {\n    return [blockPath[0], 0]\n  }\n\n  const childPath = [path[2]]\n  const childIndex = block.children.findIndex((child) =>\n    isEqual([{_key: child._key}], childPath),\n  )\n\n  if (childIndex >= 0 && block.children[childIndex]) {\n    const child = block.children[childIndex]\n    if (Element.isElement(child) && editor.isVoid(child)) {\n      return blockPath.concat(childIndex).concat(0)\n    }\n    return blockPath.concat(childIndex)\n  }\n\n  return [blockPath[0], 0]\n}\n","import {Point, Range, type BaseRange, type Editor, type Operation} from 'slate'\nimport type {\n  EditorSelection,\n  EditorSelectionPoint,\n  PortableTextMemberSchemaTypes,\n} from '../types/editor'\nimport {createKeyedPath, toSlatePath} from './paths'\n\nexport interface ObjectWithKeyAndType {\n  _key: string\n  _type: string\n  children?: ObjectWithKeyAndType[]\n}\n\nexport function toPortableTextRange(\n  value: ObjectWithKeyAndType[] | undefined,\n  range: BaseRange | Partial<BaseRange> | null,\n  types: PortableTextMemberSchemaTypes,\n): EditorSelection {\n  if (!range) {\n    return null\n  }\n  let anchor: EditorSelectionPoint | null = null\n  let focus: EditorSelectionPoint | null = null\n  const anchorPath = range.anchor && createKeyedPath(range.anchor, value, types)\n  if (anchorPath && range.anchor) {\n    anchor = {\n      path: anchorPath,\n      offset: range.anchor.offset,\n    }\n  }\n  const focusPath = range.focus && createKeyedPath(range.focus, value, types)\n  if (focusPath && range.focus) {\n    focus = {\n      path: focusPath,\n      offset: range.focus.offset,\n    }\n  }\n  const backward = Boolean(\n    Range.isRange(range) ? Range.isBackward(range) : undefined,\n  )\n  return anchor && focus ? {anchor, focus, backward} : null\n}\n\nexport function toSlateRange(\n  selection: EditorSelection,\n  editor: Editor,\n): Range | null {\n  if (!selection || !editor) {\n    return null\n  }\n  const anchor = {\n    path: toSlatePath(selection.anchor.path, editor),\n    offset: selection.anchor.offset,\n  }\n  const focus = {\n    path: toSlatePath(selection.focus.path, editor),\n    offset: selection.focus.offset,\n  }\n  if (focus.path.length === 0 || anchor.path.length === 0) {\n    return null\n  }\n  const range = anchor && focus ? {anchor, focus} : null\n  return range\n}\n\nexport function moveRangeByOperation(\n  range: Range,\n  operation: Operation,\n): Range | null {\n  const anchor = Point.transform(range.anchor, operation)\n  const focus = Point.transform(range.focus, operation)\n\n  if (anchor === null || focus === null) {\n    return null\n  }\n\n  if (Point.equals(anchor, range.anchor) && Point.equals(focus, range.focus)) {\n    return range\n  }\n\n  return {anchor, focus}\n}\n","import type {Path, PortableTextBlock} from '@sanity/types'\nimport {isEqual} from 'lodash'\nimport type {EditorSelection, EditorSelectionPoint} from '../types/editor'\n\nexport function normalizePoint(\n  point: EditorSelectionPoint,\n  value: PortableTextBlock[],\n): EditorSelectionPoint | null {\n  if (!point || !value) {\n    return null\n  }\n  const newPath: Path = []\n  let newOffset: number = point.offset || 0\n  const blockKey =\n    typeof point.path[0] === 'object' &&\n    '_key' in point.path[0] &&\n    point.path[0]._key\n  const childKey =\n    typeof point.path[2] === 'object' &&\n    '_key' in point.path[2] &&\n    point.path[2]._key\n  const block: PortableTextBlock | undefined = value.find(\n    (blk) => blk._key === blockKey,\n  )\n  if (block) {\n    newPath.push({_key: block._key})\n  } else {\n    return null\n  }\n  if (block && point.path[1] === 'children') {\n    if (\n      !block.children ||\n      (Array.isArray(block.children) && block.children.length === 0)\n    ) {\n      return null\n    }\n    const child =\n      Array.isArray(block.children) &&\n      block.children.find((cld) => cld._key === childKey)\n    if (child) {\n      newPath.push('children')\n      newPath.push({_key: child._key})\n      newOffset =\n        child.text && child.text.length >= point.offset\n          ? point.offset\n          : (child.text && child.text.length) || 0\n    } else {\n      return null\n    }\n  }\n  return {path: newPath, offset: newOffset}\n}\n\nexport function normalizeSelection(\n  selection: EditorSelection,\n  value: PortableTextBlock[] | undefined,\n): EditorSelection | null {\n  if (!selection || !value || value.length === 0) {\n    return null\n  }\n  let newAnchor: EditorSelectionPoint | null = null\n  let newFocus: EditorSelectionPoint | null = null\n  const {anchor, focus} = selection\n  if (\n    anchor &&\n    value.find((blk) => isEqual({_key: blk._key}, anchor.path[0]))\n  ) {\n    newAnchor = normalizePoint(anchor, value)\n  }\n  if (focus && value.find((blk) => isEqual({_key: blk._key}, focus.path[0]))) {\n    newFocus = normalizePoint(focus, value)\n  }\n  if (newAnchor && newFocus) {\n    return {anchor: newAnchor, focus: newFocus, backward: selection.backward}\n  }\n  return null\n}\n","import type {\n  PathSegment,\n  PortableTextBlock,\n  PortableTextChild,\n  PortableTextObject,\n  PortableTextTextBlock,\n} from '@sanity/types'\nimport {isEqual} from 'lodash'\nimport {Element, Text, type Descendant, type Node} from 'slate'\nimport type {PortableTextMemberSchemaTypes} from '../types/editor'\n\nexport const EMPTY_MARKDEFS: PortableTextObject[] = []\n\nexport const VOID_CHILD_KEY = 'void-child'\n\ntype Partial<T> = {\n  [P in keyof T]?: T[P]\n}\n\nfunction keepObjectEquality(\n  object: PortableTextBlock | PortableTextChild,\n  keyMap: Record<string, PortableTextBlock | PortableTextChild>,\n) {\n  const value = keyMap[object._key]\n  if (value && isEqual(object, value)) {\n    return value\n  }\n  keyMap[object._key] = object\n  return object\n}\n\nexport function toSlateValue(\n  value: PortableTextBlock[] | undefined,\n  {schemaTypes}: {schemaTypes: PortableTextMemberSchemaTypes},\n  keyMap: Record<string, any> = {},\n): Descendant[] {\n  if (value && Array.isArray(value)) {\n    return value.map((block) => {\n      const {_type, _key, ...rest} = block\n      const voidChildren = [\n        {_key: VOID_CHILD_KEY, _type: 'span', text: '', marks: []},\n      ]\n      const isPortableText = block && block._type === schemaTypes.block.name\n      if (isPortableText) {\n        const textBlock = block as PortableTextTextBlock\n        let hasInlines = false\n        const hasMissingStyle = typeof textBlock.style === 'undefined'\n        const hasMissingMarkDefs = typeof textBlock.markDefs === 'undefined'\n        const hasMissingChildren = typeof textBlock.children === 'undefined'\n\n        const children = (textBlock.children || []).map((child) => {\n          const {_type: cType, _key: cKey, ...cRest} = child\n          // Return 'slate' version of inline object where the actual\n          // value is stored in the `value` property.\n          // In slate, inline objects are represented as regular\n          // children with actual text node in order to be able to\n          // be selected the same way as the rest of the (text) content.\n          if (cType !== 'span') {\n            hasInlines = true\n            return keepObjectEquality(\n              {\n                _type: cType,\n                _key: cKey,\n                children: voidChildren,\n                value: cRest,\n                __inline: true,\n              },\n              keyMap,\n            )\n          }\n          // Original child object (span)\n          return child\n        })\n        // Return original block\n        if (\n          !hasMissingStyle &&\n          !hasMissingMarkDefs &&\n          !hasMissingChildren &&\n          !hasInlines &&\n          Element.isElement(block)\n        ) {\n          // Original object\n          return block\n        }\n        // TODO: remove this when we have a better way to handle missing style\n        if (hasMissingStyle) {\n          rest.style = schemaTypes.styles[0].value\n        }\n        return keepObjectEquality({_type, _key, ...rest, children}, keyMap)\n      }\n      return keepObjectEquality(\n        {\n          _type,\n          _key,\n          children: voidChildren,\n          value: rest,\n        },\n        keyMap,\n      )\n    }) as Descendant[]\n  }\n  return []\n}\n\nexport function fromSlateValue(\n  value: Descendant[],\n  textBlockType: string,\n  keyMap: Record<string, PortableTextBlock | PortableTextChild> = {},\n): PortableTextBlock[] {\n  return value.map((block) => {\n    const {_key, _type} = block\n    if (!_key || !_type) {\n      throw new Error('Not a valid block')\n    }\n    if (\n      _type === textBlockType &&\n      'children' in block &&\n      Array.isArray(block.children) &&\n      _key\n    ) {\n      let hasInlines = false\n      const children = block.children.map((child) => {\n        const {_type: _cType} = child\n        if ('value' in child && _cType !== 'span') {\n          hasInlines = true\n          const {\n            value: v,\n            _key: k,\n            _type: t,\n            __inline: _i,\n            children: _c,\n            ...rest\n          } = child\n          return keepObjectEquality(\n            {...rest, ...v, _key: k as string, _type: t as string},\n            keyMap,\n          )\n        }\n        return child\n      })\n      if (!hasInlines) {\n        return block as PortableTextBlock // Original object\n      }\n      return keepObjectEquality(\n        {...block, children, _key, _type},\n        keyMap,\n      ) as PortableTextBlock\n    }\n    const blockValue = 'value' in block && block.value\n    return keepObjectEquality(\n      {_key, _type, ...(typeof blockValue === 'object' ? blockValue : {})},\n      keyMap,\n    ) as PortableTextBlock\n  })\n}\n\nexport function isEqualToEmptyEditor(\n  children: Descendant[] | PortableTextBlock[],\n  schemaTypes: PortableTextMemberSchemaTypes,\n): boolean {\n  return (\n    children === undefined ||\n    (children && Array.isArray(children) && children.length === 0) ||\n    (children &&\n      Array.isArray(children) &&\n      children.length === 1 &&\n      Element.isElement(children[0]) &&\n      children[0]._type === schemaTypes.block.name &&\n      'style' in children[0] &&\n      children[0].style === schemaTypes.styles[0].value &&\n      !('listItem' in children[0]) &&\n      Array.isArray(children[0].children) &&\n      children[0].children.length === 1 &&\n      Text.isText(children[0].children[0]) &&\n      children[0].children[0]._type === 'span' &&\n      !children[0].children[0].marks?.join('') &&\n      children[0].children[0].text === '')\n  )\n}\n\nexport function findBlockAndIndexFromPath(\n  firstPathSegment: PathSegment,\n  children: (Node | Partial<Node>)[],\n): [Element | undefined, number | undefined] {\n  let blockIndex = -1\n  const isNumber = Number.isInteger(Number(firstPathSegment))\n  if (isNumber) {\n    blockIndex = Number(firstPathSegment)\n  } else if (children) {\n    blockIndex = children.findIndex(\n      (blk) =>\n        Element.isElement(blk) && isEqual({_key: blk._key}, firstPathSegment),\n    )\n  }\n  if (blockIndex > -1) {\n    return [children[blockIndex] as Element, blockIndex]\n  }\n  return [undefined, -1]\n}\n\nexport function findChildAndIndexFromPath(\n  secondPathSegment: PathSegment,\n  block: Element,\n): [Element | Text | undefined, number] {\n  let childIndex = -1\n  const isNumber = Number.isInteger(Number(secondPathSegment))\n  if (isNumber) {\n    childIndex = Number(secondPathSegment)\n  } else {\n    childIndex = block.children.findIndex((child) =>\n      isEqual({_key: child._key}, secondPathSegment),\n    )\n  }\n  if (childIndex > -1) {\n    return [block.children[childIndex] as Element | Text, childIndex]\n  }\n  return [undefined, -1]\n}\n\nexport function getValueOrInitialValue(\n  value: unknown,\n  initialValue: PortableTextBlock[],\n): PortableTextBlock[] | undefined {\n  if (value && Array.isArray(value) && value.length > 0) {\n    return value\n  }\n  return initialValue\n}\n","import type {Editor, Element, Range} from 'slate'\nimport type {EditorSelection} from '..'\n\n// Is the editor currently receiving remote changes that are being applied to the content?\nexport const IS_PROCESSING_REMOTE_CHANGES: WeakMap<Editor, boolean> =\n  new WeakMap()\n\n// Is the editor dragging something?\nexport const IS_DRAGGING: WeakMap<Editor, boolean> = new WeakMap()\n// Is the editor dragging a element?\nexport const IS_DRAGGING_BLOCK_ELEMENT: WeakMap<Editor, Element> = new WeakMap()\n\n// When dragging elements, this will be the target element\nexport const IS_DRAGGING_ELEMENT_TARGET: WeakMap<Editor, Element> =\n  new WeakMap()\n// Target position for dragging over a block\nexport const IS_DRAGGING_BLOCK_TARGET_POSITION: WeakMap<\n  Editor,\n  'top' | 'bottom'\n> = new WeakMap()\n\nexport const KEY_TO_SLATE_ELEMENT: WeakMap<Editor, any | undefined> =\n  new WeakMap()\nexport const KEY_TO_VALUE_ELEMENT: WeakMap<Editor, any | undefined> =\n  new WeakMap()\n\n// Keep object relation to slate range in the portable-text-range\nexport const SLATE_TO_PORTABLE_TEXT_RANGE = new WeakMap<\n  Range,\n  EditorSelection\n>()\n","import type {PortableTextBlock, PortableTextChild} from '@sanity/types'\nimport type {JSX} from 'react'\n\ntype Props = {\n  value: PortableTextBlock | PortableTextChild\n}\n\nconst DefaultObject = (props: Props): JSX.Element => {\n  return (\n    <div>\n      <pre>{JSON.stringify(props.value, null, 2)}</pre>\n    </div>\n  )\n}\n\nDefaultObject.displayName = 'DefaultObject'\n\nexport default DefaultObject\n","import {styled} from 'styled-components'\n\nexport const DefaultBlockObject = styled.div<{selected: boolean}>`\n  user-select: none;\n  border: ${(props) => {\n    if (props.selected) {\n      return '1px solid blue'\n    }\n    return '1px solid transparent'\n  }};\n`\n\nexport const DefaultInlineObject = styled.span<{selected: boolean}>`\n  background: #999;\n  border: ${(props) => {\n    if (props.selected) {\n      return '1px solid blue'\n    }\n    return '1px solid transparent'\n  }};\n`\n\ntype ListItemProps = {listLevel: number; listStyle: string}\n\nexport const DefaultListItem = styled.div<ListItemProps>`\n  &.pt-list-item {\n    width: fit-content;\n    position: relative;\n    display: block;\n\n    /* Important 'transform' in order to force refresh the ::before and ::after rules\n      in Webkit: https://stackoverflow.com/a/21947628/831480\n    */\n    transform: translateZ(0);\n    margin-left: ${(props: ListItemProps) => getLeftPositionForListLevel(props.listLevel)};\n  }\n  &.pt-list-item > .pt-list-item-inner {\n    display: flex;\n    margin: 0;\n    padding: 0;\n    &:before {\n      justify-content: flex-start;\n      vertical-align: top;\n    }\n  }\n  &.pt-list-item-bullet > .pt-list-item-inner:before {\n      content: '${(props: ListItemProps) =>\n        getContentForListLevelAndStyle(props.listLevel, props.listStyle)}';\n      font-size: 0.4375rem; /* 7px */\n      line-height: 1.5rem; /* Same as body text */\n      /* Optical alignment */\n      position: relative;\n    }\n  }\n  &.pt-list-item-bullet > .pt-list-item-inner {\n    &:before {\n      min-width: 1.5rem; /* Make sure space between bullet and text never shrinks */\n    }\n  }\n  &.pt-list-item-number {\n    counter-increment: ${(props: {listLevel: number}) =>\n      getCounterIncrementForListLevel(props.listLevel)};\n    counter-reset: ${(props: {listLevel: number}) => getCounterResetForListLevel(props.listLevel)};\n  }\n  & + :not(.pt-list-item-number) {\n    counter-reset: listItemNumber;\n  }\n  &.pt-list-item-number > .pt-list-item-inner:before {\n    content: ${(props) => getCounterContentForListLevel(props.listLevel)};\n    min-width: 1.5rem; /* Make sure space between number and text never shrinks */\n    /* Optical alignment */\n    position: relative;\n    top: 1px;\n  }\n`\n\nexport const DefaultListItemInner = styled.div``\n\nfunction getLeftPositionForListLevel(level: number) {\n  switch (Number(level)) {\n    case 1:\n      return '1.5em'\n    case 2:\n      return '3em'\n    case 3:\n      return '4.5em'\n    case 4:\n      return '6em'\n    case 5:\n      return '7.5em'\n    case 6:\n      return '9em'\n    case 7:\n      return '10.5em'\n    case 8:\n      return '12em'\n    case 9:\n      return '13.5em'\n    case 10:\n      return '15em'\n    default:\n      return '0em'\n  }\n}\n\nconst bullets = ['●', '○', '■']\n\nfunction getContentForListLevelAndStyle(level: number, style: string) {\n  const normalizedLevel = (level - 1) % 3\n  if (style === 'bullet') {\n    return bullets[normalizedLevel]\n  }\n  return '*'\n}\n\nfunction getCounterIncrementForListLevel(level: number) {\n  switch (level) {\n    case 1:\n      return 'listItemNumber'\n    case 2:\n      return 'listItemAlpha'\n    case 3:\n      return 'listItemRoman'\n    case 4:\n      return 'listItemNumberNext'\n    case 5:\n      return 'listItemLetterNext'\n    case 6:\n      return 'listItemRomanNext'\n    case 7:\n      return 'listItemNumberNextNext'\n    case 8:\n      return 'listItemAlphaNextNext'\n    case 9:\n      return 'listItemRomanNextNext'\n    default:\n      return 'listItemNumberNextNextNext'\n  }\n}\n\nfunction getCounterResetForListLevel(level: number) {\n  switch (level) {\n    case 1:\n      return 'listItemAlpha'\n    case 2:\n      return 'listItemRoman'\n    case 3:\n      return 'listItemNumberNext'\n    case 4:\n      return 'listItemLetterNext'\n    case 5:\n      return 'listItemRomanNext'\n    case 6:\n      return 'listItemNumberNextNext'\n    case 7:\n      return 'listItemAlphaNextNext'\n    case 8:\n      return 'listItemRomanNextNext'\n    case 9:\n      return 'listItemNumberNextNextNext'\n    default:\n      return 'listItemNumberNextNextNext'\n  }\n}\n\nfunction getCounterContentForListLevel(level: number) {\n  switch (level) {\n    case 1:\n      return `counter(listItemNumber) '. '`\n    case 2:\n      return `counter(listItemAlpha, lower-alpha) '. '`\n    case 3:\n      return `counter(listItemRoman, lower-roman) '. '`\n    case 4:\n      return `counter(listItemNumberNext) '. '`\n    case 5:\n      return `counter(listItemLetterNext, lower-alpha) '. '`\n    case 6:\n      return `counter(listItemRomanNext, lower-roman) '. '`\n    case 7:\n      return `counter(listItemNumberNextNext) '. '`\n    case 8:\n      return `counter(listItemAlphaNextNext, lower-alpha) '. '`\n    case 9:\n      return `counter(listItemRomanNextNext, lower-roman) '. '`\n    default:\n      return `counter(listItemNumberNextNextNext) '. '`\n  }\n}\n","import {\n  useCallback,\n  useEffect,\n  useMemo,\n  useRef,\n  useState,\n  type DragEvent,\n  type MutableRefObject,\n  type ReactNode,\n} from 'react'\nimport {Editor, Path, Transforms, type Element as SlateElement} from 'slate'\nimport {ReactEditor, useSlateStatic} from 'slate-react'\nimport {debugWithName} from '../../utils/debug'\nimport {\n  IS_DRAGGING,\n  IS_DRAGGING_BLOCK_ELEMENT,\n  IS_DRAGGING_BLOCK_TARGET_POSITION,\n  IS_DRAGGING_ELEMENT_TARGET,\n} from '../../utils/weakMaps'\n\nconst debug = debugWithName('components:DraggableBlock')\nconst debugRenders = false\n\n/**\n * @internal\n */\nexport interface DraggableBlockProps {\n  children: ReactNode\n  element: SlateElement\n  readOnly: boolean\n  blockRef: MutableRefObject<HTMLDivElement | null>\n}\n\n/**\n * Implements drag and drop functionality on editor block nodes\n * @internal\n */\nexport const DraggableBlock = ({\n  children,\n  element,\n  readOnly,\n  blockRef,\n}: DraggableBlockProps) => {\n  const editor = useSlateStatic()\n  const dragGhostRef = useRef<HTMLElement>(undefined)\n  const [isDragOver, setIsDragOver] = useState(false)\n  const isVoid = useMemo(\n    () => Editor.isVoid(editor, element),\n    [editor, element],\n  )\n  const isInline = useMemo(\n    () => Editor.isInline(editor, element),\n    [editor, element],\n  )\n\n  const [blockElement, setBlockElement] = useState<HTMLElement | null>(null)\n\n  useEffect(\n    () =>\n      setBlockElement(\n        blockRef ? blockRef.current : ReactEditor.toDOMNode(editor, element),\n      ),\n    [editor, element, blockRef],\n  )\n\n  // Note: this is called not for the dragging block, but for the targets when the block is dragged over them\n  const handleDragOver = useCallback(\n    (event: DragEvent) => {\n      const isMyDragOver = IS_DRAGGING_BLOCK_ELEMENT.get(editor)\n      // debug('Drag over', blockElement)\n      if (!isMyDragOver || !blockElement) {\n        return\n      }\n      event.preventDefault()\n      event.dataTransfer.dropEffect = 'move'\n      IS_DRAGGING_ELEMENT_TARGET.set(editor, element)\n      const elementRect = blockElement.getBoundingClientRect()\n      const offset = elementRect.top\n      const height = elementRect.height\n      const Y = event.pageY\n      const loc = Math.abs(offset - Y)\n      let position: 'top' | 'bottom' = 'bottom'\n      if (element === editor.children[0]) {\n        position = 'top'\n      } else if (loc < height / 2) {\n        position = 'top'\n        IS_DRAGGING_BLOCK_TARGET_POSITION.set(editor, position)\n      } else {\n        position = 'bottom'\n        IS_DRAGGING_BLOCK_TARGET_POSITION.set(editor, position)\n      }\n      if (isMyDragOver === element) {\n        event.dataTransfer.dropEffect = 'none'\n        return\n      }\n      setIsDragOver(true)\n    },\n    [blockElement, editor, element],\n  )\n\n  // Note: this is called not for the dragging block, but for the targets when the block is dragged over them\n  const handleDragLeave = useCallback(() => {\n    setIsDragOver(false)\n  }, [])\n\n  // Note: this is called for the dragging block\n  const handleDragEnd = useCallback(\n    (event: DragEvent) => {\n      const targetBlock = IS_DRAGGING_ELEMENT_TARGET.get(editor)\n      if (targetBlock) {\n        IS_DRAGGING.set(editor, false)\n        event.preventDefault()\n        event.stopPropagation()\n        IS_DRAGGING_ELEMENT_TARGET.delete(editor)\n        if (dragGhostRef.current) {\n          debug('Removing drag ghost')\n          document.body.removeChild(dragGhostRef.current)\n        }\n        const dragPosition = IS_DRAGGING_BLOCK_TARGET_POSITION.get(editor)\n        IS_DRAGGING_BLOCK_TARGET_POSITION.delete(editor)\n        let targetPath = ReactEditor.findPath(editor, targetBlock)\n        const myPath = ReactEditor.findPath(editor, element)\n        const isBefore = Path.isBefore(myPath, targetPath)\n        if (dragPosition === 'bottom' && !isBefore) {\n          // If it is already at the bottom, don't do anything.\n          if (targetPath[0] >= editor.children.length - 1) {\n            debug('target is already at the bottom, not moving')\n            return\n          }\n          const originalPath = targetPath\n          targetPath = Path.next(targetPath)\n          debug(\n            `Adjusting targetPath from ${JSON.stringify(originalPath)} to ${JSON.stringify(\n              targetPath,\n            )}`,\n          )\n        }\n        if (\n          dragPosition === 'top' &&\n          isBefore &&\n          targetPath[0] !== editor.children.length - 1\n        ) {\n          const originalPath = targetPath\n          targetPath = Path.previous(targetPath)\n          debug(\n            `Adjusting targetPath from ${JSON.stringify(originalPath)} to ${JSON.stringify(\n              targetPath,\n            )}`,\n          )\n        }\n        if (Path.equals(targetPath, myPath)) {\n          event.preventDefault()\n          debug('targetPath and myPath is the same, not moving')\n          return\n        }\n        debug(\n          `Moving element ${element._key} from path ${JSON.stringify(myPath)} to ${JSON.stringify(\n            targetPath,\n          )} (${dragPosition})`,\n        )\n        Transforms.moveNodes(editor, {at: myPath, to: targetPath})\n        editor.onChange()\n        return\n      }\n      debug('No target element, not doing anything')\n    },\n    [editor, element],\n  )\n  // Note: this is called not for the dragging block, but for the drop target\n  const handleDrop = useCallback(\n    (event: DragEvent) => {\n      if (IS_DRAGGING_BLOCK_ELEMENT.get(editor)) {\n        debug('On drop (prevented)', element)\n        event.preventDefault()\n        event.stopPropagation()\n        setIsDragOver(false)\n      }\n    },\n    [editor, element],\n  )\n  // Note: this is called for the dragging block\n  const handleDrag = useCallback(\n    (event: DragEvent) => {\n      if (!isVoid) {\n        IS_DRAGGING_BLOCK_ELEMENT.delete(editor)\n        return\n      }\n      IS_DRAGGING.set(editor, true)\n      IS_DRAGGING_BLOCK_ELEMENT.set(editor, element)\n      event.stopPropagation() // Stop propagation so that leafs don't get this and take focus/selection!\n\n      const target = event.target\n\n      if (target instanceof HTMLElement) {\n        target.style.opacity = '1'\n      }\n    },\n    [editor, element, isVoid],\n  )\n\n  // Note: this is called for the dragging block\n  const handleDragStart = useCallback(\n    (event: DragEvent) => {\n      if (!isVoid || isInline) {\n        debug('Not dragging block')\n        IS_DRAGGING_BLOCK_ELEMENT.delete(editor)\n        IS_DRAGGING.set(editor, false)\n        return\n      }\n      debug('Drag start')\n      IS_DRAGGING.set(editor, true)\n      if (event.dataTransfer) {\n        event.dataTransfer.setData('application/portable-text', 'something')\n        event.dataTransfer.effectAllowed = 'move'\n      }\n      // Clone blockElement so that it will not be visually clipped by scroll-containers etc.\n      // The application that uses the portable-text-editor may indicate the element used as\n      // drag ghost by adding a truthy data attribute 'data-pt-drag-ghost-element' to a HTML element.\n      if (blockElement && blockElement instanceof HTMLElement) {\n        let dragGhost = blockElement.cloneNode(true) as HTMLElement\n        const customGhost = dragGhost.querySelector(\n          '[data-pt-drag-ghost-element]',\n        )\n        if (customGhost) {\n          dragGhost = customGhost as HTMLElement\n        }\n\n        // Set the `data-dragged` attribute so the consumer can style the element while it’s dragged\n        dragGhost.setAttribute('data-dragged', '')\n\n        if (document.body) {\n          dragGhostRef.current = dragGhost\n          dragGhost.style.position = 'absolute'\n          dragGhost.style.left = '-99999px'\n          dragGhost.style.boxSizing = 'border-box'\n          document.body.appendChild(dragGhost)\n          const rect = blockElement.getBoundingClientRect()\n          const x = event.clientX - rect.left\n          const y = event.clientY - rect.top\n          dragGhost.style.width = `${rect.width}px`\n          dragGhost.style.height = `${rect.height}px`\n          event.dataTransfer.setDragImage(dragGhost, x, y)\n        }\n      }\n      handleDrag(event)\n    },\n    [blockElement, editor, handleDrag, isInline, isVoid],\n  )\n\n  const isDraggingOverFirstBlock =\n    isDragOver && editor.children[0] === IS_DRAGGING_ELEMENT_TARGET.get(editor)\n  const isDraggingOverLastBlock =\n    isDragOver &&\n    editor.children[editor.children.length - 1] ===\n      IS_DRAGGING_ELEMENT_TARGET.get(editor)\n  const dragPosition = IS_DRAGGING_BLOCK_TARGET_POSITION.get(editor)\n\n  const isDraggingOverTop =\n    isDraggingOverFirstBlock ||\n    (isDragOver &&\n      !isDraggingOverFirstBlock &&\n      !isDraggingOverLastBlock &&\n      dragPosition === 'top')\n  const isDraggingOverBottom =\n    isDraggingOverLastBlock ||\n    (isDragOver &&\n      !isDraggingOverFirstBlock &&\n      !isDraggingOverLastBlock &&\n      dragPosition === 'bottom')\n\n  const dropIndicator = useMemo(\n    () => (\n      <div\n        className=\"pt-drop-indicator\"\n        style={{\n          position: 'absolute',\n          width: '100%',\n          height: 1,\n          borderBottom: '1px solid currentColor',\n          zIndex: 5,\n        }}\n      />\n    ),\n    [],\n  )\n\n  if (readOnly) {\n    return <>{children}</>\n  }\n\n  if (debugRenders) {\n    debug('render')\n  }\n\n  return (\n    <div\n      draggable={isVoid}\n      onDragStart={handleDragStart}\n      onDrag={handleDrag}\n      onDragOver={handleDragOver}\n      onDragLeave={handleDragLeave}\n      onDragEnd={handleDragEnd}\n      onDrop={handleDrop}\n    >\n      {isDraggingOverTop && dropIndicator}\n      {children}\n      {isDraggingOverBottom && dropIndicator}\n    </div>\n  )\n}\n\nDraggableBlock.displayName = 'DraggableBlock'\n","import type {\n  Path,\n  PortableTextChild,\n  PortableTextObject,\n  PortableTextTextBlock,\n} from '@sanity/types'\nimport {\n  useMemo,\n  useRef,\n  type FunctionComponent,\n  type JSX,\n  type ReactElement,\n} from 'react'\nimport {Editor, Range, Element as SlateElement} from 'slate'\nimport {\n  ReactEditor,\n  useSelected,\n  useSlateStatic,\n  type RenderElementProps,\n} from 'slate-react'\nimport type {\n  BlockRenderProps,\n  PortableTextMemberSchemaTypes,\n  RenderBlockFunction,\n  RenderChildFunction,\n  RenderListItemFunction,\n  RenderStyleFunction,\n} from '../../types/editor'\nimport {debugWithName} from '../../utils/debug'\nimport {fromSlateValue} from '../../utils/values'\nimport {KEY_TO_VALUE_ELEMENT} from '../../utils/weakMaps'\nimport ObjectNode from '../nodes/DefaultObject'\nimport {\n  DefaultBlockObject,\n  DefaultListItem,\n  DefaultListItemInner,\n} from '../nodes/index'\nimport {DraggableBlock} from './DraggableBlock'\n\nconst debug = debugWithName('components:Element')\nconst debugRenders = false\nconst EMPTY_ANNOTATIONS: PortableTextObject[] = []\n\n/**\n * @internal\n */\nexport interface ElementProps {\n  attributes: RenderElementProps['attributes']\n  children: ReactElement<any>\n  element: SlateElement\n  schemaTypes: PortableTextMemberSchemaTypes\n  readOnly: boolean\n  renderBlock?: RenderBlockFunction\n  renderChild?: RenderChildFunction\n  renderListItem?: RenderListItemFunction\n  renderStyle?: RenderStyleFunction\n  spellCheck?: boolean\n}\n\nconst inlineBlockStyle = {display: 'inline-block'}\n\n/**\n * Renders Portable Text block and inline object nodes in Slate\n * @internal\n */\nexport const Element: FunctionComponent<ElementProps> = ({\n  attributes,\n  children,\n  element,\n  schemaTypes,\n  readOnly,\n  renderBlock,\n  renderChild,\n  renderListItem,\n  renderStyle,\n  spellCheck,\n}) => {\n  const editor = useSlateStatic()\n  const selected = useSelected()\n  const blockRef = useRef<HTMLDivElement | null>(null)\n  const inlineBlockObjectRef = useRef(null)\n  const focused =\n    (selected && editor.selection && Range.isCollapsed(editor.selection)) ||\n    false\n\n  const value = useMemo(\n    () =>\n      fromSlateValue(\n        [element],\n        schemaTypes.block.name,\n        KEY_TO_VALUE_ELEMENT.get(editor),\n      )[0],\n    [editor, element, schemaTypes.block.name],\n  )\n\n  let renderedBlock = children\n\n  let className: string | undefined\n\n  const blockPath: Path = useMemo(() => [{_key: element._key}], [element])\n\n  if (typeof element._type !== 'string') {\n    throw new Error(`Expected element to have a _type property`)\n  }\n\n  if (typeof element._key !== 'string') {\n    throw new Error(`Expected element to have a _key property`)\n  }\n\n  // Test for inline objects first\n  if (editor.isInline(element)) {\n    const path = ReactEditor.findPath(editor, element)\n    const [block] = Editor.node(editor, path, {depth: 1})\n    const schemaType = schemaTypes.inlineObjects.find(\n      (_type) => _type.name === element._type,\n    )\n    if (!schemaType) {\n      throw new Error('Could not find type for inline block element')\n    }\n    if (SlateElement.isElement(block)) {\n      const elmPath: Path = [\n        {_key: block._key},\n        'children',\n        {_key: element._key},\n      ]\n      if (debugRenders) {\n        debug(`Render ${element._key} (inline object)`)\n      }\n      return (\n        <span {...attributes}>\n          {/* Note that children must follow immediately or cut and selections will not work properly in Chrome. */}\n          {children}\n          <span\n            draggable={!readOnly}\n            className=\"pt-inline-object\"\n            data-testid=\"pt-inline-object\"\n            ref={inlineBlockObjectRef}\n            key={element._key}\n            style={inlineBlockStyle}\n            contentEditable={false}\n          >\n            {renderChild &&\n              renderChild({\n                annotations: EMPTY_ANNOTATIONS, // These inline objects currently doesn't support annotations. This is a limitation of the current PT spec/model.\n                children: <ObjectNode value={value} />,\n                editorElementRef: inlineBlockObjectRef,\n                focused,\n                path: elmPath,\n                schemaType,\n                selected,\n                type: schemaType,\n                value: value as PortableTextChild,\n              })}\n            {!renderChild && <ObjectNode value={value} />}\n          </span>\n        </span>\n      )\n    }\n    throw new Error('Block not found!')\n  }\n\n  // If not inline, it's either a block (text) or a block object (non-text)\n  // NOTE: text blocks aren't draggable with DraggableBlock (yet?)\n  if (element._type === schemaTypes.block.name) {\n    className = `pt-block pt-text-block`\n    const isListItem = 'listItem' in element\n    if (debugRenders) {\n      debug(`Render ${element._key} (text block)`)\n    }\n    const style = ('style' in element && element.style) || 'normal'\n    className = `pt-block pt-text-block pt-text-block-style-${style}`\n    const blockStyleType = schemaTypes.styles.find(\n      (item) => item.value === style,\n    )\n    if (renderStyle && blockStyleType) {\n      renderedBlock = renderStyle({\n        block: element as PortableTextTextBlock,\n        children,\n        focused,\n        selected,\n        value: style,\n        path: blockPath,\n        schemaType: blockStyleType,\n        editorElementRef: blockRef,\n      })\n    }\n    let level: number | undefined\n    if (isListItem) {\n      if (typeof element.level === 'number') {\n        level = element.level\n      }\n      className += ` pt-list-item pt-list-item-${element.listItem} pt-list-item-level-${level || 1}`\n    }\n    if (editor.isListBlock(value) && isListItem && element.listItem) {\n      const listType = schemaTypes.lists.find(\n        (item) => item.value === element.listItem,\n      )\n      if (renderListItem && listType) {\n        renderedBlock = renderListItem({\n          block: value,\n          children: renderedBlock,\n          focused,\n          selected,\n          value: element.listItem,\n          path: blockPath,\n          schemaType: listType,\n          level: value.level || 1,\n          editorElementRef: blockRef,\n        })\n      } else {\n        renderedBlock = (\n          <DefaultListItem\n            listStyle={value.listItem || schemaTypes.lists[0].value}\n            listLevel={value.level || 1}\n          >\n            <DefaultListItemInner>{renderedBlock}</DefaultListItemInner>\n          </DefaultListItem>\n        )\n      }\n    }\n    const renderProps: Omit<BlockRenderProps, 'type'> = Object.defineProperty(\n      {\n        children: renderedBlock,\n        editorElementRef: blockRef,\n        focused,\n        level,\n        listItem: isListItem ? element.listItem : undefined,\n        path: blockPath,\n        selected,\n        style,\n        schemaType: schemaTypes.block,\n        value,\n      },\n      'type',\n      {\n        enumerable: false,\n        get() {\n          console.warn(\n            \"Property 'type' is deprecated, use 'schemaType' instead.\",\n          )\n          return schemaTypes.block\n        },\n      },\n    )\n\n    const propsOrDefaultRendered = renderBlock\n      ? renderBlock(renderProps as BlockRenderProps)\n      : children\n    return (\n      <div\n        key={element._key}\n        {...attributes}\n        className={className}\n        spellCheck={spellCheck}\n      >\n        <DraggableBlock\n          element={element}\n          readOnly={readOnly}\n          blockRef={blockRef}\n        >\n          <div ref={blockRef}>{propsOrDefaultRendered}</div>\n        </DraggableBlock>\n      </div>\n    )\n  }\n  const schemaType = schemaTypes.blockObjects.find(\n    (_type) => _type.name === element._type,\n  )\n  if (!schemaType) {\n    throw new Error(\n      `Could not find schema type for block element of _type ${element._type}`,\n    )\n  }\n  if (debugRenders) {\n    debug(`Render ${element._key} (object block)`)\n  }\n  className = 'pt-block pt-object-block'\n  const block = fromSlateValue(\n    [element],\n    schemaTypes.block.name,\n    KEY_TO_VALUE_ELEMENT.get(editor),\n  )[0]\n  let renderedBlockFromProps: JSX.Element | undefined\n  if (renderBlock) {\n    const _props: Omit<BlockRenderProps, 'type'> = Object.defineProperty(\n      {\n        children: <ObjectNode value={value} />,\n        editorElementRef: blockRef,\n        focused,\n        path: blockPath,\n        schemaType,\n        selected,\n        value: block,\n      },\n      'type',\n      {\n        enumerable: false,\n        get() {\n          console.warn(\n            \"Property 'type' is deprecated, use 'schemaType' instead.\",\n          )\n          return schemaType\n        },\n      },\n    )\n    renderedBlockFromProps = renderBlock(_props as BlockRenderProps)\n  }\n  return (\n    <div key={element._key} {...attributes} className={className}>\n      {children}\n      <DraggableBlock element={element} readOnly={readOnly} blockRef={blockRef}>\n        {renderedBlockFromProps && (\n          <div ref={blockRef} contentEditable={false}>\n            {renderedBlockFromProps}\n          </div>\n        )}\n        {!renderedBlockFromProps && (\n          <DefaultBlockObject selected={selected}>\n            <ObjectNode value={value} />\n          </DefaultBlockObject>\n        )}\n      </DraggableBlock>\n    </div>\n  )\n}\n\nElement.displayName = 'Element'\n","import {createContext, useContext} from 'react'\nimport type {PortableTextEditor} from '../PortableTextEditor'\n\n/**\n * A React context for sharing the editor object.\n */\nexport const PortableTextEditorContext =\n  createContext<PortableTextEditor | null>(null)\n\n/**\n * @deprecated Use `useEditor` to get the current editor instance.\n * @public\n * Get the current editor object from the React context.\n */\nexport const usePortableTextEditor = (): PortableTextEditor => {\n  const editor = useContext(PortableTextEditorContext)\n\n  if (!editor) {\n    throw new Error(\n      `The \\`usePortableTextEditor\\` hook must be used inside the <PortableTextEditor> component's context.`,\n    )\n  }\n\n  return editor\n}\n","import type {PortableTextObject} from '@sanity/types'\nimport {useCallback, type ReactNode} from 'react'\n\ntype Props = {\n  annotation: PortableTextObject\n  children: ReactNode\n}\nexport function DefaultAnnotation(props: Props) {\n  const handleClick = useCallback(\n    () => alert(JSON.stringify(props.annotation)),\n    [props.annotation],\n  )\n  return (\n    <span style={{color: 'blue'}} onClick={handleClick}>\n      {props.children}\n    </span>\n  )\n}\n\nDefaultAnnotation.displayName = 'DefaultAnnotation'\n","import {Schema} from '@sanity/schema'\n\nexport function compileType(rawType: any) {\n  return Schema.compile({\n    name: 'blockTypeSchema',\n    types: [rawType],\n  }).get(rawType.name)\n}\n","import type {Patch} from '@portabletext/patches'\nimport type {PortableTextBlock} from '@sanity/types'\nimport {Editor} from 'slate'\nimport {assign, emit, setup} from 'xstate'\nimport type {PortableTextSlateEditor} from '../types/editor'\nimport {fromSlateValue} from '../utils/values'\nimport {KEY_TO_VALUE_ELEMENT} from '../utils/weakMaps'\nimport type {EditorSchema} from './define-schema'\n\nconst FLUSH_PATCHES_THROTTLED_MS = process.env.NODE_ENV === 'test' ? 500 : 1000\n\n/**\n * Makes sure editor mutation events are debounced\n */\nexport const mutationMachine = setup({\n  types: {\n    context: {} as {\n      pendingPatches: Array<Patch>\n      schema: EditorSchema\n      slateEditor: PortableTextSlateEditor\n    },\n    events: {} as {type: 'patch'; patch: Patch},\n    input: {} as {\n      schema: EditorSchema\n      slateEditor: PortableTextSlateEditor\n    },\n    emitted: {} as\n      | {\n          type: 'has pending patches'\n        }\n      | {\n          type: 'mutation'\n          patches: Array<Patch>\n          snapshot: Array<PortableTextBlock> | undefined\n        },\n  },\n  actions: {\n    'emit has pending patches': emit({type: 'has pending patches'}),\n    'emit mutation': emit(({context}) => ({\n      type: 'mutation' as const,\n      patches: context.pendingPatches,\n      snapshot: fromSlateValue(\n        context.slateEditor.children,\n        context.schema.block.name,\n        KEY_TO_VALUE_ELEMENT.get(context.slateEditor),\n      ),\n    })),\n    'clear pending patches': assign({\n      pendingPatches: [],\n    }),\n    'defer patch': assign({\n      pendingPatches: ({context, event}) => [\n        ...context.pendingPatches,\n        event.patch,\n      ],\n    }),\n  },\n  guards: {\n    'slate is normalizing': ({context}) =>\n      Editor.isNormalizing(context.slateEditor),\n  },\n}).createMachine({\n  id: 'mutation',\n  context: ({input}) => ({\n    pendingPatches: [],\n    schema: input.schema,\n    slateEditor: input.slateEditor,\n  }),\n  initial: 'idle',\n  states: {\n    'idle': {\n      on: {\n        patch: {\n          actions: ['defer patch', 'emit has pending patches'],\n          target: 'has pending patches',\n        },\n      },\n    },\n    'has pending patches': {\n      after: {\n        [FLUSH_PATCHES_THROTTLED_MS]: [\n          {\n            guard: 'slate is normalizing',\n            target: 'idle',\n            actions: ['emit mutation', 'clear pending patches'],\n          },\n          {\n            reenter: true,\n          },\n        ],\n      },\n      on: {\n        patch: {\n          actions: ['defer patch'],\n          reenter: true,\n        },\n      },\n    },\n  },\n})\n","import {insert, set, setIfMissing, unset} from '@portabletext/patches'\nimport {\n  isPortableTextTextBlock,\n  type PortableTextBlock,\n  type PortableTextSpan,\n  type PortableTextTextBlock,\n} from '@sanity/types'\nimport {flatten, isPlainObject, uniq} from 'lodash'\nimport type {\n  InvalidValueResolution,\n  PortableTextMemberSchemaTypes,\n} from '../types/editor'\n\nexport interface Validation {\n  valid: boolean\n  resolution: InvalidValueResolution | null\n  value: PortableTextBlock[] | undefined\n}\n\nexport function validateValue(\n  value: PortableTextBlock[] | undefined,\n  types: PortableTextMemberSchemaTypes,\n  keyGenerator: () => string,\n): Validation {\n  let resolution: InvalidValueResolution | null = null\n  let valid = true\n  const validChildTypes = [\n    types.span.name,\n    ...types.inlineObjects.map((t) => t.name),\n  ]\n  const validBlockTypes = [\n    types.block.name,\n    ...types.blockObjects.map((t) => t.name),\n  ]\n\n  // Undefined is allowed\n  if (value === undefined) {\n    return {valid: true, resolution: null, value}\n  }\n  // Only lengthy arrays are allowed in the editor.\n  if (!Array.isArray(value) || value.length === 0) {\n    return {\n      valid: false,\n      resolution: {\n        patches: [unset([])],\n        description:\n          'Editor value must be an array of Portable Text blocks, or undefined.',\n        action: 'Unset the value',\n        item: value,\n\n        i18n: {\n          description:\n            'inputs.portable-text.invalid-value.not-an-array.description',\n          action: 'inputs.portable-text.invalid-value.not-an-array.action',\n        },\n      },\n      value,\n    }\n  }\n  if (\n    value.some((blk: PortableTextBlock, index: number): boolean => {\n      // Is the block an object?\n      if (!isPlainObject(blk)) {\n        resolution = {\n          patches: [unset([index])],\n          description: `Block must be an object, got ${String(blk)}`,\n          action: `Unset invalid item`,\n          item: blk,\n\n          i18n: {\n            description:\n              'inputs.portable-text.invalid-value.not-an-object.description',\n            action: 'inputs.portable-text.invalid-value.not-an-object.action',\n            values: {index},\n          },\n        }\n        return true\n      }\n      // Test that every block has a _key prop\n      if (!blk._key || typeof blk._key !== 'string') {\n        resolution = {\n          patches: [set({...blk, _key: keyGenerator()}, [index])],\n          description: `Block at index ${index} is missing required _key.`,\n          action: 'Set the block with a random _key value',\n          item: blk,\n\n          i18n: {\n            description:\n              'inputs.portable-text.invalid-value.missing-key.description',\n            action: 'inputs.portable-text.invalid-value.missing-key.action',\n            values: {index},\n          },\n        }\n        return true\n      }\n      // Test that every block has valid _type\n      if (!blk._type || !validBlockTypes.includes(blk._type)) {\n        // Special case where block type is set to default 'block', but the block type is named something else according to the schema.\n        if (blk._type === 'block') {\n          const currentBlockTypeName = types.block.name\n          resolution = {\n            patches: [\n              set({...blk, _type: currentBlockTypeName}, [{_key: blk._key}]),\n            ],\n            description: `Block with _key '${blk._key}' has invalid type name '${blk._type}'. According to the schema, the block type name is '${currentBlockTypeName}'`,\n            action: `Use type '${currentBlockTypeName}'`,\n            item: blk,\n\n            i18n: {\n              description:\n                'inputs.portable-text.invalid-value.incorrect-block-type.description',\n              action:\n                'inputs.portable-text.invalid-value.incorrect-block-type.action',\n              values: {key: blk._key, expectedTypeName: currentBlockTypeName},\n            },\n          }\n          return true\n        }\n\n        // If the block has no `_type`, but aside from that is a valid Portable Text block\n        if (\n          !blk._type &&\n          isPortableTextTextBlock({...blk, _type: types.block.name})\n        ) {\n          resolution = {\n            patches: [\n              set({...blk, _type: types.block.name}, [{_key: blk._key}]),\n            ],\n            description: `Block with _key '${blk._key}' is missing a type name. According to the schema, the block type name is '${types.block.name}'`,\n            action: `Use type '${types.block.name}'`,\n            item: blk,\n\n            i18n: {\n              description:\n                'inputs.portable-text.invalid-value.missing-block-type.description',\n              action:\n                'inputs.portable-text.invalid-value.missing-block-type.action',\n              values: {key: blk._key, expectedTypeName: types.block.name},\n            },\n          }\n          return true\n        }\n\n        if (!blk._type) {\n          resolution = {\n            patches: [unset([{_key: blk._key}])],\n            description: `Block with _key '${blk._key}' is missing an _type property`,\n            action: 'Remove the block',\n            item: blk,\n\n            i18n: {\n              description:\n                'inputs.portable-text.invalid-value.missing-type.description',\n              action: 'inputs.portable-text.invalid-value.missing-type.action',\n              values: {key: blk._key},\n            },\n          }\n          return true\n        }\n\n        resolution = {\n          patches: [unset([{_key: blk._key}])],\n          description: `Block with _key '${blk._key}' has invalid _type '${blk._type}'`,\n          action: 'Remove the block',\n          item: blk,\n\n          i18n: {\n            description:\n              'inputs.portable-text.invalid-value.disallowed-type.description',\n            action: 'inputs.portable-text.invalid-value.disallowed-type.action',\n            values: {key: blk._key, typeName: blk._type},\n          },\n        }\n        return true\n      }\n\n      // Test regular text blocks\n      if (blk._type === types.block.name) {\n        const textBlock = blk as PortableTextTextBlock\n        // Test that it has a valid children property (array)\n        if (textBlock.children && !Array.isArray(textBlock.children)) {\n          resolution = {\n            patches: [set({children: []}, [{_key: textBlock._key}])],\n            description: `Text block with _key '${textBlock._key}' has a invalid required property 'children'.`,\n            action: 'Reset the children property',\n            item: textBlock,\n\n            i18n: {\n              description:\n                'inputs.portable-text.invalid-value.missing-or-invalid-children.description',\n              action:\n                'inputs.portable-text.invalid-value.missing-or-invalid-children.action',\n              values: {key: textBlock._key},\n            },\n          }\n          return true\n        }\n        // Test that children is set and lengthy\n        if (\n          textBlock.children === undefined ||\n          (Array.isArray(textBlock.children) && textBlock.children.length === 0)\n        ) {\n          const newSpan = {\n            _type: types.span.name,\n            _key: keyGenerator(),\n            text: '',\n            marks: [],\n          }\n          resolution = {\n            autoResolve: true,\n            patches: [\n              setIfMissing([], [{_key: blk._key}, 'children']),\n              insert([newSpan], 'after', [{_key: blk._key}, 'children', 0]),\n            ],\n            description: `Children for text block with _key '${blk._key}' is empty.`,\n            action: 'Insert an empty text',\n            item: blk,\n\n            i18n: {\n              description:\n                'inputs.portable-text.invalid-value.empty-children.description',\n              action:\n                'inputs.portable-text.invalid-value.empty-children.action',\n              values: {key: blk._key},\n            },\n          }\n          return true\n        }\n\n        const allUsedMarks = uniq(\n          flatten(\n            textBlock.children\n              .filter((cld) => cld._type === types.span.name)\n              .map((cld) => cld.marks || []),\n          ) as string[],\n        )\n\n        // Test that all markDefs are in use (remove orphaned markDefs)\n        if (Array.isArray(blk.markDefs) && blk.markDefs.length > 0) {\n          const unusedMarkDefs: string[] = uniq(\n            blk.markDefs\n              .map((def) => def._key)\n              .filter((key) => !allUsedMarks.includes(key)),\n          )\n          if (unusedMarkDefs.length > 0) {\n            resolution = {\n              autoResolve: true,\n              patches: unusedMarkDefs.map((markDefKey) =>\n                unset([{_key: blk._key}, 'markDefs', {_key: markDefKey}]),\n              ),\n              description: `Block contains orphaned data (unused mark definitions): ${unusedMarkDefs.join(\n                ', ',\n              )}.`,\n              action: 'Remove unused mark definition item',\n              item: blk,\n              i18n: {\n                description:\n                  'inputs.portable-text.invalid-value.orphaned-mark-defs.description',\n                action:\n                  'inputs.portable-text.invalid-value.orphaned-mark-defs.action',\n                values: {\n                  key: blk._key,\n                  unusedMarkDefs: unusedMarkDefs.map((m) => m.toString()),\n                },\n              },\n            }\n            return true\n          }\n        }\n\n        // Test that every annotation mark used has a definition\n        const annotationMarks = allUsedMarks.filter(\n          (mark) => !types.decorators.map((dec) => dec.value).includes(mark),\n        )\n        const orphanedMarks = annotationMarks.filter(\n          (mark) =>\n            textBlock.markDefs === undefined ||\n            !textBlock.markDefs.find((def) => def._key === mark),\n        )\n        if (orphanedMarks.length > 0) {\n          const spanChildren = textBlock.children.filter(\n            (cld) =>\n              cld._type === types.span.name &&\n              Array.isArray(cld.marks) &&\n              cld.marks.some((mark) => orphanedMarks.includes(mark)),\n          ) as PortableTextSpan[]\n          if (spanChildren) {\n            const orphaned = orphanedMarks.join(', ')\n            resolution = {\n              autoResolve: true,\n              patches: spanChildren.map((child) => {\n                return set(\n                  (child.marks || []).filter(\n                    (cMrk) => !orphanedMarks.includes(cMrk),\n                  ),\n                  [{_key: blk._key}, 'children', {_key: child._key}, 'marks'],\n                )\n              }),\n              description: `Block with _key '${blk._key}' contains marks (${orphaned}) not supported by the current content model.`,\n              action: 'Remove invalid marks',\n              item: blk,\n\n              i18n: {\n                description:\n                  'inputs.portable-text.invalid-value.orphaned-marks.description',\n                action:\n                  'inputs.portable-text.invalid-value.orphaned-marks.action',\n                values: {\n                  key: blk._key,\n                  orphanedMarks: orphanedMarks.map((m) => m.toString()),\n                },\n              },\n            }\n            return true\n          }\n        }\n\n        // Test every child\n        if (\n          textBlock.children.some((child, cIndex: number) => {\n            if (!isPlainObject(child)) {\n              resolution = {\n                patches: [unset([{_key: blk._key}, 'children', cIndex])],\n                description: `Child at index '${cIndex}' in block with key '${blk._key}' is not an object.`,\n                action: 'Remove the item',\n                item: blk,\n\n                i18n: {\n                  description:\n                    'inputs.portable-text.invalid-value.non-object-child.description',\n                  action:\n                    'inputs.portable-text.invalid-value.non-object-child.action',\n                  values: {key: blk._key, index: cIndex},\n                },\n              }\n              return true\n            }\n\n            if (!child._key || typeof child._key !== 'string') {\n              const newChild = {...child, _key: keyGenerator()}\n              resolution = {\n                autoResolve: true,\n                patches: [\n                  set(newChild, [{_key: blk._key}, 'children', cIndex]),\n                ],\n                description: `Child at index ${cIndex} is missing required _key in block with _key ${blk._key}.`,\n                action: 'Set a new random _key on the object',\n                item: blk,\n\n                i18n: {\n                  description:\n                    'inputs.portable-text.invalid-value.missing-child-key.description',\n                  action:\n                    'inputs.portable-text.invalid-value.missing-child-key.action',\n                  values: {key: blk._key, index: cIndex},\n                },\n              }\n              return true\n            }\n\n            // Verify that children have valid types\n            if (!child._type) {\n              resolution = {\n                patches: [\n                  unset([{_key: blk._key}, 'children', {_key: child._key}]),\n                ],\n                description: `Child with _key '${child._key}' in block with key '${blk._key}' is missing '_type' property.`,\n                action: 'Remove the object',\n                item: blk,\n\n                i18n: {\n                  description:\n                    'inputs.portable-text.invalid-value.missing-child-type.description',\n                  action:\n                    'inputs.portable-text.invalid-value.missing-child-type.action',\n                  values: {key: blk._key, childKey: child._key},\n                },\n              }\n              return true\n            }\n\n            if (!validChildTypes.includes(child._type)) {\n              resolution = {\n                patches: [\n                  unset([{_key: blk._key}, 'children', {_key: child._key}]),\n                ],\n                description: `Child with _key '${child._key}' in block with key '${blk._key}' has invalid '_type' property (${child._type}).`,\n                action: 'Remove the object',\n                item: blk,\n\n                i18n: {\n                  description:\n                    'inputs.portable-text.invalid-value.disallowed-child-type.description',\n                  action:\n                    'inputs.portable-text.invalid-value.disallowed-child-type.action',\n                  values: {\n                    key: blk._key,\n                    childKey: child._key,\n                    childType: child._type,\n                  },\n                },\n              }\n              return true\n            }\n\n            // Verify that spans have .text property that is a string\n            if (\n              child._type === types.span.name &&\n              typeof child.text !== 'string'\n            ) {\n              resolution = {\n                patches: [\n                  set({...child, text: ''}, [\n                    {_key: blk._key},\n                    'children',\n                    {_key: child._key},\n                  ]),\n                ],\n                description: `Child with _key '${child._key}' in block with key '${blk._key}' has missing or invalid text property!`,\n                action: `Write an empty text property to the object`,\n                item: blk,\n\n                i18n: {\n                  description:\n                    'inputs.portable-text.invalid-value.invalid-span-text.description',\n                  action:\n                    'inputs.portable-text.invalid-value.invalid-span-text.action',\n                  values: {key: blk._key, childKey: child._key},\n                },\n              }\n              return true\n            }\n            return false\n          })\n        ) {\n          valid = false\n        }\n      }\n      return false\n    })\n  ) {\n    valid = false\n  }\n  return {valid, resolution, value}\n}\n","import type {Editor} from 'slate'\nimport {IS_PROCESSING_REMOTE_CHANGES} from './weakMaps'\n\nexport function withRemoteChanges(editor: Editor, fn: () => void): void {\n  const prev = isChangingRemotely(editor) || false\n  IS_PROCESSING_REMOTE_CHANGES.set(editor, true)\n  fn()\n  IS_PROCESSING_REMOTE_CHANGES.set(editor, prev)\n}\n\nexport function isChangingRemotely(editor: Editor): boolean | undefined {\n  return IS_PROCESSING_REMOTE_CHANGES.get(editor)\n}\n","import type {Editor} from 'slate'\n\nexport const PATCHING: WeakMap<Editor, boolean | undefined> = new WeakMap()\n\nexport function withoutPatching(editor: Editor, fn: () => void): void {\n  const prev = isPatching(editor)\n  PATCHING.set(editor, false)\n  fn()\n  PATCHING.set(editor, prev)\n}\n\nexport function isPatching(editor: Editor): boolean | undefined {\n  return PATCHING.get(editor)\n}\n","function cloneDiff(diff2) {\n  const [type, patch] = diff2;\n  return [type, patch];\n}\nfunction getCommonOverlap(textA, textB) {\n  let text1 = textA, text2 = textB;\n  const text1Length = text1.length, text2Length = text2.length;\n  if (text1Length === 0 || text2Length === 0)\n    return 0;\n  text1Length > text2Length ? text1 = text1.substring(text1Length - text2Length) : text1Length < text2Length && (text2 = text2.substring(0, text1Length));\n  const textLength = Math.min(text1Length, text2Length);\n  if (text1 === text2)\n    return textLength;\n  let best = 0, length = 1;\n  for (let found = 0; found !== -1; ) {\n    const pattern = text1.substring(textLength - length);\n    if (found = text2.indexOf(pattern), found === -1)\n      return best;\n    length += found, (found === 0 || text1.substring(textLength - length) === text2.substring(0, length)) && (best = length, length++);\n  }\n  return best;\n}\nfunction getCommonPrefix(text1, text2) {\n  if (!text1 || !text2 || text1[0] !== text2[0])\n    return 0;\n  let pointerMin = 0, pointerMax = Math.min(text1.length, text2.length), pointerMid = pointerMax, pointerStart = 0;\n  for (; pointerMin < pointerMid; )\n    text1.substring(pointerStart, pointerMid) === text2.substring(pointerStart, pointerMid) ? (pointerMin = pointerMid, pointerStart = pointerMin) : pointerMax = pointerMid, pointerMid = Math.floor((pointerMax - pointerMin) / 2 + pointerMin);\n  return pointerMid;\n}\nfunction getCommonSuffix(text1, text2) {\n  if (!text1 || !text2 || text1[text1.length - 1] !== text2[text2.length - 1])\n    return 0;\n  let pointerMin = 0, pointerMax = Math.min(text1.length, text2.length), pointerMid = pointerMax, pointerEnd = 0;\n  for (; pointerMin < pointerMid; )\n    text1.substring(text1.length - pointerMid, text1.length - pointerEnd) === text2.substring(text2.length - pointerMid, text2.length - pointerEnd) ? (pointerMin = pointerMid, pointerEnd = pointerMin) : pointerMax = pointerMid, pointerMid = Math.floor((pointerMax - pointerMin) / 2 + pointerMin);\n  return pointerMid;\n}\nfunction isHighSurrogate(char) {\n  const charCode = char.charCodeAt(0);\n  return charCode >= 55296 && charCode <= 56319;\n}\nfunction isLowSurrogate(char) {\n  const charCode = char.charCodeAt(0);\n  return charCode >= 56320 && charCode <= 57343;\n}\nfunction bisect(text1, text2, deadline) {\n  const text1Length = text1.length, text2Length = text2.length, maxD = Math.ceil((text1Length + text2Length) / 2), vOffset = maxD, vLength = 2 * maxD, v1 = new Array(vLength), v2 = new Array(vLength);\n  for (let x = 0; x < vLength; x++)\n    v1[x] = -1, v2[x] = -1;\n  v1[vOffset + 1] = 0, v2[vOffset + 1] = 0;\n  const delta = text1Length - text2Length, front = delta % 2 !== 0;\n  let k1start = 0, k1end = 0, k2start = 0, k2end = 0;\n  for (let d = 0; d < maxD && !(Date.now() > deadline); d++) {\n    for (let k1 = -d + k1start; k1 <= d - k1end; k1 += 2) {\n      const k1Offset = vOffset + k1;\n      let x1;\n      k1 === -d || k1 !== d && v1[k1Offset - 1] < v1[k1Offset + 1] ? x1 = v1[k1Offset + 1] : x1 = v1[k1Offset - 1] + 1;\n      let y1 = x1 - k1;\n      for (; x1 < text1Length && y1 < text2Length && text1.charAt(x1) === text2.charAt(y1); )\n        x1++, y1++;\n      if (v1[k1Offset] = x1, x1 > text1Length)\n        k1end += 2;\n      else if (y1 > text2Length)\n        k1start += 2;\n      else if (front) {\n        const k2Offset = vOffset + delta - k1;\n        if (k2Offset >= 0 && k2Offset < vLength && v2[k2Offset] !== -1) {\n          const x2 = text1Length - v2[k2Offset];\n          if (x1 >= x2)\n            return bisectSplit(text1, text2, x1, y1, deadline);\n        }\n      }\n    }\n    for (let k2 = -d + k2start; k2 <= d - k2end; k2 += 2) {\n      const k2Offset = vOffset + k2;\n      let x2;\n      k2 === -d || k2 !== d && v2[k2Offset - 1] < v2[k2Offset + 1] ? x2 = v2[k2Offset + 1] : x2 = v2[k2Offset - 1] + 1;\n      let y2 = x2 - k2;\n      for (; x2 < text1Length && y2 < text2Length && text1.charAt(text1Length - x2 - 1) === text2.charAt(text2Length - y2 - 1); )\n        x2++, y2++;\n      if (v2[k2Offset] = x2, x2 > text1Length)\n        k2end += 2;\n      else if (y2 > text2Length)\n        k2start += 2;\n      else if (!front) {\n        const k1Offset = vOffset + delta - k2;\n        if (k1Offset >= 0 && k1Offset < vLength && v1[k1Offset] !== -1) {\n          const x1 = v1[k1Offset], y1 = vOffset + x1 - k1Offset;\n          if (x2 = text1Length - x2, x1 >= x2)\n            return bisectSplit(text1, text2, x1, y1, deadline);\n        }\n      }\n    }\n  }\n  return [\n    [DIFF_DELETE, text1],\n    [DIFF_INSERT, text2]\n  ];\n}\nfunction bisectSplit(text1, text2, x, y, deadline) {\n  const text1a = text1.substring(0, x), text2a = text2.substring(0, y), text1b = text1.substring(x), text2b = text2.substring(y), diffs = doDiff(text1a, text2a, { checkLines: !1, deadline }), diffsb = doDiff(text1b, text2b, { checkLines: !1, deadline });\n  return diffs.concat(diffsb);\n}\nfunction findHalfMatch(text1, text2, timeout = 1) {\n  if (timeout <= 0)\n    return null;\n  const longText = text1.length > text2.length ? text1 : text2, shortText = text1.length > text2.length ? text2 : text1;\n  if (longText.length < 4 || shortText.length * 2 < longText.length)\n    return null;\n  const halfMatch1 = halfMatchI(longText, shortText, Math.ceil(longText.length / 4)), halfMatch2 = halfMatchI(longText, shortText, Math.ceil(longText.length / 2));\n  let halfMatch;\n  if (halfMatch1 && halfMatch2)\n    halfMatch = halfMatch1[4].length > halfMatch2[4].length ? halfMatch1 : halfMatch2;\n  else {\n    if (!halfMatch1 && !halfMatch2)\n      return null;\n    halfMatch2 ? halfMatch1 || (halfMatch = halfMatch2) : halfMatch = halfMatch1;\n  }\n  if (!halfMatch)\n    throw new Error(\"Unable to find a half match.\");\n  let text1A, text1B, text2A, text2B;\n  text1.length > text2.length ? (text1A = halfMatch[0], text1B = halfMatch[1], text2A = halfMatch[2], text2B = halfMatch[3]) : (text2A = halfMatch[0], text2B = halfMatch[1], text1A = halfMatch[2], text1B = halfMatch[3]);\n  const midCommon = halfMatch[4];\n  return [text1A, text1B, text2A, text2B, midCommon];\n}\nfunction halfMatchI(longText, shortText, i) {\n  const seed = longText.slice(i, i + Math.floor(longText.length / 4));\n  let j = -1, bestCommon = \"\", bestLongTextA, bestLongTextB, bestShortTextA, bestShortTextB;\n  for (; (j = shortText.indexOf(seed, j + 1)) !== -1; ) {\n    const prefixLength = getCommonPrefix(longText.slice(i), shortText.slice(j)), suffixLength = getCommonSuffix(longText.slice(0, i), shortText.slice(0, j));\n    bestCommon.length < suffixLength + prefixLength && (bestCommon = shortText.slice(j - suffixLength, j) + shortText.slice(j, j + prefixLength), bestLongTextA = longText.slice(0, i - suffixLength), bestLongTextB = longText.slice(i + prefixLength), bestShortTextA = shortText.slice(0, j - suffixLength), bestShortTextB = shortText.slice(j + prefixLength));\n  }\n  return bestCommon.length * 2 >= longText.length ? [\n    bestLongTextA || \"\",\n    bestLongTextB || \"\",\n    bestShortTextA || \"\",\n    bestShortTextB || \"\",\n    bestCommon || \"\"\n  ] : null;\n}\nfunction charsToLines(diffs, lineArray) {\n  for (let x = 0; x < diffs.length; x++) {\n    const chars = diffs[x][1], text = [];\n    for (let y = 0; y < chars.length; y++)\n      text[y] = lineArray[chars.charCodeAt(y)];\n    diffs[x][1] = text.join(\"\");\n  }\n}\nfunction linesToChars(textA, textB) {\n  const lineArray = [], lineHash = {};\n  lineArray[0] = \"\";\n  function diffLinesToMunge(text) {\n    let chars = \"\", lineStart = 0, lineEnd = -1, lineArrayLength = lineArray.length;\n    for (; lineEnd < text.length - 1; ) {\n      lineEnd = text.indexOf(`\n`, lineStart), lineEnd === -1 && (lineEnd = text.length - 1);\n      let line = text.slice(lineStart, lineEnd + 1);\n      (lineHash.hasOwnProperty ? lineHash.hasOwnProperty(line) : lineHash[line] !== void 0) ? chars += String.fromCharCode(lineHash[line]) : (lineArrayLength === maxLines && (line = text.slice(lineStart), lineEnd = text.length), chars += String.fromCharCode(lineArrayLength), lineHash[line] = lineArrayLength, lineArray[lineArrayLength++] = line), lineStart = lineEnd + 1;\n    }\n    return chars;\n  }\n  let maxLines = 4e4;\n  const chars1 = diffLinesToMunge(textA);\n  maxLines = 65535;\n  const chars2 = diffLinesToMunge(textB);\n  return { chars1, chars2, lineArray };\n}\nfunction doLineModeDiff(textA, textB, opts) {\n  let text1 = textA, text2 = textB;\n  const a = linesToChars(text1, text2);\n  text1 = a.chars1, text2 = a.chars2;\n  const linearray = a.lineArray;\n  let diffs = doDiff(text1, text2, {\n    checkLines: !1,\n    deadline: opts.deadline\n  });\n  charsToLines(diffs, linearray), diffs = cleanupSemantic(diffs), diffs.push([DIFF_EQUAL, \"\"]);\n  let pointer = 0, countDelete = 0, countInsert = 0, textDelete = \"\", textInsert = \"\";\n  for (; pointer < diffs.length; ) {\n    switch (diffs[pointer][0]) {\n      case DIFF_INSERT:\n        countInsert++, textInsert += diffs[pointer][1];\n        break;\n      case DIFF_DELETE:\n        countDelete++, textDelete += diffs[pointer][1];\n        break;\n      case DIFF_EQUAL:\n        if (countDelete >= 1 && countInsert >= 1) {\n          diffs.splice(pointer - countDelete - countInsert, countDelete + countInsert), pointer = pointer - countDelete - countInsert;\n          const aa = doDiff(textDelete, textInsert, {\n            checkLines: !1,\n            deadline: opts.deadline\n          });\n          for (let j = aa.length - 1; j >= 0; j--)\n            diffs.splice(pointer, 0, aa[j]);\n          pointer += aa.length;\n        }\n        countInsert = 0, countDelete = 0, textDelete = \"\", textInsert = \"\";\n        break;\n      default:\n        throw new Error(\"Unknown diff operation.\");\n    }\n    pointer++;\n  }\n  return diffs.pop(), diffs;\n}\nfunction computeDiff(text1, text2, opts) {\n  let diffs;\n  if (!text1)\n    return [[DIFF_INSERT, text2]];\n  if (!text2)\n    return [[DIFF_DELETE, text1]];\n  const longtext = text1.length > text2.length ? text1 : text2, shorttext = text1.length > text2.length ? text2 : text1, i = longtext.indexOf(shorttext);\n  if (i !== -1)\n    return diffs = [\n      [DIFF_INSERT, longtext.substring(0, i)],\n      [DIFF_EQUAL, shorttext],\n      [DIFF_INSERT, longtext.substring(i + shorttext.length)]\n    ], text1.length > text2.length && (diffs[0][0] = DIFF_DELETE, diffs[2][0] = DIFF_DELETE), diffs;\n  if (shorttext.length === 1)\n    return [\n      [DIFF_DELETE, text1],\n      [DIFF_INSERT, text2]\n    ];\n  const halfMatch = findHalfMatch(text1, text2);\n  if (halfMatch) {\n    const text1A = halfMatch[0], text1B = halfMatch[1], text2A = halfMatch[2], text2B = halfMatch[3], midCommon = halfMatch[4], diffsA = doDiff(text1A, text2A, opts), diffsB = doDiff(text1B, text2B, opts);\n    return diffsA.concat([[DIFF_EQUAL, midCommon]], diffsB);\n  }\n  return opts.checkLines && text1.length > 100 && text2.length > 100 ? doLineModeDiff(text1, text2, opts) : bisect(text1, text2, opts.deadline);\n}\nvar __defProp$2 = Object.defineProperty, __getOwnPropSymbols$2 = Object.getOwnPropertySymbols, __hasOwnProp$2 = Object.prototype.hasOwnProperty, __propIsEnum$2 = Object.prototype.propertyIsEnumerable, __defNormalProp$2 = (obj, key, value) => key in obj ? __defProp$2(obj, key, { enumerable: !0, configurable: !0, writable: !0, value }) : obj[key] = value, __spreadValues$2 = (a, b) => {\n  for (var prop in b || (b = {}))\n    __hasOwnProp$2.call(b, prop) && __defNormalProp$2(a, prop, b[prop]);\n  if (__getOwnPropSymbols$2)\n    for (var prop of __getOwnPropSymbols$2(b))\n      __propIsEnum$2.call(b, prop) && __defNormalProp$2(a, prop, b[prop]);\n  return a;\n};\nconst DIFF_DELETE = -1, DIFF_INSERT = 1, DIFF_EQUAL = 0;\nfunction diff(textA, textB, opts) {\n  if (textA === null || textB === null)\n    throw new Error(\"Null input. (diff)\");\n  const diffs = doDiff(textA, textB, createInternalOpts(opts || {}));\n  return adjustDiffForSurrogatePairs(diffs), diffs;\n}\nfunction doDiff(textA, textB, options) {\n  let text1 = textA, text2 = textB;\n  if (text1 === text2)\n    return text1 ? [[DIFF_EQUAL, text1]] : [];\n  let commonlength = getCommonPrefix(text1, text2);\n  const commonprefix = text1.substring(0, commonlength);\n  text1 = text1.substring(commonlength), text2 = text2.substring(commonlength), commonlength = getCommonSuffix(text1, text2);\n  const commonsuffix = text1.substring(text1.length - commonlength);\n  text1 = text1.substring(0, text1.length - commonlength), text2 = text2.substring(0, text2.length - commonlength);\n  let diffs = computeDiff(text1, text2, options);\n  return commonprefix && diffs.unshift([DIFF_EQUAL, commonprefix]), commonsuffix && diffs.push([DIFF_EQUAL, commonsuffix]), diffs = cleanupMerge(diffs), diffs;\n}\nfunction createDeadLine(timeout) {\n  let t = 1;\n  return typeof timeout < \"u\" && (t = timeout <= 0 ? Number.MAX_VALUE : timeout), Date.now() + t * 1e3;\n}\nfunction createInternalOpts(opts) {\n  return __spreadValues$2({\n    checkLines: !0,\n    deadline: createDeadLine(opts.timeout || 1)\n  }, opts);\n}\nfunction combineChar(data, char, dir) {\n  return dir === 1 ? data + char : char + data;\n}\nfunction splitChar(data, dir) {\n  return dir === 1 ? [data.substring(0, data.length - 1), data[data.length - 1]] : [data.substring(1), data[0]];\n}\nfunction hasSharedChar(diffs, i, j, dir) {\n  return dir === 1 ? diffs[i][1][diffs[i][1].length - 1] === diffs[j][1][diffs[j][1].length - 1] : diffs[i][1][0] === diffs[j][1][0];\n}\nfunction deisolateChar(diffs, i, dir) {\n  const inv = dir === 1 ? -1 : 1;\n  let insertIdx = null, deleteIdx = null, j = i + dir;\n  for (; j >= 0 && j < diffs.length && (insertIdx === null || deleteIdx === null); j += dir) {\n    const [op, text2] = diffs[j];\n    if (text2.length !== 0) {\n      if (op === DIFF_INSERT) {\n        insertIdx === null && (insertIdx = j);\n        continue;\n      } else if (op === DIFF_DELETE) {\n        deleteIdx === null && (deleteIdx = j);\n        continue;\n      } else if (op === DIFF_EQUAL) {\n        if (insertIdx === null && deleteIdx === null) {\n          const [rest, char2] = splitChar(diffs[i][1], dir);\n          diffs[i][1] = rest, diffs[j][1] = combineChar(diffs[j][1], char2, inv);\n          return;\n        }\n        break;\n      }\n    }\n  }\n  if (insertIdx !== null && deleteIdx !== null && hasSharedChar(diffs, insertIdx, deleteIdx, dir)) {\n    const [insertText, insertChar] = splitChar(diffs[insertIdx][1], inv), [deleteText] = splitChar(diffs[deleteIdx][1], inv);\n    diffs[insertIdx][1] = insertText, diffs[deleteIdx][1] = deleteText, diffs[i][1] = combineChar(diffs[i][1], insertChar, dir);\n    return;\n  }\n  const [text, char] = splitChar(diffs[i][1], dir);\n  diffs[i][1] = text, insertIdx === null ? (diffs.splice(j, 0, [DIFF_INSERT, char]), deleteIdx !== null && deleteIdx >= j && deleteIdx++) : diffs[insertIdx][1] = combineChar(diffs[insertIdx][1], char, inv), deleteIdx === null ? diffs.splice(j, 0, [DIFF_DELETE, char]) : diffs[deleteIdx][1] = combineChar(diffs[deleteIdx][1], char, inv);\n}\nfunction adjustDiffForSurrogatePairs(diffs) {\n  for (let i = 0; i < diffs.length; i++) {\n    const [diffType, diffText] = diffs[i];\n    if (diffText.length === 0) continue;\n    const firstChar = diffText[0], lastChar = diffText[diffText.length - 1];\n    isHighSurrogate(lastChar) && diffType === DIFF_EQUAL && deisolateChar(diffs, i, 1), isLowSurrogate(firstChar) && diffType === DIFF_EQUAL && deisolateChar(diffs, i, -1);\n  }\n  for (let i = 0; i < diffs.length; i++)\n    diffs[i][1].length === 0 && diffs.splice(i, 1);\n}\nfunction cleanupSemantic(rawDiffs) {\n  let diffs = rawDiffs.map((diff2) => cloneDiff(diff2)), hasChanges = !1;\n  const equalities = [];\n  let equalitiesLength = 0, lastEquality = null, pointer = 0, lengthInsertions1 = 0, lengthDeletions1 = 0, lengthInsertions2 = 0, lengthDeletions2 = 0;\n  for (; pointer < diffs.length; )\n    diffs[pointer][0] === DIFF_EQUAL ? (equalities[equalitiesLength++] = pointer, lengthInsertions1 = lengthInsertions2, lengthDeletions1 = lengthDeletions2, lengthInsertions2 = 0, lengthDeletions2 = 0, lastEquality = diffs[pointer][1]) : (diffs[pointer][0] === DIFF_INSERT ? lengthInsertions2 += diffs[pointer][1].length : lengthDeletions2 += diffs[pointer][1].length, lastEquality && lastEquality.length <= Math.max(lengthInsertions1, lengthDeletions1) && lastEquality.length <= Math.max(lengthInsertions2, lengthDeletions2) && (diffs.splice(equalities[equalitiesLength - 1], 0, [DIFF_DELETE, lastEquality]), diffs[equalities[equalitiesLength - 1] + 1][0] = DIFF_INSERT, equalitiesLength--, equalitiesLength--, pointer = equalitiesLength > 0 ? equalities[equalitiesLength - 1] : -1, lengthInsertions1 = 0, lengthDeletions1 = 0, lengthInsertions2 = 0, lengthDeletions2 = 0, lastEquality = null, hasChanges = !0)), pointer++;\n  for (hasChanges && (diffs = cleanupMerge(diffs)), diffs = cleanupSemanticLossless(diffs), pointer = 1; pointer < diffs.length; ) {\n    if (diffs[pointer - 1][0] === DIFF_DELETE && diffs[pointer][0] === DIFF_INSERT) {\n      const deletion = diffs[pointer - 1][1], insertion = diffs[pointer][1], overlapLength1 = getCommonOverlap(deletion, insertion), overlapLength2 = getCommonOverlap(insertion, deletion);\n      overlapLength1 >= overlapLength2 ? (overlapLength1 >= deletion.length / 2 || overlapLength1 >= insertion.length / 2) && (diffs.splice(pointer, 0, [DIFF_EQUAL, insertion.substring(0, overlapLength1)]), diffs[pointer - 1][1] = deletion.substring(0, deletion.length - overlapLength1), diffs[pointer + 1][1] = insertion.substring(overlapLength1), pointer++) : (overlapLength2 >= deletion.length / 2 || overlapLength2 >= insertion.length / 2) && (diffs.splice(pointer, 0, [DIFF_EQUAL, deletion.substring(0, overlapLength2)]), diffs[pointer - 1][0] = DIFF_INSERT, diffs[pointer - 1][1] = insertion.substring(0, insertion.length - overlapLength2), diffs[pointer + 1][0] = DIFF_DELETE, diffs[pointer + 1][1] = deletion.substring(overlapLength2), pointer++), pointer++;\n    }\n    pointer++;\n  }\n  return diffs;\n}\nconst nonAlphaNumericRegex = /[^a-zA-Z0-9]/, whitespaceRegex = /\\s/, linebreakRegex = /[\\r\\n]/, blanklineEndRegex = /\\n\\r?\\n$/, blanklineStartRegex = /^\\r?\\n\\r?\\n/;\nfunction cleanupSemanticLossless(rawDiffs) {\n  const diffs = rawDiffs.map((diff2) => cloneDiff(diff2));\n  function diffCleanupSemanticScore(one, two) {\n    if (!one || !two)\n      return 6;\n    const char1 = one.charAt(one.length - 1), char2 = two.charAt(0), nonAlphaNumeric1 = char1.match(nonAlphaNumericRegex), nonAlphaNumeric2 = char2.match(nonAlphaNumericRegex), whitespace1 = nonAlphaNumeric1 && char1.match(whitespaceRegex), whitespace2 = nonAlphaNumeric2 && char2.match(whitespaceRegex), lineBreak1 = whitespace1 && char1.match(linebreakRegex), lineBreak2 = whitespace2 && char2.match(linebreakRegex), blankLine1 = lineBreak1 && one.match(blanklineEndRegex), blankLine2 = lineBreak2 && two.match(blanklineStartRegex);\n    return blankLine1 || blankLine2 ? 5 : lineBreak1 || lineBreak2 ? 4 : nonAlphaNumeric1 && !whitespace1 && whitespace2 ? 3 : whitespace1 || whitespace2 ? 2 : nonAlphaNumeric1 || nonAlphaNumeric2 ? 1 : 0;\n  }\n  let pointer = 1;\n  for (; pointer < diffs.length - 1; ) {\n    if (diffs[pointer - 1][0] === DIFF_EQUAL && diffs[pointer + 1][0] === DIFF_EQUAL) {\n      let equality1 = diffs[pointer - 1][1], edit = diffs[pointer][1], equality2 = diffs[pointer + 1][1];\n      const commonOffset = getCommonSuffix(equality1, edit);\n      if (commonOffset) {\n        const commonString = edit.substring(edit.length - commonOffset);\n        equality1 = equality1.substring(0, equality1.length - commonOffset), edit = commonString + edit.substring(0, edit.length - commonOffset), equality2 = commonString + equality2;\n      }\n      let bestEquality1 = equality1, bestEdit = edit, bestEquality2 = equality2, bestScore = diffCleanupSemanticScore(equality1, edit) + diffCleanupSemanticScore(edit, equality2);\n      for (; edit.charAt(0) === equality2.charAt(0); ) {\n        equality1 += edit.charAt(0), edit = edit.substring(1) + equality2.charAt(0), equality2 = equality2.substring(1);\n        const score = diffCleanupSemanticScore(equality1, edit) + diffCleanupSemanticScore(edit, equality2);\n        score >= bestScore && (bestScore = score, bestEquality1 = equality1, bestEdit = edit, bestEquality2 = equality2);\n      }\n      diffs[pointer - 1][1] !== bestEquality1 && (bestEquality1 ? diffs[pointer - 1][1] = bestEquality1 : (diffs.splice(pointer - 1, 1), pointer--), diffs[pointer][1] = bestEdit, bestEquality2 ? diffs[pointer + 1][1] = bestEquality2 : (diffs.splice(pointer + 1, 1), pointer--));\n    }\n    pointer++;\n  }\n  return diffs;\n}\nfunction cleanupMerge(rawDiffs) {\n  let diffs = rawDiffs.map((diff2) => cloneDiff(diff2));\n  diffs.push([DIFF_EQUAL, \"\"]);\n  let pointer = 0, countDelete = 0, countInsert = 0, textDelete = \"\", textInsert = \"\", commonlength;\n  for (; pointer < diffs.length; )\n    switch (diffs[pointer][0]) {\n      case DIFF_INSERT:\n        countInsert++, textInsert += diffs[pointer][1], pointer++;\n        break;\n      case DIFF_DELETE:\n        countDelete++, textDelete += diffs[pointer][1], pointer++;\n        break;\n      case DIFF_EQUAL:\n        countDelete + countInsert > 1 ? (countDelete !== 0 && countInsert !== 0 && (commonlength = getCommonPrefix(textInsert, textDelete), commonlength !== 0 && (pointer - countDelete - countInsert > 0 && diffs[pointer - countDelete - countInsert - 1][0] === DIFF_EQUAL ? diffs[pointer - countDelete - countInsert - 1][1] += textInsert.substring(\n          0,\n          commonlength\n        ) : (diffs.splice(0, 0, [DIFF_EQUAL, textInsert.substring(0, commonlength)]), pointer++), textInsert = textInsert.substring(commonlength), textDelete = textDelete.substring(commonlength)), commonlength = getCommonSuffix(textInsert, textDelete), commonlength !== 0 && (diffs[pointer][1] = textInsert.substring(textInsert.length - commonlength) + diffs[pointer][1], textInsert = textInsert.substring(0, textInsert.length - commonlength), textDelete = textDelete.substring(0, textDelete.length - commonlength))), pointer -= countDelete + countInsert, diffs.splice(pointer, countDelete + countInsert), textDelete.length && (diffs.splice(pointer, 0, [DIFF_DELETE, textDelete]), pointer++), textInsert.length && (diffs.splice(pointer, 0, [DIFF_INSERT, textInsert]), pointer++), pointer++) : pointer !== 0 && diffs[pointer - 1][0] === DIFF_EQUAL ? (diffs[pointer - 1][1] += diffs[pointer][1], diffs.splice(pointer, 1)) : pointer++, countInsert = 0, countDelete = 0, textDelete = \"\", textInsert = \"\";\n        break;\n      default:\n        throw new Error(\"Unknown diff operation\");\n    }\n  diffs[diffs.length - 1][1] === \"\" && diffs.pop();\n  let hasChanges = !1;\n  for (pointer = 1; pointer < diffs.length - 1; )\n    diffs[pointer - 1][0] === DIFF_EQUAL && diffs[pointer + 1][0] === DIFF_EQUAL && (diffs[pointer][1].substring(diffs[pointer][1].length - diffs[pointer - 1][1].length) === diffs[pointer - 1][1] ? (diffs[pointer][1] = diffs[pointer - 1][1] + diffs[pointer][1].substring(0, diffs[pointer][1].length - diffs[pointer - 1][1].length), diffs[pointer + 1][1] = diffs[pointer - 1][1] + diffs[pointer + 1][1], diffs.splice(pointer - 1, 1), hasChanges = !0) : diffs[pointer][1].substring(0, diffs[pointer + 1][1].length) === diffs[pointer + 1][1] && (diffs[pointer - 1][1] += diffs[pointer + 1][1], diffs[pointer][1] = diffs[pointer][1].substring(diffs[pointer + 1][1].length) + diffs[pointer + 1][1], diffs.splice(pointer + 1, 1), hasChanges = !0)), pointer++;\n  return hasChanges && (diffs = cleanupMerge(diffs)), diffs;\n}\nfunction trueCount(...args) {\n  return args.reduce((n, bool) => n + (bool ? 1 : 0), 0);\n}\nfunction cleanupEfficiency(rawDiffs, editCost = 4) {\n  let diffs = rawDiffs.map((diff2) => cloneDiff(diff2)), hasChanges = !1;\n  const equalities = [];\n  let equalitiesLength = 0, lastEquality = null, pointer = 0, preIns = !1, preDel = !1, postIns = !1, postDel = !1;\n  for (; pointer < diffs.length; )\n    diffs[pointer][0] === DIFF_EQUAL ? (diffs[pointer][1].length < editCost && (postIns || postDel) ? (equalities[equalitiesLength++] = pointer, preIns = postIns, preDel = postDel, lastEquality = diffs[pointer][1]) : (equalitiesLength = 0, lastEquality = null), postIns = !1, postDel = !1) : (diffs[pointer][0] === DIFF_DELETE ? postDel = !0 : postIns = !0, lastEquality && (preIns && preDel && postIns && postDel || lastEquality.length < editCost / 2 && trueCount(preIns, preDel, postIns, postDel) === 3) && (diffs.splice(equalities[equalitiesLength - 1], 0, [DIFF_DELETE, lastEquality]), diffs[equalities[equalitiesLength - 1] + 1][0] = DIFF_INSERT, equalitiesLength--, lastEquality = null, preIns && preDel ? (postIns = !0, postDel = !0, equalitiesLength = 0) : (equalitiesLength--, pointer = equalitiesLength > 0 ? equalities[equalitiesLength - 1] : -1, postIns = !1, postDel = !1), hasChanges = !0)), pointer++;\n  return hasChanges && (diffs = cleanupMerge(diffs)), diffs;\n}\nvar __defProp$1 = Object.defineProperty, __getOwnPropSymbols$1 = Object.getOwnPropertySymbols, __hasOwnProp$1 = Object.prototype.hasOwnProperty, __propIsEnum$1 = Object.prototype.propertyIsEnumerable, __defNormalProp$1 = (obj, key, value) => key in obj ? __defProp$1(obj, key, { enumerable: !0, configurable: !0, writable: !0, value }) : obj[key] = value, __spreadValues$1 = (a, b) => {\n  for (var prop in b || (b = {}))\n    __hasOwnProp$1.call(b, prop) && __defNormalProp$1(a, prop, b[prop]);\n  if (__getOwnPropSymbols$1)\n    for (var prop of __getOwnPropSymbols$1(b))\n      __propIsEnum$1.call(b, prop) && __defNormalProp$1(a, prop, b[prop]);\n  return a;\n};\nconst DEFAULT_OPTIONS = {\n  /**\n   * At what point is no match declared (0.0 = perfection, 1.0 = very loose).\n   */\n  threshold: 0.5,\n  /**\n   * How far to search for a match (0 = exact location, 1000+ = broad match).\n   * A match this many characters away from the expected location will add\n   * 1.0 to the score (0.0 is a perfect match).\n   */\n  distance: 1e3\n};\nfunction applyDefaults(options) {\n  return __spreadValues$1(__spreadValues$1({}, DEFAULT_OPTIONS), options);\n}\nconst MAX_BITS$1 = 32;\nfunction bitap(text, pattern, loc, opts = {}) {\n  if (pattern.length > MAX_BITS$1)\n    throw new Error(\"Pattern too long for this browser.\");\n  const options = applyDefaults(opts), s = getAlphabetFromPattern(pattern);\n  function getBitapScore(e, x) {\n    const accuracy = e / pattern.length, proximity = Math.abs(loc - x);\n    return options.distance ? accuracy + proximity / options.distance : proximity ? 1 : accuracy;\n  }\n  let scoreThreshold = options.threshold, bestLoc = text.indexOf(pattern, loc);\n  bestLoc !== -1 && (scoreThreshold = Math.min(getBitapScore(0, bestLoc), scoreThreshold), bestLoc = text.lastIndexOf(pattern, loc + pattern.length), bestLoc !== -1 && (scoreThreshold = Math.min(getBitapScore(0, bestLoc), scoreThreshold)));\n  const matchmask = 1 << pattern.length - 1;\n  bestLoc = -1;\n  let binMin, binMid, binMax = pattern.length + text.length, lastRd = [];\n  for (let d = 0; d < pattern.length; d++) {\n    for (binMin = 0, binMid = binMax; binMin < binMid; )\n      getBitapScore(d, loc + binMid) <= scoreThreshold ? binMin = binMid : binMax = binMid, binMid = Math.floor((binMax - binMin) / 2 + binMin);\n    binMax = binMid;\n    let start = Math.max(1, loc - binMid + 1);\n    const finish = Math.min(loc + binMid, text.length) + pattern.length, rd = new Array(finish + 2);\n    rd[finish + 1] = (1 << d) - 1;\n    for (let j = finish; j >= start; j--) {\n      const charMatch = s[text.charAt(j - 1)];\n      if (d === 0 ? rd[j] = (rd[j + 1] << 1 | 1) & charMatch : rd[j] = (rd[j + 1] << 1 | 1) & charMatch | ((lastRd[j + 1] | lastRd[j]) << 1 | 1) | lastRd[j + 1], rd[j] & matchmask) {\n        const score = getBitapScore(d, j - 1);\n        if (score <= scoreThreshold)\n          if (scoreThreshold = score, bestLoc = j - 1, bestLoc > loc)\n            start = Math.max(1, 2 * loc - bestLoc);\n          else\n            break;\n      }\n    }\n    if (getBitapScore(d + 1, loc) > scoreThreshold)\n      break;\n    lastRd = rd;\n  }\n  return bestLoc;\n}\nfunction getAlphabetFromPattern(pattern) {\n  const s = {};\n  for (let i = 0; i < pattern.length; i++)\n    s[pattern.charAt(i)] = 0;\n  for (let i = 0; i < pattern.length; i++)\n    s[pattern.charAt(i)] |= 1 << pattern.length - i - 1;\n  return s;\n}\nfunction match(text, pattern, searchLocation) {\n  if (text === null || pattern === null || searchLocation === null)\n    throw new Error(\"Null input. (match())\");\n  const loc = Math.max(0, Math.min(searchLocation, text.length));\n  if (text === pattern)\n    return 0;\n  if (text.length) {\n    if (text.substring(loc, loc + pattern.length) === pattern)\n      return loc;\n  } else return -1;\n  return bitap(text, pattern, loc);\n}\nfunction diffText1(diffs) {\n  const text = [];\n  for (let x = 0; x < diffs.length; x++)\n    diffs[x][0] !== DIFF_INSERT && (text[x] = diffs[x][1]);\n  return text.join(\"\");\n}\nfunction diffText2(diffs) {\n  const text = [];\n  for (let x = 0; x < diffs.length; x++)\n    diffs[x][0] !== DIFF_DELETE && (text[x] = diffs[x][1]);\n  return text.join(\"\");\n}\nfunction levenshtein(diffs) {\n  let leven = 0, insertions = 0, deletions = 0;\n  for (let x = 0; x < diffs.length; x++) {\n    const op = diffs[x][0], data = diffs[x][1];\n    switch (op) {\n      case DIFF_INSERT:\n        insertions += data.length;\n        break;\n      case DIFF_DELETE:\n        deletions += data.length;\n        break;\n      case DIFF_EQUAL:\n        leven += Math.max(insertions, deletions), insertions = 0, deletions = 0;\n        break;\n      default:\n        throw new Error(\"Unknown diff operation.\");\n    }\n  }\n  return leven += Math.max(insertions, deletions), leven;\n}\nfunction xIndex(diffs, loc) {\n  let chars1 = 0, chars2 = 0, lastChars1 = 0, lastChars2 = 0, x;\n  for (x = 0; x < diffs.length && (diffs[x][0] !== DIFF_INSERT && (chars1 += diffs[x][1].length), diffs[x][0] !== DIFF_DELETE && (chars2 += diffs[x][1].length), !(chars1 > loc)); x++)\n    lastChars1 = chars1, lastChars2 = chars2;\n  return diffs.length !== x && diffs[x][0] === DIFF_DELETE ? lastChars2 : lastChars2 + (loc - lastChars1);\n}\nfunction countUtf8Bytes(str) {\n  let bytes = 0;\n  for (let i = 0; i < str.length; i++) {\n    const codePoint = str.codePointAt(i);\n    if (typeof codePoint > \"u\")\n      throw new Error(\"Failed to get codepoint\");\n    bytes += utf8len(codePoint);\n  }\n  return bytes;\n}\nfunction adjustIndiciesToUcs2(patches, base, options = {}) {\n  let byteOffset = 0, idx = 0;\n  function advanceTo(target) {\n    for (; byteOffset < target; ) {\n      const codePoint = base.codePointAt(idx);\n      if (typeof codePoint > \"u\")\n        return idx;\n      byteOffset += utf8len(codePoint), codePoint > 65535 ? idx += 2 : idx += 1;\n    }\n    if (!options.allowExceedingIndices && byteOffset !== target)\n      throw new Error(\"Failed to determine byte offset\");\n    return idx;\n  }\n  const adjusted = [];\n  for (const patch of patches)\n    adjusted.push({\n      diffs: patch.diffs.map((diff2) => cloneDiff(diff2)),\n      start1: advanceTo(patch.start1),\n      start2: advanceTo(patch.start2),\n      utf8Start1: patch.utf8Start1,\n      utf8Start2: patch.utf8Start2,\n      length1: patch.length1,\n      length2: patch.length2,\n      utf8Length1: patch.utf8Length1,\n      utf8Length2: patch.utf8Length2\n    });\n  return adjusted;\n}\nfunction utf8len(codePoint) {\n  return codePoint <= 127 ? 1 : codePoint <= 2047 ? 2 : codePoint <= 65535 ? 3 : 4;\n}\nconst MAX_BITS = 32, DEFAULT_MARGIN = 4;\nfunction addPadding(patches, margin = DEFAULT_MARGIN) {\n  const paddingLength = margin;\n  let nullPadding = \"\";\n  for (let x = 1; x <= paddingLength; x++)\n    nullPadding += String.fromCharCode(x);\n  for (const p of patches)\n    p.start1 += paddingLength, p.start2 += paddingLength, p.utf8Start1 += paddingLength, p.utf8Start2 += paddingLength;\n  let patch = patches[0], diffs = patch.diffs;\n  if (diffs.length === 0 || diffs[0][0] !== DIFF_EQUAL)\n    diffs.unshift([DIFF_EQUAL, nullPadding]), patch.start1 -= paddingLength, patch.start2 -= paddingLength, patch.utf8Start1 -= paddingLength, patch.utf8Start2 -= paddingLength, patch.length1 += paddingLength, patch.length2 += paddingLength, patch.utf8Length1 += paddingLength, patch.utf8Length2 += paddingLength;\n  else if (paddingLength > diffs[0][1].length) {\n    const firstDiffLength = diffs[0][1].length, extraLength = paddingLength - firstDiffLength;\n    diffs[0][1] = nullPadding.substring(firstDiffLength) + diffs[0][1], patch.start1 -= extraLength, patch.start2 -= extraLength, patch.utf8Start1 -= extraLength, patch.utf8Start2 -= extraLength, patch.length1 += extraLength, patch.length2 += extraLength, patch.utf8Length1 += extraLength, patch.utf8Length2 += extraLength;\n  }\n  if (patch = patches[patches.length - 1], diffs = patch.diffs, diffs.length === 0 || diffs[diffs.length - 1][0] !== DIFF_EQUAL)\n    diffs.push([DIFF_EQUAL, nullPadding]), patch.length1 += paddingLength, patch.length2 += paddingLength, patch.utf8Length1 += paddingLength, patch.utf8Length2 += paddingLength;\n  else if (paddingLength > diffs[diffs.length - 1][1].length) {\n    const extraLength = paddingLength - diffs[diffs.length - 1][1].length;\n    diffs[diffs.length - 1][1] += nullPadding.substring(0, extraLength), patch.length1 += extraLength, patch.length2 += extraLength, patch.utf8Length1 += extraLength, patch.utf8Length2 += extraLength;\n  }\n  return nullPadding;\n}\nfunction createPatchObject(start1, start2) {\n  return {\n    diffs: [],\n    start1,\n    start2,\n    utf8Start1: start1,\n    utf8Start2: start2,\n    length1: 0,\n    length2: 0,\n    utf8Length1: 0,\n    utf8Length2: 0\n  };\n}\nfunction splitMax(patches, margin = DEFAULT_MARGIN) {\n  const patchSize = MAX_BITS;\n  for (let x = 0; x < patches.length; x++) {\n    if (patches[x].length1 <= patchSize)\n      continue;\n    const bigpatch = patches[x];\n    patches.splice(x--, 1);\n    let start1 = bigpatch.start1, start2 = bigpatch.start2, preContext = \"\";\n    for (; bigpatch.diffs.length !== 0; ) {\n      const patch = createPatchObject(start1 - preContext.length, start2 - preContext.length);\n      let empty = !0;\n      if (preContext !== \"\") {\n        const precontextByteCount = countUtf8Bytes(preContext);\n        patch.length1 = preContext.length, patch.utf8Length1 = precontextByteCount, patch.length2 = preContext.length, patch.utf8Length2 = precontextByteCount, patch.diffs.push([DIFF_EQUAL, preContext]);\n      }\n      for (; bigpatch.diffs.length !== 0 && patch.length1 < patchSize - margin; ) {\n        const diffType = bigpatch.diffs[0][0];\n        let diffText = bigpatch.diffs[0][1], diffTextByteCount = countUtf8Bytes(diffText);\n        if (diffType === DIFF_INSERT) {\n          patch.length2 += diffText.length, patch.utf8Length2 += diffTextByteCount, start2 += diffText.length;\n          const diff2 = bigpatch.diffs.shift();\n          diff2 && patch.diffs.push(diff2), empty = !1;\n        } else diffType === DIFF_DELETE && patch.diffs.length === 1 && patch.diffs[0][0] === DIFF_EQUAL && diffText.length > 2 * patchSize ? (patch.length1 += diffText.length, patch.utf8Length1 += diffTextByteCount, start1 += diffText.length, empty = !1, patch.diffs.push([diffType, diffText]), bigpatch.diffs.shift()) : (diffText = diffText.substring(0, patchSize - patch.length1 - margin), diffTextByteCount = countUtf8Bytes(diffText), patch.length1 += diffText.length, patch.utf8Length1 += diffTextByteCount, start1 += diffText.length, diffType === DIFF_EQUAL ? (patch.length2 += diffText.length, patch.utf8Length2 += diffTextByteCount, start2 += diffText.length) : empty = !1, patch.diffs.push([diffType, diffText]), diffText === bigpatch.diffs[0][1] ? bigpatch.diffs.shift() : bigpatch.diffs[0][1] = bigpatch.diffs[0][1].substring(diffText.length));\n      }\n      preContext = diffText2(patch.diffs), preContext = preContext.substring(preContext.length - margin);\n      const postContext = diffText1(bigpatch.diffs).substring(0, margin), postContextByteCount = countUtf8Bytes(postContext);\n      postContext !== \"\" && (patch.length1 += postContext.length, patch.length2 += postContext.length, patch.utf8Length1 += postContextByteCount, patch.utf8Length2 += postContextByteCount, patch.diffs.length !== 0 && patch.diffs[patch.diffs.length - 1][0] === DIFF_EQUAL ? patch.diffs[patch.diffs.length - 1][1] += postContext : patch.diffs.push([DIFF_EQUAL, postContext])), empty || patches.splice(++x, 0, patch);\n    }\n  }\n}\nfunction apply(patches, originalText, opts = {}) {\n  if (typeof patches == \"string\")\n    throw new Error(\"Patches must be an array - pass the patch to `parsePatch()` first\");\n  let text = originalText;\n  if (patches.length === 0)\n    return [text, []];\n  const parsed = adjustIndiciesToUcs2(patches, text, {\n    allowExceedingIndices: opts.allowExceedingIndices\n  }), margin = opts.margin || DEFAULT_MARGIN, deleteThreshold = opts.deleteThreshold || 0.4, nullPadding = addPadding(parsed, margin);\n  text = nullPadding + text + nullPadding, splitMax(parsed, margin);\n  let delta = 0;\n  const results = [];\n  for (let x = 0; x < parsed.length; x++) {\n    const expectedLoc = parsed[x].start2 + delta, text1 = diffText1(parsed[x].diffs);\n    let startLoc, endLoc = -1;\n    if (text1.length > MAX_BITS ? (startLoc = match(text, text1.substring(0, MAX_BITS), expectedLoc), startLoc !== -1 && (endLoc = match(\n      text,\n      text1.substring(text1.length - MAX_BITS),\n      expectedLoc + text1.length - MAX_BITS\n    ), (endLoc === -1 || startLoc >= endLoc) && (startLoc = -1))) : startLoc = match(text, text1, expectedLoc), startLoc === -1)\n      results[x] = !1, delta -= parsed[x].length2 - parsed[x].length1;\n    else {\n      results[x] = !0, delta = startLoc - expectedLoc;\n      let text2;\n      if (endLoc === -1 ? text2 = text.substring(startLoc, startLoc + text1.length) : text2 = text.substring(startLoc, endLoc + MAX_BITS), text1 === text2)\n        text = text.substring(0, startLoc) + diffText2(parsed[x].diffs) + text.substring(startLoc + text1.length);\n      else {\n        let diffs = diff(text1, text2, { checkLines: !1 });\n        if (text1.length > MAX_BITS && levenshtein(diffs) / text1.length > deleteThreshold)\n          results[x] = !1;\n        else {\n          diffs = cleanupSemanticLossless(diffs);\n          let index1 = 0, index2 = 0;\n          for (let y = 0; y < parsed[x].diffs.length; y++) {\n            const mod = parsed[x].diffs[y];\n            mod[0] !== DIFF_EQUAL && (index2 = xIndex(diffs, index1)), mod[0] === DIFF_INSERT ? text = text.substring(0, startLoc + index2) + mod[1] + text.substring(startLoc + index2) : mod[0] === DIFF_DELETE && (text = text.substring(0, startLoc + index2) + text.substring(startLoc + xIndex(diffs, index1 + mod[1].length))), mod[0] !== DIFF_DELETE && (index1 += mod[1].length);\n          }\n        }\n      }\n    }\n  }\n  return text = text.substring(nullPadding.length, text.length - nullPadding.length), [text, results];\n}\nvar __defProp = Object.defineProperty, __getOwnPropSymbols = Object.getOwnPropertySymbols, __hasOwnProp = Object.prototype.hasOwnProperty, __propIsEnum = Object.prototype.propertyIsEnumerable, __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: !0, configurable: !0, writable: !0, value }) : obj[key] = value, __spreadValues = (a, b) => {\n  for (var prop in b || (b = {}))\n    __hasOwnProp.call(b, prop) && __defNormalProp(a, prop, b[prop]);\n  if (__getOwnPropSymbols)\n    for (var prop of __getOwnPropSymbols(b))\n      __propIsEnum.call(b, prop) && __defNormalProp(a, prop, b[prop]);\n  return a;\n};\nconst DEFAULT_OPTS = {\n  margin: 4\n};\nfunction getDefaultOpts(opts = {}) {\n  return __spreadValues(__spreadValues({}, DEFAULT_OPTS), opts);\n}\nfunction make(a, b, options) {\n  if (typeof a == \"string\" && typeof b == \"string\") {\n    let diffs = diff(a, b, { checkLines: !0 });\n    return diffs.length > 2 && (diffs = cleanupSemantic(diffs), diffs = cleanupEfficiency(diffs)), _make(a, diffs, getDefaultOpts(options));\n  }\n  if (a && Array.isArray(a) && typeof b > \"u\")\n    return _make(diffText1(a), a, getDefaultOpts(options));\n  if (typeof a == \"string\" && b && Array.isArray(b))\n    return _make(a, b, getDefaultOpts(options));\n  throw new Error(\"Unknown call format to make()\");\n}\nfunction _make(textA, diffs, options) {\n  if (diffs.length === 0)\n    return [];\n  const patches = [];\n  let patch = createPatchObject(0, 0), patchDiffLength = 0, charCount1 = 0, charCount2 = 0, utf8Count1 = 0, utf8Count2 = 0, prepatchText = textA, postpatchText = textA;\n  for (let x = 0; x < diffs.length; x++) {\n    const currentDiff = diffs[x], [diffType, diffText] = currentDiff, diffTextLength = diffText.length, diffByteLength = countUtf8Bytes(diffText);\n    switch (!patchDiffLength && diffType !== DIFF_EQUAL && (patch.start1 = charCount1, patch.start2 = charCount2, patch.utf8Start1 = utf8Count1, patch.utf8Start2 = utf8Count2), diffType) {\n      case DIFF_INSERT:\n        patch.diffs[patchDiffLength++] = currentDiff, patch.length2 += diffTextLength, patch.utf8Length2 += diffByteLength, postpatchText = postpatchText.substring(0, charCount2) + diffText + postpatchText.substring(charCount2);\n        break;\n      case DIFF_DELETE:\n        patch.length1 += diffTextLength, patch.utf8Length1 += diffByteLength, patch.diffs[patchDiffLength++] = currentDiff, postpatchText = postpatchText.substring(0, charCount2) + postpatchText.substring(charCount2 + diffTextLength);\n        break;\n      case DIFF_EQUAL:\n        diffTextLength <= 2 * options.margin && patchDiffLength && diffs.length !== x + 1 ? (patch.diffs[patchDiffLength++] = currentDiff, patch.length1 += diffTextLength, patch.length2 += diffTextLength, patch.utf8Length1 += diffByteLength, patch.utf8Length2 += diffByteLength) : diffTextLength >= 2 * options.margin && patchDiffLength && (addContext(patch, prepatchText, options), patches.push(patch), patch = createPatchObject(-1, -1), patchDiffLength = 0, prepatchText = postpatchText, charCount1 = charCount2, utf8Count1 = utf8Count2);\n        break;\n      default:\n        throw new Error(\"Unknown diff type\");\n    }\n    diffType !== DIFF_INSERT && (charCount1 += diffTextLength, utf8Count1 += diffByteLength), diffType !== DIFF_DELETE && (charCount2 += diffTextLength, utf8Count2 += diffByteLength);\n  }\n  return patchDiffLength && (addContext(patch, prepatchText, options), patches.push(patch)), patches;\n}\nfunction addContext(patch, text, opts) {\n  if (text.length === 0)\n    return;\n  let pattern = text.substring(patch.start2, patch.start2 + patch.length1), padding = 0;\n  for (; text.indexOf(pattern) !== text.lastIndexOf(pattern) && pattern.length < MAX_BITS - opts.margin - opts.margin; )\n    padding += opts.margin, pattern = text.substring(patch.start2 - padding, patch.start2 + patch.length1 + padding);\n  padding += opts.margin;\n  let prefixStart = patch.start2 - padding;\n  prefixStart >= 1 && isLowSurrogate(text[prefixStart]) && prefixStart--;\n  const prefix = text.substring(prefixStart, patch.start2);\n  prefix && patch.diffs.unshift([DIFF_EQUAL, prefix]);\n  const prefixLength = prefix.length, prefixUtf8Length = countUtf8Bytes(prefix);\n  let suffixEnd = patch.start2 + patch.length1 + padding;\n  suffixEnd < text.length && isLowSurrogate(text[suffixEnd]) && suffixEnd++;\n  const suffix = text.substring(patch.start2 + patch.length1, suffixEnd);\n  suffix && patch.diffs.push([DIFF_EQUAL, suffix]);\n  const suffixLength = suffix.length, suffixUtf8Length = countUtf8Bytes(suffix);\n  patch.start1 -= prefixLength, patch.start2 -= prefixLength, patch.utf8Start1 -= prefixUtf8Length, patch.utf8Start2 -= prefixUtf8Length, patch.length1 += prefixLength + suffixLength, patch.length2 += prefixLength + suffixLength, patch.utf8Length1 += prefixUtf8Length + suffixUtf8Length, patch.utf8Length2 += prefixUtf8Length + suffixUtf8Length;\n}\nconst patchHeader = /^@@ -(\\d+),?(\\d*) \\+(\\d+),?(\\d*) @@$/;\nfunction parse(textline) {\n  if (!textline)\n    return [];\n  const patches = [], lines = textline.split(`\n`);\n  let textPointer = 0;\n  for (; textPointer < lines.length; ) {\n    const m = lines[textPointer].match(patchHeader);\n    if (!m)\n      throw new Error(`Invalid patch string: ${lines[textPointer]}`);\n    const patch = createPatchObject(toInt(m[1]), toInt(m[3]));\n    for (patches.push(patch), m[2] === \"\" ? (patch.start1--, patch.utf8Start1--, patch.length1 = 1, patch.utf8Length1 = 1) : m[2] === \"0\" ? (patch.length1 = 0, patch.utf8Length1 = 0) : (patch.start1--, patch.utf8Start1--, patch.utf8Length1 = toInt(m[2]), patch.length1 = patch.utf8Length1), m[4] === \"\" ? (patch.start2--, patch.utf8Start2--, patch.length2 = 1, patch.utf8Length2 = 1) : m[4] === \"0\" ? (patch.length2 = 0, patch.utf8Length2 = 0) : (patch.start2--, patch.utf8Start2--, patch.utf8Length2 = toInt(m[4]), patch.length2 = patch.utf8Length2), textPointer++; textPointer < lines.length; ) {\n      const currentLine = lines[textPointer], sign = currentLine.charAt(0);\n      if (sign === \"@\")\n        break;\n      if (sign === \"\") {\n        textPointer++;\n        continue;\n      }\n      let line;\n      try {\n        line = decodeURI(currentLine.slice(1));\n      } catch (ex) {\n        throw new Error(`Illegal escape in parse: ${currentLine}`);\n      }\n      const utf8Diff = countUtf8Bytes(line) - line.length;\n      if (sign === \"-\")\n        patch.diffs.push([DIFF_DELETE, line]), patch.length1 -= utf8Diff;\n      else if (sign === \"+\")\n        patch.diffs.push([DIFF_INSERT, line]), patch.length2 -= utf8Diff;\n      else if (sign === \" \")\n        patch.diffs.push([DIFF_EQUAL, line]), patch.length1 -= utf8Diff, patch.length2 -= utf8Diff;\n      else\n        throw new Error(`Invalid patch mode \"${sign}\" in: ${line}`);\n      textPointer++;\n    }\n  }\n  return patches;\n}\nfunction toInt(num) {\n  return parseInt(num, 10);\n}\nfunction stringify(patches) {\n  return patches.map(stringifyPatch).join(\"\");\n}\nfunction stringifyPatch(patch) {\n  const { utf8Length1, utf8Length2, utf8Start1, utf8Start2, diffs } = patch;\n  let coords1;\n  utf8Length1 === 0 ? coords1 = `${utf8Start1},0` : utf8Length1 === 1 ? coords1 = `${utf8Start1 + 1}` : coords1 = `${utf8Start1 + 1},${utf8Length1}`;\n  let coords2;\n  utf8Length2 === 0 ? coords2 = `${utf8Start2},0` : utf8Length2 === 1 ? coords2 = `${utf8Start2 + 1}` : coords2 = `${utf8Start2 + 1},${utf8Length2}`;\n  const text = [`@@ -${coords1} +${coords2} @@\n`];\n  let op;\n  for (let x = 0; x < diffs.length; x++) {\n    switch (diffs[x][0]) {\n      case DIFF_INSERT:\n        op = \"+\";\n        break;\n      case DIFF_DELETE:\n        op = \"-\";\n        break;\n      case DIFF_EQUAL:\n        op = \" \";\n        break;\n      default:\n        throw new Error(\"Unknown patch operation.\");\n    }\n    text[x + 1] = `${op + encodeURI(diffs[x][1])}\n`;\n  }\n  return text.join(\"\").replace(/%20/g, \" \");\n}\nexport {\n  DIFF_DELETE,\n  DIFF_EQUAL,\n  DIFF_INSERT,\n  adjustIndiciesToUcs2,\n  apply as applyPatches,\n  cleanupEfficiency,\n  cleanupSemantic,\n  diff as makeDiff,\n  make as makePatches,\n  match,\n  parse as parsePatch,\n  stringifyPatch,\n  stringify as stringifyPatches\n};\n//# sourceMappingURL=index.js.map\n","import type {Editor} from 'slate'\n\nconst IS_UDOING: WeakMap<Editor, boolean | undefined> = new WeakMap()\nconst IS_REDOING: WeakMap<Editor, boolean | undefined> = new WeakMap()\n\nexport function withUndoing(editor: Editor, fn: () => void) {\n  const prev = isUndoing(editor)\n  IS_UDOING.set(editor, true)\n  fn()\n  IS_UDOING.set(editor, prev)\n}\n\nexport function isUndoing(editor: Editor) {\n  return IS_UDOING.get(editor) ?? false\n}\n\nexport function setIsUndoing(editor: Editor, isUndoing: boolean) {\n  IS_UDOING.set(editor, isUndoing)\n}\n\nexport function withRedoing(editor: Editor, fn: () => void) {\n  const prev = isRedoing(editor)\n  IS_REDOING.set(editor, true)\n  fn()\n  IS_REDOING.set(editor, prev)\n}\n\nexport function isRedoing(editor: Editor) {\n  return IS_REDOING.get(editor) ?? false\n}\n\nexport function setIsRedoing(editor: Editor, isRedoing: boolean) {\n  IS_REDOING.set(editor, isRedoing)\n}\n","/**\n * This plugin will make the editor support undo/redo on the local state only.\n * The undo/redo steps are rebased against incoming patches since the step occurred.\n */\n\nimport type {Patch} from '@portabletext/patches'\nimport {\n  DIFF_DELETE,\n  DIFF_EQUAL,\n  DIFF_INSERT,\n  parsePatch,\n} from '@sanity/diff-match-patch'\nimport type {ObjectSchemaType, PortableTextBlock} from '@sanity/types'\nimport {flatten, isEqual} from 'lodash'\nimport {\n  Editor,\n  Operation,\n  Path,\n  Transforms,\n  type Descendant,\n  type SelectionOperation,\n} from 'slate'\nimport type {PortableTextSlateEditor} from '../../types/editor'\nimport {debugWithName} from '../../utils/debug'\nimport {fromSlateValue} from '../../utils/values'\nimport {isChangingRemotely} from '../../utils/withChanges'\nimport {\n  isRedoing,\n  isUndoing,\n  setIsRedoing,\n  setIsUndoing,\n  withRedoing,\n  withUndoing,\n} from '../../utils/withUndoRedo'\nimport type {EditorActor} from '../editor-machine'\n\nconst debug = debugWithName('plugin:withUndoRedo')\nconst debugVerbose = debug.enabled && false\n\nconst SAVING = new WeakMap<Editor, boolean | undefined>()\nconst REMOTE_PATCHES = new WeakMap<\n  Editor,\n  {\n    patch: Patch\n    time: Date\n    snapshot: PortableTextBlock[] | undefined\n    previousSnapshot: PortableTextBlock[] | undefined\n  }[]\n>()\nconst UNDO_STEP_LIMIT = 1000\n\nconst isSaving = (editor: Editor): boolean | undefined => {\n  const state = SAVING.get(editor)\n  return state === undefined ? true : state\n}\n\nexport interface Options {\n  editorActor: EditorActor\n  blockSchemaType: ObjectSchemaType\n  subscriptions: Array<() => () => void>\n}\n\nconst getRemotePatches = (editor: Editor) => {\n  if (!REMOTE_PATCHES.get(editor)) {\n    REMOTE_PATCHES.set(editor, [])\n  }\n  return REMOTE_PATCHES.get(editor) || []\n}\n\nexport function createWithUndoRedo(\n  options: Options,\n): (editor: PortableTextSlateEditor) => PortableTextSlateEditor {\n  const {editorActor, blockSchemaType} = options\n\n  return (editor: PortableTextSlateEditor) => {\n    let previousSnapshot: PortableTextBlock[] | undefined = fromSlateValue(\n      editor.children,\n      blockSchemaType.name,\n    )\n    const remotePatches = getRemotePatches(editor)\n\n    options.subscriptions.push(() => {\n      debug('Subscribing to patches')\n      const sub = editorActor.on('patches', ({patches, snapshot}) => {\n        let reset = false\n        patches.forEach((patch) => {\n          if (!reset && patch.origin !== 'local' && remotePatches) {\n            if (patch.type === 'unset' && patch.path.length === 0) {\n              debug(\n                'Someone else cleared the content, resetting undo/redo history',\n              )\n              editor.history = {undos: [], redos: []}\n              remotePatches.splice(0, remotePatches.length)\n              SAVING.set(editor, true)\n              reset = true\n              return\n            }\n            remotePatches.push({\n              patch,\n              time: new Date(),\n              snapshot,\n              previousSnapshot,\n            })\n          }\n        })\n        previousSnapshot = snapshot\n      })\n      return () => {\n        debug('Unsubscribing to patches')\n        sub.unsubscribe()\n      }\n    })\n\n    editor.history = {undos: [], redos: []}\n    const {apply} = editor\n    editor.apply = (op: Operation) => {\n      if (editorActor.getSnapshot().matches({'edit mode': 'read only'})) {\n        apply(op)\n        return\n      }\n\n      /**\n       * We don't want to run any side effects when the editor is processing\n       * remote changes.\n       */\n      if (isChangingRemotely(editor)) {\n        apply(op)\n        return\n      }\n\n      /**\n       * We don't want to run any side effects when the editor is undoing or\n       * redoing operations.\n       */\n      if (isUndoing(editor) || isRedoing(editor)) {\n        apply(op)\n        return\n      }\n\n      const {operations, history} = editor\n      const {undos} = history\n      const step = undos[undos.length - 1]\n      const lastOp =\n        step && step.operations && step.operations[step.operations.length - 1]\n      const overwrite = shouldOverwrite(op, lastOp)\n      const save = isSaving(editor)\n\n      let merge = true\n      if (save) {\n        if (!step) {\n          merge = false\n        } else if (operations.length === 0) {\n          merge = shouldMerge(op, lastOp) || overwrite\n        }\n\n        if (step && merge) {\n          step.operations.push(op)\n        } else {\n          const newStep = {\n            operations: [\n              ...(editor.selection === null\n                ? []\n                : [createSelectOperation(editor)]),\n              op,\n            ],\n            timestamp: new Date(),\n          }\n          undos.push(newStep)\n          debug('Created new undo step', step)\n        }\n\n        while (undos.length > UNDO_STEP_LIMIT) {\n          undos.shift()\n        }\n\n        if (shouldClear(op)) {\n          history.redos = []\n        }\n      }\n      apply(op)\n    }\n\n    editor.undo = () => {\n      if (editorActor.getSnapshot().matches({'edit mode': 'read only'})) {\n        return\n      }\n      const {undos} = editor.history\n      if (undos.length > 0) {\n        const step = undos[undos.length - 1]\n        debug('Undoing', step)\n        if (step.operations.length > 0) {\n          const otherPatches = remotePatches.filter(\n            (item) => item.time >= step.timestamp,\n          )\n          let transformedOperations = step.operations\n          otherPatches.forEach((item) => {\n            transformedOperations = flatten(\n              transformedOperations.map((op) =>\n                transformOperation(\n                  editor,\n                  item.patch,\n                  op,\n                  item.snapshot,\n                  item.previousSnapshot,\n                ),\n              ),\n            )\n          })\n          const reversedOperations = transformedOperations\n            .map(Operation.inverse)\n            .reverse()\n\n          try {\n            Editor.withoutNormalizing(editor, () => {\n              withUndoing(editor, () => {\n                withoutSaving(editor, () => {\n                  reversedOperations.forEach((op) => {\n                    editor.apply(op)\n                  })\n                })\n              })\n            })\n            editor.normalize()\n            editor.onChange()\n          } catch (err) {\n            debug('Could not perform undo step', err)\n            remotePatches.splice(0, remotePatches.length)\n            Transforms.deselect(editor)\n            editor.history = {undos: [], redos: []}\n            SAVING.set(editor, true)\n            setIsUndoing(editor, false)\n            editor.onChange()\n            return\n          }\n          editor.history.redos.push(step)\n          editor.history.undos.pop()\n        }\n      }\n    }\n\n    editor.redo = () => {\n      if (editorActor.getSnapshot().matches({'edit mode': 'read only'})) {\n        return\n      }\n      const {redos} = editor.history\n      if (redos.length > 0) {\n        const step = redos[redos.length - 1]\n        debug('Redoing', step)\n        if (step.operations.length > 0) {\n          const otherPatches = remotePatches.filter(\n            (item) => item.time >= step.timestamp,\n          )\n          let transformedOperations = step.operations\n          otherPatches.forEach((item) => {\n            transformedOperations = flatten(\n              transformedOperations.map((op) =>\n                transformOperation(\n                  editor,\n                  item.patch,\n                  op,\n                  item.snapshot,\n                  item.previousSnapshot,\n                ),\n              ),\n            )\n          })\n          try {\n            Editor.withoutNormalizing(editor, () => {\n              withRedoing(editor, () => {\n                withoutSaving(editor, () => {\n                  transformedOperations.forEach((op) => {\n                    editor.apply(op)\n                  })\n                })\n              })\n            })\n            editor.normalize()\n            editor.onChange()\n          } catch (err) {\n            debug('Could not perform redo step', err)\n            remotePatches.splice(0, remotePatches.length)\n            Transforms.deselect(editor)\n            editor.history = {undos: [], redos: []}\n            SAVING.set(editor, true)\n            setIsRedoing(editor, false)\n            editor.onChange()\n            return\n          }\n          editor.history.undos.push(step)\n          editor.history.redos.pop()\n        }\n      }\n    }\n\n    // Plugin return\n    return editor\n  }\n}\n\n/**\n * This will adjust the operation paths and offsets according to the\n * remote patches by other editors since the step operations was performed.\n */\nfunction transformOperation(\n  editor: PortableTextSlateEditor,\n  patch: Patch,\n  operation: Operation,\n  snapshot: PortableTextBlock[] | undefined,\n  previousSnapshot: PortableTextBlock[] | undefined,\n): Operation[] {\n  if (debugVerbose) {\n    debug(\n      `Adjusting '${operation.type}' operation paths for '${patch.type}' patch`,\n    )\n    debug(`Operation ${JSON.stringify(operation)}`)\n    debug(`Patch ${JSON.stringify(patch)}`)\n  }\n\n  const transformedOperation = {...operation}\n\n  if (patch.type === 'insert' && patch.path.length === 1) {\n    const insertBlockIndex = (snapshot || []).findIndex((blk) =>\n      isEqual({_key: blk._key}, patch.path[0]),\n    )\n    debug(\n      `Adjusting block path (+${patch.items.length}) for '${transformedOperation.type}' operation and patch '${patch.type}'`,\n    )\n    return [\n      adjustBlockPath(\n        transformedOperation,\n        patch.items.length,\n        insertBlockIndex,\n      ),\n    ]\n  }\n\n  if (patch.type === 'unset' && patch.path.length === 1) {\n    const unsetBlockIndex = (previousSnapshot || []).findIndex((blk) =>\n      isEqual({_key: blk._key}, patch.path[0]),\n    )\n    // If this operation is targeting the same block that got removed, return empty\n    if (\n      'path' in transformedOperation &&\n      Array.isArray(transformedOperation.path) &&\n      transformedOperation.path[0] === unsetBlockIndex\n    ) {\n      debug('Skipping transformation that targeted removed block')\n      return []\n    }\n    if (debugVerbose) {\n      debug(`Selection ${JSON.stringify(editor.selection)}`)\n      debug(\n        `Adjusting block path (-1) for '${transformedOperation.type}' operation and patch '${patch.type}'`,\n      )\n    }\n    return [adjustBlockPath(transformedOperation, -1, unsetBlockIndex)]\n  }\n\n  // Someone reset the whole value\n  if (patch.type === 'unset' && patch.path.length === 0) {\n    debug(\n      `Adjusting selection for unset everything patch and ${operation.type} operation`,\n    )\n    return []\n  }\n\n  if (patch.type === 'diffMatchPatch') {\n    const operationTargetBlock = findOperationTargetBlock(\n      editor,\n      transformedOperation,\n    )\n    if (\n      !operationTargetBlock ||\n      !isEqual({_key: operationTargetBlock._key}, patch.path[0])\n    ) {\n      return [transformedOperation]\n    }\n    const diffPatches = parsePatch(patch.value)\n    diffPatches.forEach((diffPatch) => {\n      let adjustOffsetBy = 0\n      let changedOffset = diffPatch.utf8Start1\n      const {diffs} = diffPatch\n      diffs.forEach((diff, index) => {\n        const [diffType, text] = diff\n        if (diffType === DIFF_INSERT) {\n          adjustOffsetBy += text.length\n          changedOffset += text.length\n        } else if (diffType === DIFF_DELETE) {\n          adjustOffsetBy -= text.length\n          changedOffset -= text.length\n        } else if (diffType === DIFF_EQUAL) {\n          // Only up to the point where there are no other changes\n          if (!diffs.slice(index).every(([dType]) => dType === DIFF_EQUAL)) {\n            changedOffset += text.length\n          }\n        }\n      })\n      // Adjust accordingly if someone inserted text in the same node before us\n      if (transformedOperation.type === 'insert_text') {\n        if (changedOffset < transformedOperation.offset) {\n          transformedOperation.offset += adjustOffsetBy\n        }\n      }\n      // Adjust accordingly if someone removed text in the same node before us\n      if (transformedOperation.type === 'remove_text') {\n        if (\n          changedOffset <=\n          transformedOperation.offset - transformedOperation.text.length\n        ) {\n          transformedOperation.offset += adjustOffsetBy\n        }\n      }\n      // Adjust set_selection operation's points to new offset\n      if (transformedOperation.type === 'set_selection') {\n        const currentFocus = transformedOperation.properties?.focus\n          ? {...transformedOperation.properties.focus}\n          : undefined\n        const currentAnchor = transformedOperation?.properties?.anchor\n          ? {...transformedOperation.properties.anchor}\n          : undefined\n        const newFocus = transformedOperation?.newProperties?.focus\n          ? {...transformedOperation.newProperties.focus}\n          : undefined\n        const newAnchor = transformedOperation?.newProperties?.anchor\n          ? {...transformedOperation.newProperties.anchor}\n          : undefined\n        if ((currentFocus && currentAnchor) || (newFocus && newAnchor)) {\n          const points = [currentFocus, currentAnchor, newFocus, newAnchor]\n          points.forEach((point) => {\n            if (point && changedOffset < point.offset) {\n              point.offset += adjustOffsetBy\n            }\n          })\n          if (currentFocus && currentAnchor) {\n            transformedOperation.properties = {\n              focus: currentFocus,\n              anchor: currentAnchor,\n            }\n          }\n          if (newFocus && newAnchor) {\n            transformedOperation.newProperties = {\n              focus: newFocus,\n              anchor: newAnchor,\n            }\n          }\n        }\n      }\n    })\n    return [transformedOperation]\n  }\n  return [transformedOperation]\n}\n/**\n * Adjust the block path for a operation\n */\nfunction adjustBlockPath(\n  operation: Operation,\n  level: number,\n  blockIndex: number,\n): Operation {\n  const transformedOperation = {...operation}\n  if (\n    blockIndex >= 0 &&\n    transformedOperation.type !== 'set_selection' &&\n    Array.isArray(transformedOperation.path) &&\n    transformedOperation.path[0] >= blockIndex + level &&\n    transformedOperation.path[0] + level > -1\n  ) {\n    const newPath = [\n      transformedOperation.path[0] + level,\n      ...transformedOperation.path.slice(1),\n    ]\n    transformedOperation.path = newPath\n  }\n  if (transformedOperation.type === 'set_selection') {\n    const currentFocus = transformedOperation.properties?.focus\n      ? {...transformedOperation.properties.focus}\n      : undefined\n    const currentAnchor = transformedOperation?.properties?.anchor\n      ? {...transformedOperation.properties.anchor}\n      : undefined\n    const newFocus = transformedOperation?.newProperties?.focus\n      ? {...transformedOperation.newProperties.focus}\n      : undefined\n    const newAnchor = transformedOperation?.newProperties?.anchor\n      ? {...transformedOperation.newProperties.anchor}\n      : undefined\n    if ((currentFocus && currentAnchor) || (newFocus && newAnchor)) {\n      const points = [currentFocus, currentAnchor, newFocus, newAnchor]\n      points.forEach((point) => {\n        if (\n          point &&\n          point.path[0] >= blockIndex + level &&\n          point.path[0] + level > -1\n        ) {\n          point.path = [point.path[0] + level, ...point.path.slice(1)]\n        }\n      })\n      if (currentFocus && currentAnchor) {\n        transformedOperation.properties = {\n          focus: currentFocus,\n          anchor: currentAnchor,\n        }\n      }\n      if (newFocus && newAnchor) {\n        transformedOperation.newProperties = {\n          focus: newFocus,\n          anchor: newAnchor,\n        }\n      }\n    }\n  }\n  //   // Assign fresh point objects (we don't want to mutate the original ones)\n  return transformedOperation\n}\n\n// Helper functions for editor.apply above\n\nconst shouldMerge = (op: Operation, prev: Operation | undefined): boolean => {\n  if (op.type === 'set_selection') {\n    return true\n  }\n\n  // Text input\n  if (\n    prev &&\n    op.type === 'insert_text' &&\n    prev.type === 'insert_text' &&\n    op.offset === prev.offset + prev.text.length &&\n    Path.equals(op.path, prev.path) &&\n    op.text !== ' ' // Tokenize between words\n  ) {\n    return true\n  }\n\n  // Text deletion\n  if (\n    prev &&\n    op.type === 'remove_text' &&\n    prev.type === 'remove_text' &&\n    op.offset + op.text.length === prev.offset &&\n    Path.equals(op.path, prev.path)\n  ) {\n    return true\n  }\n\n  // Don't merge\n  return false\n}\n\nconst shouldOverwrite = (\n  op: Operation,\n  prev: Operation | undefined,\n): boolean => {\n  if (prev && op.type === 'set_selection' && prev.type === 'set_selection') {\n    return true\n  }\n\n  return false\n}\n\nconst shouldClear = (op: Operation): boolean => {\n  if (op.type === 'set_selection') {\n    return false\n  }\n\n  return true\n}\n\nexport function withoutSaving(editor: Editor, fn: () => void): void {\n  const prev = isSaving(editor)\n  SAVING.set(editor, false)\n  fn()\n  SAVING.set(editor, prev)\n}\n\nfunction createSelectOperation(editor: Editor): SelectionOperation {\n  return {\n    type: 'set_selection',\n    properties: {...editor.selection},\n    newProperties: {...editor.selection},\n  }\n}\n\nfunction findOperationTargetBlock(\n  editor: PortableTextSlateEditor,\n  operation: Operation,\n): Descendant | undefined {\n  let block: Descendant | undefined\n  if (operation.type === 'set_selection' && editor.selection) {\n    block = editor.children[editor.selection.focus.path[0]]\n  } else if ('path' in operation) {\n    block = editor.children[operation.path[0]]\n  }\n  return block\n}\n","import type {Patch} from '@portabletext/patches'\nimport type {PortableTextBlock} from '@sanity/types'\nimport {isEqual} from 'lodash'\nimport {Editor, Text, Transforms, type Descendant, type Node} from 'slate'\nimport {\n  assertEvent,\n  assign,\n  emit,\n  fromCallback,\n  setup,\n  type AnyEventObject,\n  type CallbackLogicFunction,\n} from 'xstate'\nimport type {PickFromUnion} from '../type-utils'\nimport type {\n  InvalidValueResolution,\n  PortableTextSlateEditor,\n} from '../types/editor'\nimport {debugWithName} from '../utils/debug'\nimport {validateValue} from '../utils/validateValue'\nimport {toSlateValue, VOID_CHILD_KEY} from '../utils/values'\nimport {isChangingRemotely, withRemoteChanges} from '../utils/withChanges'\nimport {withoutPatching} from '../utils/withoutPatching'\nimport type {EditorSchema} from './define-schema'\nimport {withoutSaving} from './plugins/createWithUndoRedo'\n\ntype SyncValueEvent =\n  | {\n      type: 'patch'\n      patch: Patch\n    }\n  | {\n      type: 'invalid value'\n      resolution: InvalidValueResolution | null\n      value: Array<PortableTextBlock> | undefined\n    }\n  | {\n      type: 'value changed'\n      value: Array<PortableTextBlock> | undefined\n    }\n  | {\n      type: 'done syncing'\n      value: Array<PortableTextBlock> | undefined\n    }\n\nconst syncValueCallback: CallbackLogicFunction<\n  AnyEventObject,\n  SyncValueEvent,\n  {\n    context: {\n      keyGenerator: () => string\n      previousValue: Array<PortableTextBlock> | undefined\n      readOnly: boolean\n      schema: EditorSchema\n    }\n    slateEditor: PortableTextSlateEditor\n    streamBlocks: boolean\n    value: Array<PortableTextBlock> | undefined\n  }\n> = ({sendBack, input}) => {\n  updateValue({\n    context: input.context,\n    sendBack,\n    slateEditor: input.slateEditor,\n    value: input.value,\n    streamBlocks: input.streamBlocks,\n  })\n}\n\nconst syncValueLogic = fromCallback(syncValueCallback)\n\n/**\n * Sync value with the editor state\n *\n * Normally nothing here should apply, and the editor and the real world are perfectly aligned.\n *\n * Inconsistencies could happen though, so we need to check the editor state when the value changes.\n *\n * For performance reasons, it makes sense to also do the content validation here, as we already\n * iterate over the value and can validate only the new content that is actually changed.\n *\n * @internal\n */\nexport const syncMachine = setup({\n  types: {\n    context: {} as {\n      initialValueSynced: boolean\n      isProcessingLocalChanges: boolean\n      keyGenerator: () => string\n      schema: EditorSchema\n      readOnly: boolean\n      slateEditor: PortableTextSlateEditor\n      pendingValue: Array<PortableTextBlock> | undefined\n      previousValue: Array<PortableTextBlock> | undefined\n    },\n    input: {} as {\n      keyGenerator: () => string\n      schema: EditorSchema\n      readOnly: boolean\n      slateEditor: PortableTextSlateEditor\n    },\n    events: {} as\n      | {\n          type: 'has pending patches'\n        }\n      | {\n          type: 'mutation'\n        }\n      | {\n          type: 'update value'\n          value: Array<PortableTextBlock> | undefined\n        }\n      | {\n          type: 'update readOnly'\n          readOnly: boolean\n        }\n      | SyncValueEvent,\n    emitted: {} as\n      | PickFromUnion<\n          SyncValueEvent,\n          'type',\n          'invalid value' | 'patch' | 'value changed'\n        >\n      | {type: 'done syncing initial value'},\n  },\n  actions: {\n    'assign initial value synced': assign({\n      initialValueSynced: true,\n    }),\n    'assign readOnly': assign({\n      readOnly: ({event}) => {\n        assertEvent(event, 'update readOnly')\n        return event.readOnly\n      },\n    }),\n    'assign pending value': assign({\n      pendingValue: ({event}) => {\n        assertEvent(event, 'update value')\n        return event.value\n      },\n    }),\n    'clear pending value': assign({\n      pendingValue: undefined,\n    }),\n    'assign previous value': assign({\n      previousValue: ({event}) => {\n        assertEvent(event, 'done syncing')\n        return event.value\n      },\n    }),\n    'emit done syncing initial value': emit({\n      type: 'done syncing initial value',\n    }),\n  },\n  guards: {\n    'initial value synced': ({context}) => context.initialValueSynced,\n    'is busy': ({context}) => {\n      return (\n        !context.readOnly &&\n        (context.isProcessingLocalChanges ||\n          (isChangingRemotely(context.slateEditor) ?? false))\n      )\n    },\n    'value changed while syncing': ({context, event}) => {\n      assertEvent(event, 'done syncing')\n      return context.pendingValue !== event.value\n    },\n    'pending value equals previous value': ({context}) =>\n      !(\n        context.previousValue === undefined &&\n        context.pendingValue === undefined\n      ) && isEqual(context.pendingValue, context.previousValue),\n  },\n  actors: {\n    'sync value': syncValueLogic,\n  },\n}).createMachine({\n  id: 'sync',\n  context: ({input}) => ({\n    initialValueSynced: false,\n    isProcessingLocalChanges: false,\n    keyGenerator: input.keyGenerator,\n    schema: input.schema,\n    readOnly: input.readOnly,\n    slateEditor: input.slateEditor,\n    pendingValue: undefined,\n    previousValue: undefined,\n  }),\n  on: {\n    'has pending patches': {\n      actions: assign({\n        isProcessingLocalChanges: true,\n      }),\n    },\n    'mutation': {\n      actions: assign({\n        isProcessingLocalChanges: false,\n      }),\n    },\n    'update readOnly': {\n      actions: ['assign readOnly'],\n    },\n  },\n  type: 'parallel',\n  states: {\n    'setting up': {\n      initial: 'syncing initial value',\n      states: {\n        'syncing initial value': {\n          always: {\n            guard: 'initial value synced',\n            target: 'done syncing initial value',\n          },\n        },\n        'done syncing initial value': {\n          entry: ['emit done syncing initial value'],\n          type: 'final',\n        },\n      },\n    },\n    'syncing': {\n      initial: 'idle',\n      states: {\n        idle: {\n          on: {\n            'update value': [\n              {\n                guard: 'is busy',\n                target: 'busy',\n                actions: ['assign pending value'],\n              },\n              {\n                target: 'syncing',\n                actions: ['assign pending value'],\n              },\n            ],\n          },\n        },\n        busy: {\n          after: {\n            1000: [\n              {\n                guard: 'is busy',\n                reenter: true,\n              },\n              {\n                target: 'syncing',\n              },\n            ],\n          },\n          on: {\n            'update value': [\n              {\n                actions: ['assign pending value'],\n              },\n            ],\n          },\n        },\n        syncing: {\n          always: {\n            guard: 'pending value equals previous value',\n            target: 'idle',\n            actions: ['clear pending value', 'assign initial value synced'],\n          },\n          invoke: {\n            src: 'sync value',\n            id: 'sync value',\n            input: ({context}) => {\n              return {\n                context: {\n                  keyGenerator: context.keyGenerator,\n                  previousValue: context.previousValue,\n                  readOnly: context.readOnly,\n                  schema: context.schema,\n                },\n                slateEditor: context.slateEditor,\n                streamBlocks: !context.initialValueSynced,\n                value: context.pendingValue,\n              }\n            },\n          },\n          on: {\n            'update value': {\n              actions: ['assign pending value'],\n            },\n            'patch': {\n              actions: [emit(({event}) => event)],\n            },\n            'invalid value': {\n              actions: [emit(({event}) => event)],\n            },\n            'value changed': {\n              actions: [emit(({event}) => event)],\n            },\n            'done syncing': [\n              {\n                guard: 'value changed while syncing',\n                actions: [\n                  'assign previous value',\n                  'assign initial value synced',\n                ],\n                reenter: true,\n              },\n              {\n                target: 'idle',\n                actions: [\n                  'clear pending value',\n                  'assign previous value',\n                  'assign initial value synced',\n                ],\n              },\n            ],\n          },\n        },\n      },\n    },\n  },\n})\n\nconst debug = debugWithName('hook:useSyncValue')\n\nasync function updateValue({\n  context,\n  sendBack,\n  slateEditor,\n  streamBlocks,\n  value,\n}: {\n  context: {\n    keyGenerator: () => string\n    previousValue: Array<PortableTextBlock> | undefined\n    readOnly: boolean\n    schema: EditorSchema\n  }\n  sendBack: (event: SyncValueEvent) => void\n  slateEditor: PortableTextSlateEditor\n  streamBlocks: boolean\n  value: PortableTextBlock[] | undefined\n}) {\n  let isChanged = false\n  let isValid = true\n\n  const hadSelection = !!slateEditor.selection\n\n  // If empty value, remove everything in the editor and insert a placeholder block\n  if (!value || value.length === 0) {\n    debug('Value is empty')\n    Editor.withoutNormalizing(slateEditor, () => {\n      withoutSaving(slateEditor, () => {\n        withoutPatching(slateEditor, () => {\n          if (hadSelection) {\n            Transforms.deselect(slateEditor)\n          }\n          const childrenLength = slateEditor.children.length\n          slateEditor.children.forEach((_, index) => {\n            Transforms.removeNodes(slateEditor, {\n              at: [childrenLength - 1 - index],\n            })\n          })\n          Transforms.insertNodes(\n            slateEditor,\n            slateEditor.pteCreateTextBlock({decorators: []}),\n            {at: [0]},\n          )\n          // Add a new selection in the top of the document\n          if (hadSelection) {\n            Transforms.select(slateEditor, [0, 0])\n          }\n        })\n      })\n    })\n    isChanged = true\n  }\n  // Remove, replace or add nodes according to what is changed.\n  if (value && value.length > 0) {\n    const slateValueFromProps = toSlateValue(value, {\n      schemaTypes: context.schema,\n    })\n\n    await new Promise<void>((resolve) => {\n      Editor.withoutNormalizing(slateEditor, () => {\n        withRemoteChanges(slateEditor, () => {\n          withoutPatching(slateEditor, async () => {\n            const childrenLength = slateEditor.children.length\n\n            // Remove blocks that have become superfluous\n            if (slateValueFromProps.length < childrenLength) {\n              for (\n                let i = childrenLength - 1;\n                i > slateValueFromProps.length - 1;\n                i--\n              ) {\n                Transforms.removeNodes(slateEditor, {\n                  at: [i],\n                })\n              }\n              isChanged = true\n            }\n\n            for await (const [currentBlock, currentBlockIndex] of getBlocks({\n              slateValue: slateValueFromProps,\n              streamBlocks,\n            })) {\n              // Go through all of the blocks and see if they need to be updated\n              const {blockChanged, blockValid} = syncBlock({\n                context,\n                sendBack,\n                block: currentBlock,\n                index: currentBlockIndex,\n                slateEditor,\n                value,\n              })\n              isChanged = blockChanged || isChanged\n              isValid = isValid && blockValid\n            }\n\n            resolve()\n          })\n        })\n      })\n    })\n  }\n\n  if (!isValid) {\n    debug('Invalid value, returning')\n    sendBack({type: 'done syncing', value})\n    return\n  }\n\n  if (isChanged) {\n    debug('Server value changed, syncing editor')\n    try {\n      slateEditor.onChange()\n    } catch (err) {\n      console.error(err)\n      sendBack({\n        type: 'invalid value',\n        resolution: null,\n        value,\n      })\n      sendBack({type: 'done syncing', value})\n      return\n    }\n    if (hadSelection && !slateEditor.selection) {\n      Transforms.select(slateEditor, {\n        anchor: {path: [0, 0], offset: 0},\n        focus: {path: [0, 0], offset: 0},\n      })\n      slateEditor.onChange()\n    }\n    sendBack({type: 'value changed', value})\n  } else {\n    debug('Server value and editor value is equal, no need to sync.')\n  }\n\n  sendBack({type: 'done syncing', value})\n}\n\nasync function* getBlocks({\n  slateValue,\n  streamBlocks,\n}: {\n  slateValue: Array<Descendant>\n  streamBlocks: boolean\n}) {\n  let index = 0\n  for await (const block of slateValue) {\n    if (streamBlocks) {\n      await new Promise<void>((resolve) => setTimeout(resolve, 0))\n    }\n    yield [block, index] as const\n    index++\n  }\n}\n\nfunction syncBlock({\n  context,\n  sendBack,\n  block,\n  index,\n  slateEditor,\n  value,\n}: {\n  context: {\n    keyGenerator: () => string\n    previousValue: Array<PortableTextBlock> | undefined\n    readOnly: boolean\n    schema: EditorSchema\n  }\n  sendBack: (event: SyncValueEvent) => void\n  block: Descendant\n  index: number\n  slateEditor: PortableTextSlateEditor\n  value: Array<PortableTextBlock>\n}) {\n  let blockChanged = false\n  let blockValid = true\n  const currentBlock = block\n  const currentBlockIndex = index\n  const oldBlock = slateEditor.children[currentBlockIndex]\n  const hasChanges = oldBlock && !isEqual(currentBlock, oldBlock)\n\n  Editor.withoutNormalizing(slateEditor, () => {\n    withRemoteChanges(slateEditor, () => {\n      withoutPatching(slateEditor, () => {\n        if (hasChanges && blockValid) {\n          const validationValue = [value[currentBlockIndex]]\n          const validation = validateValue(\n            validationValue,\n            context.schema,\n            context.keyGenerator,\n          )\n          // Resolve validations that can be resolved automatically, without involving the user (but only if the value was changed)\n          if (\n            !validation.valid &&\n            validation.resolution?.autoResolve &&\n            validation.resolution?.patches.length > 0\n          ) {\n            // Only apply auto resolution if the value has been populated before and is different from the last one.\n            if (\n              !context.readOnly &&\n              context.previousValue &&\n              context.previousValue !== value\n            ) {\n              // Give a console warning about the fact that it did an auto resolution\n              console.warn(\n                `${validation.resolution.action} for block with _key '${validationValue[0]._key}'. ${validation.resolution?.description}`,\n              )\n              validation.resolution.patches.forEach((patch) => {\n                sendBack({type: 'patch', patch})\n              })\n            }\n          }\n          if (validation.valid || validation.resolution?.autoResolve) {\n            if (oldBlock._key === currentBlock._key) {\n              if (debug.enabled) debug('Updating block', oldBlock, currentBlock)\n              _updateBlock(\n                slateEditor,\n                currentBlock,\n                oldBlock,\n                currentBlockIndex,\n              )\n            } else {\n              if (debug.enabled)\n                debug('Replacing block', oldBlock, currentBlock)\n              _replaceBlock(slateEditor, currentBlock, currentBlockIndex)\n            }\n            blockChanged = true\n          } else {\n            sendBack({\n              type: 'invalid value',\n              resolution: validation.resolution,\n              value,\n            })\n            blockValid = false\n          }\n        }\n\n        if (!oldBlock && blockValid) {\n          const validationValue = [value[currentBlockIndex]]\n          const validation = validateValue(\n            validationValue,\n            context.schema,\n            context.keyGenerator,\n          )\n          if (debug.enabled)\n            debug(\n              'Validating and inserting new block in the end of the value',\n              currentBlock,\n            )\n          if (validation.valid || validation.resolution?.autoResolve) {\n            Transforms.insertNodes(slateEditor, currentBlock, {\n              at: [currentBlockIndex],\n            })\n          } else {\n            debug('Invalid', validation)\n            sendBack({\n              type: 'invalid value',\n              resolution: validation.resolution,\n              value,\n            })\n            blockValid = false\n          }\n        }\n      })\n    })\n  })\n\n  return {blockChanged, blockValid}\n}\n\n/**\n * This code is moved out of the above algorithm to keep complexity down.\n * @internal\n */\nfunction _replaceBlock(\n  slateEditor: PortableTextSlateEditor,\n  currentBlock: Descendant,\n  currentBlockIndex: number,\n) {\n  // While replacing the block and the current selection focus is on the replaced block,\n  // temporarily deselect the editor then optimistically try to restore the selection afterwards.\n  const currentSelection = slateEditor.selection\n  const selectionFocusOnBlock =\n    currentSelection && currentSelection.focus.path[0] === currentBlockIndex\n  if (selectionFocusOnBlock) {\n    Transforms.deselect(slateEditor)\n  }\n  Transforms.removeNodes(slateEditor, {at: [currentBlockIndex]})\n  Transforms.insertNodes(slateEditor, currentBlock, {at: [currentBlockIndex]})\n  slateEditor.onChange()\n  if (selectionFocusOnBlock) {\n    Transforms.select(slateEditor, currentSelection)\n  }\n}\n\n/**\n * This code is moved out of the above algorithm to keep complexity down.\n * @internal\n */\nfunction _updateBlock(\n  slateEditor: PortableTextSlateEditor,\n  currentBlock: Descendant,\n  oldBlock: Descendant,\n  currentBlockIndex: number,\n) {\n  // Update the root props on the block\n  Transforms.setNodes(slateEditor, currentBlock as Partial<Node>, {\n    at: [currentBlockIndex],\n  })\n  // Text block's need to have their children updated as well (setNode does not target a node's children)\n  if (\n    slateEditor.isTextBlock(currentBlock) &&\n    slateEditor.isTextBlock(oldBlock)\n  ) {\n    const oldBlockChildrenLength = oldBlock.children.length\n    if (currentBlock.children.length < oldBlockChildrenLength) {\n      // Remove any children that have become superfluous\n      Array.from(\n        Array(oldBlockChildrenLength - currentBlock.children.length),\n      ).forEach((_, index) => {\n        const childIndex = oldBlockChildrenLength - 1 - index\n        if (childIndex > 0) {\n          debug('Removing child')\n          Transforms.removeNodes(slateEditor, {\n            at: [currentBlockIndex, childIndex],\n          })\n        }\n      })\n    }\n    currentBlock.children.forEach(\n      (currentBlockChild, currentBlockChildIndex) => {\n        const oldBlockChild = oldBlock.children[currentBlockChildIndex]\n        const isChildChanged = !isEqual(currentBlockChild, oldBlockChild)\n        const isTextChanged = !isEqual(\n          currentBlockChild.text,\n          oldBlockChild?.text,\n        )\n        const path = [currentBlockIndex, currentBlockChildIndex]\n        if (isChildChanged) {\n          // Update if this is the same child\n          if (currentBlockChild._key === oldBlockChild?._key) {\n            debug('Updating changed child', currentBlockChild, oldBlockChild)\n            Transforms.setNodes(\n              slateEditor,\n              currentBlockChild as Partial<Node>,\n              {\n                at: path,\n              },\n            )\n            const isSpanNode =\n              Text.isText(currentBlockChild) &&\n              currentBlockChild._type === 'span' &&\n              Text.isText(oldBlockChild) &&\n              oldBlockChild._type === 'span'\n            if (isSpanNode && isTextChanged) {\n              Transforms.delete(slateEditor, {\n                at: {\n                  focus: {path, offset: 0},\n                  anchor: {path, offset: oldBlockChild.text.length},\n                },\n              })\n              Transforms.insertText(slateEditor, currentBlockChild.text, {\n                at: path,\n              })\n              slateEditor.onChange()\n            } else if (!isSpanNode) {\n              // If it's a inline block, also update the void text node key\n              debug('Updating changed inline object child', currentBlockChild)\n              Transforms.setNodes(\n                slateEditor,\n                {_key: VOID_CHILD_KEY},\n                {\n                  at: [...path, 0],\n                  voids: true,\n                },\n              )\n            }\n            // Replace the child if _key's are different\n          } else if (oldBlockChild) {\n            debug('Replacing child', currentBlockChild)\n            Transforms.removeNodes(slateEditor, {\n              at: [currentBlockIndex, currentBlockChildIndex],\n            })\n            Transforms.insertNodes(slateEditor, currentBlockChild as Node, {\n              at: [currentBlockIndex, currentBlockChildIndex],\n            })\n            slateEditor.onChange()\n            // Insert it if it didn't exist before\n          } else if (!oldBlockChild) {\n            debug('Inserting new child', currentBlockChild)\n            Transforms.insertNodes(slateEditor, currentBlockChild as Node, {\n              at: [currentBlockIndex, currentBlockChildIndex],\n            })\n            slateEditor.onChange()\n          }\n        }\n      },\n    )\n  }\n}\n","import {useActorRef, useSelector} from '@xstate/react'\nimport {useEffect} from 'react'\nimport type {PortableTextSlateEditor} from '../../types/editor'\nimport {debugWithName} from '../../utils/debug'\nimport type {EditorActor} from '../editor-machine'\nimport {mutationMachine} from '../mutation-machine'\nimport {syncMachine} from '../sync-machine'\n\nconst debug = debugWithName('component:PortableTextEditor:Synchronizer')\n\n/**\n * @internal\n */\nexport interface SynchronizerProps {\n  editorActor: EditorActor\n  slateEditor: PortableTextSlateEditor\n}\n\n/**\n * Synchronizes the server value with the editor, and provides various contexts for the editor state.\n * @internal\n */\nexport function Synchronizer(props: SynchronizerProps) {\n  const {editorActor, slateEditor} = props\n\n  const value = useSelector(props.editorActor, (s) => s.context.value)\n  const readOnly = useSelector(props.editorActor, (s) =>\n    s.matches({'edit mode': 'read only'}),\n  )\n  const syncActorRef = useActorRef(syncMachine, {\n    input: {\n      keyGenerator: props.editorActor.getSnapshot().context.keyGenerator,\n      readOnly: props.editorActor\n        .getSnapshot()\n        .matches({'edit mode': 'read only'}),\n      schema: props.editorActor.getSnapshot().context.schema,\n      slateEditor,\n    },\n  })\n  const mutationActorRef = useActorRef(mutationMachine, {\n    input: {\n      schema: editorActor.getSnapshot().context.schema,\n      slateEditor,\n    },\n  })\n\n  useEffect(() => {\n    const subscription = mutationActorRef.on('*', (event) => {\n      if (event.type === 'has pending patches') {\n        syncActorRef.send({type: 'has pending patches'})\n      }\n      if (event.type === 'mutation') {\n        syncActorRef.send({type: 'mutation'})\n        editorActor.send({\n          type: 'mutation',\n          patches: event.patches,\n          snapshot: event.snapshot,\n          value: event.snapshot,\n        })\n      }\n    })\n\n    return () => {\n      subscription.unsubscribe()\n    }\n  }, [mutationActorRef, syncActorRef, editorActor])\n\n  useEffect(() => {\n    const subscription = syncActorRef.on('*', (event) => {\n      props.editorActor.send(event)\n    })\n\n    return () => {\n      subscription.unsubscribe()\n    }\n  }, [props.editorActor, syncActorRef])\n\n  useEffect(() => {\n    syncActorRef.send({type: 'update readOnly', readOnly})\n  }, [syncActorRef, readOnly])\n\n  useEffect(() => {\n    debug('Value from props changed, syncing new value')\n    syncActorRef.send({type: 'update value', value})\n  }, [syncActorRef, value])\n\n  // Subscribe to, and handle changes from the editor\n  useEffect(() => {\n    debug('Subscribing to patch events')\n    const sub = editorActor.on('patch', (event) => {\n      mutationActorRef.send(event)\n    })\n    return () => {\n      debug('Unsubscribing to patch events')\n      sub.unsubscribe()\n    }\n  }, [editorActor, mutationActorRef, slateEditor])\n\n  return null\n}\n\nSynchronizer.displayName = 'Synchronizer'\n","import {\n  diffMatchPatch,\n  insert,\n  set,\n  setIfMissing,\n  unset,\n  type InsertPosition,\n  type Patch,\n} from '@portabletext/patches'\nimport type {Path, PortableTextSpan, PortableTextTextBlock} from '@sanity/types'\nimport {get, isUndefined, omitBy} from 'lodash'\nimport {\n  Text,\n  type Descendant,\n  type InsertNodeOperation,\n  type InsertTextOperation,\n  type MergeNodeOperation,\n  type MoveNodeOperation,\n  type RemoveNodeOperation,\n  type RemoveTextOperation,\n  type SetNodeOperation,\n  type SplitNodeOperation,\n} from 'slate'\nimport type {PatchFunctions} from '../editor/plugins/createWithPatches'\nimport type {\n  PortableTextMemberSchemaTypes,\n  PortableTextSlateEditor,\n} from '../types/editor'\nimport {debugWithName} from './debug'\nimport {fromSlateValue} from './values'\n\nconst debug = debugWithName('operationToPatches')\n\nexport function createOperationToPatches(\n  types: PortableTextMemberSchemaTypes,\n): PatchFunctions {\n  const textBlockName = types.block.name\n  function insertTextPatch(\n    editor: PortableTextSlateEditor,\n    operation: InsertTextOperation,\n    beforeValue: Descendant[],\n  ) {\n    if (debug.enabled) {\n      debug('Operation', JSON.stringify(operation, null, 2))\n    }\n    const block =\n      editor.isTextBlock(editor.children[operation.path[0]]) &&\n      editor.children[operation.path[0]]\n    if (!block) {\n      throw new Error('Could not find block')\n    }\n    const textChild =\n      editor.isTextBlock(block) &&\n      editor.isTextSpan(block.children[operation.path[1]]) &&\n      (block.children[operation.path[1]] as PortableTextSpan)\n    if (!textChild) {\n      throw new Error('Could not find child')\n    }\n    const path: Path = [\n      {_key: block._key},\n      'children',\n      {_key: textChild._key},\n      'text',\n    ]\n    const prevBlock = beforeValue[operation.path[0]]\n    const prevChild =\n      editor.isTextBlock(prevBlock) && prevBlock.children[operation.path[1]]\n    const prevText = editor.isTextSpan(prevChild) ? prevChild.text : ''\n    const patch = diffMatchPatch(prevText, textChild.text, path)\n    return patch.value.length ? [patch] : []\n  }\n\n  function removeTextPatch(\n    editor: PortableTextSlateEditor,\n    operation: RemoveTextOperation,\n    beforeValue: Descendant[],\n  ) {\n    const block = editor && editor.children[operation.path[0]]\n    if (!block) {\n      throw new Error('Could not find block')\n    }\n    const child =\n      (editor.isTextBlock(block) && block.children[operation.path[1]]) ||\n      undefined\n    const textChild: PortableTextSpan | undefined = editor.isTextSpan(child)\n      ? child\n      : undefined\n    if (child && !textChild) {\n      throw new Error('Expected span')\n    }\n    if (!textChild) {\n      throw new Error('Could not find child')\n    }\n    const path: Path = [\n      {_key: block._key},\n      'children',\n      {_key: textChild._key},\n      'text',\n    ]\n    const beforeBlock = beforeValue[operation.path[0]]\n    const prevTextChild =\n      editor.isTextBlock(beforeBlock) && beforeBlock.children[operation.path[1]]\n    const prevText = editor.isTextSpan(prevTextChild) && prevTextChild.text\n    const patch = diffMatchPatch(prevText || '', textChild.text, path)\n    return patch.value ? [patch] : []\n  }\n\n  function setNodePatch(\n    editor: PortableTextSlateEditor,\n    operation: SetNodeOperation,\n  ) {\n    if (operation.path.length === 1) {\n      const block = editor.children[operation.path[0]]\n      if (typeof block._key !== 'string') {\n        throw new Error('Expected block to have a _key')\n      }\n      const setNode = omitBy(\n        {...editor.children[operation.path[0]], ...operation.newProperties},\n        isUndefined,\n      ) as unknown as Descendant\n      return [\n        set(fromSlateValue([setNode], textBlockName)[0], [{_key: block._key}]),\n      ]\n    } else if (operation.path.length === 2) {\n      const block = editor.children[operation.path[0]]\n      if (editor.isTextBlock(block)) {\n        const child = block.children[operation.path[1]]\n        if (child) {\n          const blockKey = block._key\n          const childKey = child._key\n          const patches: Patch[] = []\n          const keys = Object.keys(operation.newProperties)\n          keys.forEach((keyName) => {\n            // Special case for setting _key on a child. We have to target it by index and not the _key.\n            if (keys.length === 1 && keyName === '_key') {\n              const val = get(operation.newProperties, keyName)\n              patches.push(\n                set(val, [\n                  {_key: blockKey},\n                  'children',\n                  block.children.indexOf(child),\n                  keyName,\n                ]),\n              )\n            } else {\n              const val = get(operation.newProperties, keyName)\n              patches.push(\n                set(val, [\n                  {_key: blockKey},\n                  'children',\n                  {_key: childKey},\n                  keyName,\n                ]),\n              )\n            }\n          })\n          return patches\n        }\n        throw new Error('Could not find a valid child')\n      }\n      throw new Error('Could not find a valid block')\n    } else {\n      throw new Error(\n        `Unexpected path encountered: ${JSON.stringify(operation.path)}`,\n      )\n    }\n  }\n\n  function insertNodePatch(\n    editor: PortableTextSlateEditor,\n    operation: InsertNodeOperation,\n    beforeValue: Descendant[],\n  ): Patch[] {\n    const block = beforeValue[operation.path[0]]\n    const isTextBlock = editor.isTextBlock(block)\n    if (operation.path.length === 1) {\n      const position = operation.path[0] === 0 ? 'before' : 'after'\n      const beforeBlock = beforeValue[operation.path[0] - 1]\n      const targetKey =\n        operation.path[0] === 0 ? block?._key : beforeBlock?._key\n      if (targetKey) {\n        return [\n          insert(\n            [fromSlateValue([operation.node as Descendant], textBlockName)[0]],\n            position,\n            [{_key: targetKey}],\n          ),\n        ]\n      }\n      return [\n        setIfMissing(beforeValue, []),\n        insert(\n          [fromSlateValue([operation.node as Descendant], textBlockName)[0]],\n          'before',\n          [operation.path[0]],\n        ),\n      ]\n    } else if (\n      isTextBlock &&\n      operation.path.length === 2 &&\n      editor.children[operation.path[0]]\n    ) {\n      const position =\n        block.children.length === 0 || !block.children[operation.path[1] - 1]\n          ? 'before'\n          : 'after'\n      const node = {...operation.node} as Descendant\n      if (!node._type && Text.isText(node)) {\n        node._type = 'span'\n        node.marks = []\n      }\n      const blk = fromSlateValue(\n        [\n          {\n            _key: 'bogus',\n            _type: textBlockName,\n            children: [node],\n          },\n        ],\n        textBlockName,\n      )[0] as PortableTextTextBlock\n      const child = blk.children[0]\n      return [\n        insert([child], position, [\n          {_key: block._key},\n          'children',\n          block.children.length <= 1 || !block.children[operation.path[1] - 1]\n            ? 0\n            : {_key: block.children[operation.path[1] - 1]._key},\n        ]),\n      ]\n    }\n    debug(\n      'Something was inserted into a void block. Not producing editor patches.',\n    )\n    return []\n  }\n\n  function splitNodePatch(\n    editor: PortableTextSlateEditor,\n    operation: SplitNodeOperation,\n    beforeValue: Descendant[],\n  ) {\n    const patches: Patch[] = []\n    const splitBlock = editor.children[operation.path[0]]\n    if (!editor.isTextBlock(splitBlock)) {\n      throw new Error(\n        `Block with path ${JSON.stringify(\n          operation.path[0],\n        )} is not a text block and can't be split`,\n      )\n    }\n    if (operation.path.length === 1) {\n      const oldBlock = beforeValue[operation.path[0]]\n      if (editor.isTextBlock(oldBlock)) {\n        const targetValue = fromSlateValue(\n          [editor.children[operation.path[0] + 1]],\n          textBlockName,\n        )[0]\n        if (targetValue) {\n          patches.push(\n            insert([targetValue], 'after', [{_key: splitBlock._key}]),\n          )\n          const spansToUnset = oldBlock.children.slice(operation.position)\n          spansToUnset.forEach((span) => {\n            const path = [{_key: oldBlock._key}, 'children', {_key: span._key}]\n            patches.push(unset(path))\n          })\n        }\n      }\n      return patches\n    }\n    if (operation.path.length === 2) {\n      const splitSpan = splitBlock.children[operation.path[1]]\n      if (editor.isTextSpan(splitSpan)) {\n        const targetSpans = (\n          fromSlateValue(\n            [\n              {\n                ...splitBlock,\n                children: splitBlock.children.slice(\n                  operation.path[1] + 1,\n                  operation.path[1] + 2,\n                ),\n              } as Descendant,\n            ],\n            textBlockName,\n          )[0] as PortableTextTextBlock\n        ).children\n\n        patches.push(\n          insert(targetSpans, 'after', [\n            {_key: splitBlock._key},\n            'children',\n            {_key: splitSpan._key},\n          ]),\n        )\n        patches.push(\n          set(splitSpan.text, [\n            {_key: splitBlock._key},\n            'children',\n            {_key: splitSpan._key},\n            'text',\n          ]),\n        )\n      }\n      return patches\n    }\n    return patches\n  }\n\n  function removeNodePatch(\n    editor: PortableTextSlateEditor,\n    operation: RemoveNodeOperation,\n    beforeValue: Descendant[],\n  ) {\n    const block = beforeValue[operation.path[0]]\n    if (operation.path.length === 1) {\n      // Remove a single block\n      if (block && block._key) {\n        return [unset([{_key: block._key}])]\n      }\n      throw new Error('Block not found')\n    } else if (editor.isTextBlock(block) && operation.path.length === 2) {\n      const spanToRemove = block.children[operation.path[1]]\n\n      if (spanToRemove) {\n        const spansMatchingKey = block.children.filter(\n          (span) => span._key === operation.node._key,\n        )\n\n        if (spansMatchingKey.length > 1) {\n          console.warn(\n            `Multiple spans have \\`_key\\` ${operation.node._key}. It's ambiguous which one to remove.`,\n            JSON.stringify(block, null, 2),\n          )\n          return []\n        }\n\n        return [\n          unset([{_key: block._key}, 'children', {_key: spanToRemove._key}]),\n        ]\n      }\n      debug('Span not found in editor trying to remove node')\n      return []\n    } else {\n      debug('Not creating patch inside object block')\n      return []\n    }\n  }\n\n  function mergeNodePatch(\n    editor: PortableTextSlateEditor,\n    operation: MergeNodeOperation,\n    beforeValue: Descendant[],\n  ) {\n    const patches: Patch[] = []\n\n    const block = beforeValue[operation.path[0]]\n    const updatedBlock = editor.children[operation.path[0]]\n\n    if (operation.path.length === 1) {\n      if (block?._key) {\n        const newBlock = fromSlateValue(\n          [editor.children[operation.path[0] - 1]],\n          textBlockName,\n        )[0]\n        patches.push(set(newBlock, [{_key: newBlock._key}]))\n        patches.push(unset([{_key: block._key}]))\n      } else {\n        throw new Error('Target key not found!')\n      }\n    } else if (\n      editor.isTextBlock(block) &&\n      editor.isTextBlock(updatedBlock) &&\n      operation.path.length === 2\n    ) {\n      const updatedSpan =\n        updatedBlock.children[operation.path[1] - 1] &&\n        editor.isTextSpan(updatedBlock.children[operation.path[1] - 1])\n          ? updatedBlock.children[operation.path[1] - 1]\n          : undefined\n      const removedSpan =\n        block.children[operation.path[1]] &&\n        editor.isTextSpan(block.children[operation.path[1]])\n          ? block.children[operation.path[1]]\n          : undefined\n\n      if (updatedSpan) {\n        const spansMatchingKey = block.children.filter(\n          (span) => span._key === updatedSpan._key,\n        )\n\n        if (spansMatchingKey.length === 1) {\n          patches.push(\n            set(updatedSpan.text, [\n              {_key: block._key},\n              'children',\n              {_key: updatedSpan._key},\n              'text',\n            ]),\n          )\n        } else {\n          console.warn(\n            `Multiple spans have \\`_key\\` ${updatedSpan._key}. It's ambiguous which one to update.`,\n            JSON.stringify(block, null, 2),\n          )\n        }\n      }\n\n      if (removedSpan) {\n        const spansMatchingKey = block.children.filter(\n          (span) => span._key === removedSpan._key,\n        )\n\n        if (spansMatchingKey.length === 1) {\n          patches.push(\n            unset([{_key: block._key}, 'children', {_key: removedSpan._key}]),\n          )\n        } else {\n          console.warn(\n            `Multiple spans have \\`_key\\` ${removedSpan._key}. It's ambiguous which one to remove.`,\n            JSON.stringify(block, null, 2),\n          )\n        }\n      }\n    } else {\n      debug(\"Void nodes can't be merged, not creating any patches\")\n    }\n    return patches\n  }\n\n  function moveNodePatch(\n    editor: PortableTextSlateEditor,\n    operation: MoveNodeOperation,\n    beforeValue: Descendant[],\n  ) {\n    const patches: Patch[] = []\n    const block = beforeValue[operation.path[0]]\n    const targetBlock = beforeValue[operation.newPath[0]]\n\n    if (!targetBlock) {\n      return patches\n    }\n\n    if (operation.path.length === 1) {\n      const position: InsertPosition =\n        operation.path[0] > operation.newPath[0] ? 'before' : 'after'\n      patches.push(unset([{_key: block._key}]))\n      patches.push(\n        insert([fromSlateValue([block], textBlockName)[0]], position, [\n          {_key: targetBlock._key},\n        ]),\n      )\n    } else if (\n      operation.path.length === 2 &&\n      editor.isTextBlock(block) &&\n      editor.isTextBlock(targetBlock)\n    ) {\n      const child = block.children[operation.path[1]]\n      const targetChild = targetBlock.children[operation.newPath[1]]\n      const position =\n        operation.newPath[1] === targetBlock.children.length\n          ? 'after'\n          : 'before'\n      const childToInsert = (\n        fromSlateValue([block], textBlockName)[0] as PortableTextTextBlock\n      ).children[operation.path[1]]\n      patches.push(unset([{_key: block._key}, 'children', {_key: child._key}]))\n      patches.push(\n        insert([childToInsert], position, [\n          {_key: targetBlock._key},\n          'children',\n          {_key: targetChild._key},\n        ]),\n      )\n    }\n    return patches\n  }\n\n  return {\n    insertNodePatch,\n    insertTextPatch,\n    mergeNodePatch,\n    moveNodePatch,\n    removeNodePatch,\n    removeTextPatch,\n    setNodePatch,\n    splitNodePatch,\n  }\n}\n","import type {Editor} from 'slate'\nimport type {EditorActor} from '../editor-machine'\n\nexport function createWithEventListeners(\n  editorActor: EditorActor,\n  subscriptions: Array<() => () => void>,\n) {\n  return function withEventListeners(editor: Editor) {\n    if (editorActor.getSnapshot().context.maxBlocks !== undefined) {\n      return editor\n    }\n\n    subscriptions.push(() => {\n      const subscription = editorActor.on('*', (event) => {\n        switch (event.type) {\n          case 'annotation.add': {\n            editorActor.send({\n              type: 'behavior event',\n              behaviorEvent: {\n                type: 'annotation.add',\n                annotation: event.annotation,\n              },\n              editor,\n            })\n            break\n          }\n          case 'annotation.remove': {\n            editorActor.send({\n              type: 'behavior event',\n              behaviorEvent: {\n                type: 'annotation.remove',\n                annotation: event.annotation,\n              },\n              editor,\n            })\n            break\n          }\n          case 'annotation.toggle': {\n            editorActor.send({\n              type: 'behavior event',\n              behaviorEvent: {\n                type: 'annotation.toggle',\n                annotation: event.annotation,\n              },\n              editor,\n            })\n            break\n          }\n          case 'blur': {\n            editorActor.send({\n              type: 'behavior event',\n              behaviorEvent: {\n                type: 'blur',\n              },\n              editor,\n            })\n            break\n          }\n          case 'decorator.add': {\n            editorActor.send({\n              type: 'behavior event',\n              behaviorEvent: {\n                type: 'decorator.add',\n                decorator: event.decorator,\n              },\n              editor,\n            })\n            break\n          }\n          case 'decorator.remove': {\n            editorActor.send({\n              type: 'behavior event',\n              behaviorEvent: {\n                type: 'decorator.remove',\n                decorator: event.decorator,\n              },\n              editor,\n            })\n            break\n          }\n          case 'decorator.toggle': {\n            editorActor.send({\n              type: 'behavior event',\n              behaviorEvent: {\n                type: 'decorator.toggle',\n                decorator: event.decorator,\n              },\n              editor,\n            })\n            break\n          }\n          case 'focus': {\n            editorActor.send({\n              type: 'behavior event',\n              behaviorEvent: {\n                type: 'focus',\n              },\n              editor,\n            })\n            break\n          }\n          case 'insert.block object': {\n            editorActor.send({\n              type: 'behavior event',\n              behaviorEvent: {\n                type: 'insert.block object',\n                placement: event.placement,\n                blockObject: event.blockObject,\n              },\n              editor,\n            })\n            break\n          }\n          case 'insert.inline object': {\n            editorActor.send({\n              type: 'behavior event',\n              behaviorEvent: {\n                type: 'insert.inline object',\n                inlineObject: event.inlineObject,\n              },\n              editor,\n            })\n            break\n          }\n          case 'list item.toggle': {\n            editorActor.send({\n              type: 'behavior event',\n              behaviorEvent: {\n                type: 'list item.toggle',\n                listItem: event.listItem,\n              },\n              editor,\n            })\n            break\n          }\n          case 'style.toggle': {\n            editorActor.send({\n              type: 'behavior event',\n              behaviorEvent: {\n                type: 'style.toggle',\n                style: event.style,\n              },\n              editor,\n            })\n            break\n          }\n        }\n      })\n\n      return () => {\n        subscription.unsubscribe()\n      }\n    })\n\n    editor.addMark = (mark) => {\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'decorator.add',\n          decorator: mark,\n        },\n        editor,\n      })\n      return\n    }\n\n    editor.removeMark = (mark) => {\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'decorator.remove',\n          decorator: mark,\n        },\n        editor,\n      })\n      return\n    }\n\n    editor.deleteBackward = (unit) => {\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'delete.backward',\n          unit,\n        },\n        editor,\n      })\n      return\n    }\n\n    editor.deleteForward = (unit) => {\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'delete.forward',\n          unit,\n        },\n        editor,\n      })\n      return\n    }\n\n    editor.insertBreak = () => {\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'insert.break',\n        },\n        editor,\n      })\n      return\n    }\n\n    editor.insertSoftBreak = () => {\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'insert.soft break',\n        },\n        editor,\n      })\n      return\n    }\n\n    editor.insertText = (text, options) => {\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'insert.text',\n          text,\n          options,\n        },\n        editor,\n      })\n      return\n    }\n\n    return editor\n  }\n}\n","import type {PortableTextSlateEditor} from '../../types/editor'\nimport {isChangingRemotely} from '../../utils/withChanges'\nimport {isRedoing, isUndoing} from '../../utils/withUndoRedo'\nimport type {EditorActor} from '../editor-machine'\n\n/**\n * This plugin makes sure that the PTE maxBlocks prop is respected\n *\n */\nexport function createWithMaxBlocks(editorActor: EditorActor) {\n  return function withMaxBlocks(\n    editor: PortableTextSlateEditor,\n  ): PortableTextSlateEditor {\n    const {apply} = editor\n    editor.apply = (operation) => {\n      if (editorActor.getSnapshot().matches({'edit mode': 'read only'})) {\n        apply(operation)\n        return\n      }\n\n      /**\n       * We don't want to run any side effects when the editor is processing\n       * remote changes.\n       */\n      if (isChangingRemotely(editor)) {\n        apply(operation)\n        return\n      }\n\n      /**\n       * We don't want to run any side effects when the editor is undoing or\n       * redoing operations.\n       */\n      if (isUndoing(editor) || isRedoing(editor)) {\n        apply(operation)\n        return\n      }\n\n      const rows = editorActor.getSnapshot().context.maxBlocks ?? -1\n      if (rows > 0 && editor.children.length >= rows) {\n        if (\n          (operation.type === 'insert_node' ||\n            operation.type === 'split_node') &&\n          operation.path.length === 1\n        ) {\n          return\n        }\n      }\n      apply(operation)\n    }\n    return editor\n  }\n}\n","import {Editor, Element, Node, Transforms} from 'slate'\nimport type {\n  PortableTextMemberSchemaTypes,\n  PortableTextSlateEditor,\n} from '../../types/editor'\nimport {isChangingRemotely} from '../../utils/withChanges'\nimport {isRedoing, isUndoing} from '../../utils/withUndoRedo'\nimport type {EditorActor} from '../editor-machine'\n\n/**\n * This plugin makes sure that every new node in the editor get a new _key prop when created\n *\n */\nexport function createWithObjectKeys(\n  editorActor: EditorActor,\n  schemaTypes: PortableTextMemberSchemaTypes,\n) {\n  return function withKeys(\n    editor: PortableTextSlateEditor,\n  ): PortableTextSlateEditor {\n    const {apply, normalizeNode} = editor\n\n    // The default behavior is to always generate a new key here.\n    // For example, when undoing and redoing we want to retain the keys, but\n    // when we create a new bold span by splitting a non-bold-span we want the produced node to get a new key.\n    editor.apply = (operation) => {\n      /**\n       * We don't want to run any side effects when the editor is processing\n       * remote changes.\n       */\n      if (isChangingRemotely(editor)) {\n        apply(operation)\n        return\n      }\n\n      /**\n       * We don't want to run any side effects when the editor is undoing or\n       * redoing operations.\n       */\n      if (isUndoing(editor) || isRedoing(editor)) {\n        apply(operation)\n        return\n      }\n\n      if (operation.type === 'split_node') {\n        apply({\n          ...operation,\n          properties: {\n            ...operation.properties,\n            _key: editorActor.getSnapshot().context.keyGenerator(),\n          },\n        })\n\n        return\n      }\n\n      if (operation.type === 'insert_node') {\n        if (!Editor.isEditor(operation.node)) {\n          apply({\n            ...operation,\n            node: {\n              ...operation.node,\n              _key: editorActor.getSnapshot().context.keyGenerator(),\n            },\n          })\n\n          return\n        }\n      }\n\n      apply(operation)\n    }\n\n    editor.normalizeNode = (entry) => {\n      const [node, path] = entry\n      if (Element.isElement(node) && node._type === schemaTypes.block.name) {\n        // Set key on block itself\n        if (!node._key) {\n          editorActor.send({type: 'normalizing'})\n          Transforms.setNodes(\n            editor,\n            {_key: editorActor.getSnapshot().context.keyGenerator()},\n            {at: path},\n          )\n          editorActor.send({type: 'done normalizing'})\n          return\n        }\n        // Set keys on it's children\n        for (const [child, childPath] of Node.children(editor, path)) {\n          if (!child._key) {\n            editorActor.send({type: 'normalizing'})\n            Transforms.setNodes(\n              editor,\n              {_key: editorActor.getSnapshot().context.keyGenerator()},\n              {at: childPath},\n            )\n            editorActor.send({type: 'done normalizing'})\n            return\n          }\n        }\n      }\n      normalizeNode(entry)\n    }\n\n    return editor\n  }\n}\n","import {\n  applyAll,\n  type DiffMatchPatch,\n  type InsertPatch,\n  type Patch,\n  type SetPatch,\n  type UnsetPatch,\n} from '@portabletext/patches'\nimport {\n  cleanupEfficiency,\n  DIFF_DELETE,\n  DIFF_EQUAL,\n  DIFF_INSERT,\n  applyPatches as diffMatchPatchApplyPatches,\n  makeDiff,\n  parsePatch,\n} from '@sanity/diff-match-patch'\nimport type {\n  KeyedSegment,\n  Path,\n  PathSegment,\n  PortableTextBlock,\n  PortableTextChild,\n} from '@sanity/types'\nimport {\n  Element,\n  Text,\n  Transforms,\n  type Descendant,\n  type Node,\n  type Path as SlatePath,\n} from 'slate'\nimport type {\n  PortableTextMemberSchemaTypes,\n  PortableTextSlateEditor,\n} from '../types/editor'\nimport {debugWithName} from './debug'\nimport {toSlateValue} from './values'\nimport {KEY_TO_SLATE_ELEMENT} from './weakMaps'\n\nconst debug = debugWithName('applyPatches')\nconst debugVerbose = debug.enabled && true\n\n/**\n * Creates a function that can apply a patch onto a PortableTextSlateEditor.\n */\nexport function createApplyPatch(\n  schemaTypes: PortableTextMemberSchemaTypes,\n): (editor: PortableTextSlateEditor, patch: Patch) => boolean {\n  return (editor: PortableTextSlateEditor, patch: Patch): boolean => {\n    let changed = false\n\n    // Save some CPU cycles by not stringifying unless enabled\n    if (debugVerbose) {\n      debug(\n        '\\n\\nNEW PATCH =============================================================',\n      )\n      debug(JSON.stringify(patch, null, 2))\n    }\n\n    try {\n      switch (patch.type) {\n        case 'insert':\n          changed = insertPatch(editor, patch, schemaTypes)\n          break\n        case 'unset':\n          changed = unsetPatch(editor, patch)\n          break\n        case 'set':\n          changed = setPatch(editor, patch)\n          break\n        case 'diffMatchPatch':\n          changed = diffMatchPatch(editor, patch)\n          break\n        default:\n          debug('Unhandled patch', patch.type)\n      }\n    } catch (err) {\n      console.error(err)\n    }\n\n    return changed\n  }\n}\n\n/**\n * Apply a remote diff match patch to the current PTE instance.\n * Note meant for external consumption, only exported for testing purposes.\n *\n * @param editor - Portable text slate editor instance\n * @param patch - The PTE diff match patch operation to apply\n * @returns true if the patch was applied, false otherwise\n * @internal\n */\nexport function diffMatchPatch(\n  editor: Pick<\n    PortableTextSlateEditor,\n    'children' | 'isTextBlock' | 'apply' | 'selection' | 'onChange'\n  >,\n  patch: DiffMatchPatch,\n): boolean {\n  const {block, child, childPath} = findBlockAndChildFromPath(\n    editor,\n    patch.path,\n  )\n  if (!block) {\n    debug('Block not found')\n    return false\n  }\n  if (!child || !childPath) {\n    debug('Child not found')\n    return false\n  }\n  const isSpanTextDiffMatchPatch =\n    block &&\n    editor.isTextBlock(block) &&\n    patch.path.length === 4 &&\n    patch.path[1] === 'children' &&\n    patch.path[3] === 'text'\n\n  if (!isSpanTextDiffMatchPatch || !Text.isText(child)) {\n    return false\n  }\n\n  const patches = parsePatch(patch.value)\n  const [newValue] = diffMatchPatchApplyPatches(patches, child.text, {\n    allowExceedingIndices: true,\n  })\n  const diff = cleanupEfficiency(makeDiff(child.text, newValue), 5)\n\n  debugState(editor, 'before')\n  let offset = 0\n  for (const [op, text] of diff) {\n    if (op === DIFF_INSERT) {\n      editor.apply({type: 'insert_text', path: childPath, offset, text})\n      offset += text.length\n    } else if (op === DIFF_DELETE) {\n      editor.apply({type: 'remove_text', path: childPath, offset: offset, text})\n    } else if (op === DIFF_EQUAL) {\n      offset += text.length\n    }\n  }\n  debugState(editor, 'after')\n\n  return true\n}\n\nfunction insertPatch(\n  editor: PortableTextSlateEditor,\n  patch: InsertPatch,\n  schemaTypes: PortableTextMemberSchemaTypes,\n) {\n  const {\n    block: targetBlock,\n    child: targetChild,\n    blockPath: targetBlockPath,\n    childPath: targetChildPath,\n  } = findBlockAndChildFromPath(editor, patch.path)\n  if (!targetBlock || !targetBlockPath) {\n    debug('Block not found')\n    return false\n  }\n  if (patch.path.length > 1 && patch.path[1] !== 'children') {\n    debug('Ignoring patch targeting void value')\n    return false\n  }\n  // Insert blocks\n  if (patch.path.length === 1) {\n    const {items, position} = patch\n    const blocksToInsert = toSlateValue(\n      items as PortableTextBlock[],\n      {schemaTypes},\n      KEY_TO_SLATE_ELEMENT.get(editor),\n    ) as Descendant[]\n    const targetBlockIndex = targetBlockPath[0]\n    const normalizedIdx =\n      position === 'after' ? targetBlockIndex + 1 : targetBlockIndex\n    debug(`Inserting blocks at path [${normalizedIdx}]`)\n    debugState(editor, 'before')\n    Transforms.insertNodes(editor, blocksToInsert, {at: [normalizedIdx]})\n    debugState(editor, 'after')\n    return true\n  }\n  // Insert children\n  const {items, position} = patch\n  if (!targetChild || !targetChildPath) {\n    debug('Child not found')\n    return false\n  }\n  const childrenToInsert =\n    targetBlock &&\n    toSlateValue(\n      [{...targetBlock, children: items as PortableTextChild[]}],\n      {schemaTypes},\n      KEY_TO_SLATE_ELEMENT.get(editor),\n    )\n  const targetChildIndex = targetChildPath[1]\n  const normalizedIdx =\n    position === 'after' ? targetChildIndex + 1 : targetChildIndex\n  const childInsertPath = [targetChildPath[0], normalizedIdx]\n  debug(`Inserting children at path ${childInsertPath}`)\n  debugState(editor, 'before')\n  if (childrenToInsert && Element.isElement(childrenToInsert[0])) {\n    Transforms.insertNodes(editor, childrenToInsert[0].children, {\n      at: childInsertPath,\n    })\n  }\n  debugState(editor, 'after')\n  return true\n}\n\nfunction setPatch(editor: PortableTextSlateEditor, patch: SetPatch) {\n  let value = patch.value\n  if (typeof patch.path[3] === 'string') {\n    value = {}\n    value[patch.path[3]] = patch.value\n  }\n  const {block, blockPath, child, childPath} = findBlockAndChildFromPath(\n    editor,\n    patch.path,\n  )\n\n  if (!block) {\n    debug('Block not found')\n    return false\n  }\n  const isTextBlock = editor.isTextBlock(block)\n\n  // Ignore patches targeting nested void data, like 'markDefs'\n  if (isTextBlock && patch.path.length > 1 && patch.path[1] !== 'children') {\n    debug('Ignoring setting void value')\n    return false\n  }\n\n  debugState(editor, 'before')\n\n  // If this is targeting a text block child\n  if (isTextBlock && child && childPath) {\n    if (Text.isText(value) && Text.isText(child)) {\n      const newText = child.text\n      const oldText = value.text\n      if (oldText !== newText) {\n        debug('Setting text property')\n        editor.apply({\n          type: 'remove_text',\n          path: childPath,\n          offset: 0,\n          text: newText,\n        })\n        editor.apply({\n          type: 'insert_text',\n          path: childPath,\n          offset: 0,\n          text: value.text,\n        })\n        // call OnChange here to emit the new selection\n        // the user's selection might be interfering with\n        editor.onChange()\n      }\n    } else {\n      debug('Setting non-text property')\n      editor.apply({\n        type: 'set_node',\n        path: childPath,\n        properties: {},\n        newProperties: value as Partial<Node>,\n      })\n    }\n    return true\n  } else if (Element.isElement(block) && patch.path.length === 1 && blockPath) {\n    debug('Setting block property')\n    const {children, ...nextRest} = value as unknown as PortableTextBlock\n    const {children: prevChildren, ...prevRest} = block || {children: undefined}\n    // Set any block properties\n    editor.apply({\n      type: 'set_node',\n      path: blockPath,\n      properties: {...prevRest},\n      newProperties: nextRest,\n    })\n    // Replace the children in the block\n    // Note that children must be explicitly inserted, and can't be set with set_node\n    debug('Setting children')\n    block.children.forEach((c, cIndex) => {\n      editor.apply({\n        type: 'remove_node',\n        path: blockPath.concat(block.children.length - 1 - cIndex),\n        node: c,\n      })\n    })\n    if (Array.isArray(children)) {\n      children.forEach((c, cIndex) => {\n        editor.apply({\n          type: 'insert_node',\n          path: blockPath.concat(cIndex),\n          node: c,\n        })\n      })\n    }\n  } else if (block && 'value' in block) {\n    const newVal = applyAll([block.value], [patch])[0]\n    Transforms.setNodes(editor, {...block, value: newVal}, {at: blockPath})\n    return true\n  }\n  debugState(editor, 'after')\n  return true\n}\n\nfunction unsetPatch(editor: PortableTextSlateEditor, patch: UnsetPatch) {\n  // Value\n  if (patch.path.length === 0) {\n    debug('Removing everything')\n    debugState(editor, 'before')\n    const previousSelection = editor.selection\n    Transforms.deselect(editor)\n    editor.children.forEach((_child, i) => {\n      Transforms.removeNodes(editor, {at: [i]})\n    })\n    Transforms.insertNodes(editor, editor.pteCreateTextBlock({decorators: []}))\n    if (previousSelection) {\n      Transforms.select(editor, {\n        anchor: {path: [0, 0], offset: 0},\n        focus: {path: [0, 0], offset: 0},\n      })\n    }\n    // call OnChange here to emit the new selection\n    editor.onChange()\n    debugState(editor, 'after')\n    return true\n  }\n  const {block, blockPath, child, childPath} = findBlockAndChildFromPath(\n    editor,\n    patch.path,\n  )\n\n  // Single blocks\n  if (patch.path.length === 1) {\n    if (!block || !blockPath) {\n      debug('Block not found')\n      return false\n    }\n    const blockIndex = blockPath[0]\n    debug(`Removing block at path [${blockIndex}]`)\n    debugState(editor, 'before')\n\n    Transforms.removeNodes(editor, {at: [blockIndex]})\n    debugState(editor, 'after')\n    return true\n  }\n\n  // Unset on text block children\n  if (\n    editor.isTextBlock(block) &&\n    patch.path[1] === 'children' &&\n    patch.path.length === 3\n  ) {\n    if (!child || !childPath) {\n      debug('Child not found')\n      return false\n    }\n    debug(`Unsetting child at path ${JSON.stringify(childPath)}`)\n    debugState(editor, 'before')\n    if (debugVerbose) {\n      debug(`Removing child at path ${JSON.stringify(childPath)}`)\n    }\n    Transforms.removeNodes(editor, {at: childPath})\n    debugState(editor, 'after')\n    return true\n  }\n  return false\n}\n\nfunction isKeyedSegment(segment: PathSegment): segment is KeyedSegment {\n  return typeof segment === 'object' && '_key' in segment\n}\n\nfunction debugState(\n  editor: Pick<\n    PortableTextSlateEditor,\n    'children' | 'isTextBlock' | 'apply' | 'selection'\n  >,\n  stateName: string,\n) {\n  if (!debugVerbose) {\n    return\n  }\n\n  debug(`Children ${stateName}:`, JSON.stringify(editor.children, null, 2))\n  debug(`Selection ${stateName}: `, JSON.stringify(editor.selection, null, 2))\n}\n\nfunction findBlockFromPath(\n  editor: Pick<\n    PortableTextSlateEditor,\n    'children' | 'isTextBlock' | 'apply' | 'selection' | 'onChange'\n  >,\n  path: Path,\n): {block?: Descendant; path?: SlatePath} {\n  let blockIndex = -1\n  const block = editor.children.find((node: Descendant, index: number) => {\n    const isMatch = isKeyedSegment(path[0])\n      ? node._key === path[0]._key\n      : index === path[0]\n    if (isMatch) {\n      blockIndex = index\n    }\n    return isMatch\n  })\n  if (!block) {\n    return {}\n  }\n  return {block, path: [blockIndex] as SlatePath}\n}\n\nfunction findBlockAndChildFromPath(\n  editor: Pick<\n    PortableTextSlateEditor,\n    'children' | 'isTextBlock' | 'apply' | 'selection' | 'onChange'\n  >,\n  path: Path,\n): {\n  child?: Descendant\n  childPath?: SlatePath\n  block?: Descendant\n  blockPath?: SlatePath\n} {\n  const {block, path: blockPath} = findBlockFromPath(editor, path)\n  if (!(Element.isElement(block) && path[1] === 'children')) {\n    return {block, blockPath, child: undefined, childPath: undefined}\n  }\n  let childIndex = -1\n  const child = block.children.find((node, index: number) => {\n    const isMatch = isKeyedSegment(path[2])\n      ? node._key === path[2]._key\n      : index === path[2]\n    if (isMatch) {\n      childIndex = index\n    }\n    return isMatch\n  })\n  if (!child) {\n    return {block, blockPath, child: undefined, childPath: undefined}\n  }\n  return {\n    block,\n    child,\n    blockPath,\n    childPath: blockPath?.concat(childIndex) as SlatePath,\n  }\n}\n","import {insert, setIfMissing, unset, type Patch} from '@portabletext/patches'\nimport {\n  Editor,\n  type Descendant,\n  type InsertNodeOperation,\n  type InsertTextOperation,\n  type MergeNodeOperation,\n  type MoveNodeOperation,\n  type Operation,\n  type RemoveNodeOperation,\n  type RemoveTextOperation,\n  type SetNodeOperation,\n  type SplitNodeOperation,\n} from 'slate'\nimport type {\n  PortableTextMemberSchemaTypes,\n  PortableTextSlateEditor,\n} from '../../types/editor'\nimport {createApplyPatch} from '../../utils/applyPatch'\nimport {debugWithName} from '../../utils/debug'\nimport {fromSlateValue, isEqualToEmptyEditor} from '../../utils/values'\nimport {\n  IS_PROCESSING_REMOTE_CHANGES,\n  KEY_TO_VALUE_ELEMENT,\n} from '../../utils/weakMaps'\nimport {withRemoteChanges} from '../../utils/withChanges'\nimport {\n  isPatching,\n  PATCHING,\n  withoutPatching,\n} from '../../utils/withoutPatching'\nimport type {EditorActor} from '../editor-machine'\nimport {withoutSaving} from './createWithUndoRedo'\n\nconst debug = debugWithName('plugin:withPatches')\nconst debugVerbose = false\n\nexport interface PatchFunctions {\n  insertNodePatch: (\n    editor: PortableTextSlateEditor,\n    operation: InsertNodeOperation,\n    previousChildren: Descendant[],\n  ) => Patch[]\n  insertTextPatch: (\n    editor: PortableTextSlateEditor,\n    operation: InsertTextOperation,\n    previousChildren: Descendant[],\n  ) => Patch[]\n  mergeNodePatch: (\n    editor: PortableTextSlateEditor,\n    operation: MergeNodeOperation,\n    previousChildren: Descendant[],\n  ) => Patch[]\n  moveNodePatch: (\n    editor: PortableTextSlateEditor,\n    operation: MoveNodeOperation,\n    previousChildren: Descendant[],\n  ) => Patch[]\n  removeNodePatch: (\n    editor: PortableTextSlateEditor,\n    operation: RemoveNodeOperation,\n    previousChildren: Descendant[],\n  ) => Patch[]\n  removeTextPatch: (\n    editor: PortableTextSlateEditor,\n    operation: RemoveTextOperation,\n    previousChildren: Descendant[],\n  ) => Patch[]\n  setNodePatch: (\n    editor: PortableTextSlateEditor,\n    operation: SetNodeOperation,\n    previousChildren: Descendant[],\n  ) => Patch[]\n  splitNodePatch: (\n    editor: PortableTextSlateEditor,\n    operation: SplitNodeOperation,\n    previousChildren: Descendant[],\n  ) => Patch[]\n}\n\ninterface Options {\n  editorActor: EditorActor\n  patchFunctions: PatchFunctions\n  schemaTypes: PortableTextMemberSchemaTypes\n  subscriptions: Array<() => () => void>\n}\n\nexport function createWithPatches({\n  editorActor,\n  patchFunctions,\n  schemaTypes,\n  subscriptions,\n}: Options): (editor: PortableTextSlateEditor) => PortableTextSlateEditor {\n  // The previous editor children are needed to figure out the _key of deleted nodes\n  // The editor.children would no longer contain that information if the node is already deleted.\n  let previousChildren: Descendant[]\n\n  const applyPatch = createApplyPatch(schemaTypes)\n\n  return function withPatches(editor: PortableTextSlateEditor) {\n    IS_PROCESSING_REMOTE_CHANGES.set(editor, false)\n    PATCHING.set(editor, true)\n    previousChildren = [...editor.children]\n\n    const {apply} = editor\n    let bufferedPatches: Patch[] = []\n\n    const handleBufferedRemotePatches = () => {\n      if (bufferedPatches.length === 0) {\n        return\n      }\n      const patches = bufferedPatches\n      bufferedPatches = []\n      let changed = false\n      withRemoteChanges(editor, () => {\n        Editor.withoutNormalizing(editor, () => {\n          withoutPatching(editor, () => {\n            withoutSaving(editor, () => {\n              patches.forEach((patch) => {\n                if (debug.enabled)\n                  debug(`Handling remote patch ${JSON.stringify(patch)}`)\n                changed = applyPatch(editor, patch)\n              })\n            })\n          })\n        })\n        if (changed) {\n          editor.normalize()\n          editor.onChange()\n        }\n      })\n    }\n\n    const handlePatches = ({patches}: {patches: Patch[]}) => {\n      const remotePatches = patches.filter((p) => p.origin !== 'local')\n      if (remotePatches.length === 0) {\n        return\n      }\n      bufferedPatches = bufferedPatches.concat(remotePatches)\n      handleBufferedRemotePatches()\n    }\n\n    subscriptions.push(() => {\n      debug('Subscribing to remote patches')\n      const sub = editorActor.on('patches', handlePatches)\n      return () => {\n        debug('Unsubscribing to remote patches')\n        sub.unsubscribe()\n      }\n    })\n\n    editor.apply = (operation: Operation): void | Editor => {\n      let patches: Patch[] = []\n\n      // Update previous children here before we apply\n      previousChildren = editor.children\n\n      const editorWasEmpty = isEqualToEmptyEditor(previousChildren, schemaTypes)\n\n      // Apply the operation\n      apply(operation)\n\n      const editorIsEmpty = isEqualToEmptyEditor(editor.children, schemaTypes)\n\n      if (!isPatching(editor)) {\n        if (debugVerbose && debug.enabled)\n          debug(\n            `Editor is not producing patch for operation ${operation.type}`,\n            operation,\n          )\n        return editor\n      }\n\n      // If the editor was empty and now isn't, insert the placeholder into it.\n      if (\n        editorWasEmpty &&\n        !editorIsEmpty &&\n        operation.type !== 'set_selection'\n      ) {\n        patches.push(insert(previousChildren, 'before', [0]))\n      }\n\n      switch (operation.type) {\n        case 'insert_text':\n          patches = [\n            ...patches,\n            ...patchFunctions.insertTextPatch(\n              editor,\n              operation,\n              previousChildren,\n            ),\n          ]\n          break\n        case 'remove_text':\n          patches = [\n            ...patches,\n            ...patchFunctions.removeTextPatch(\n              editor,\n              operation,\n              previousChildren,\n            ),\n          ]\n          break\n        case 'remove_node':\n          patches = [\n            ...patches,\n            ...patchFunctions.removeNodePatch(\n              editor,\n              operation,\n              previousChildren,\n            ),\n          ]\n          break\n        case 'split_node':\n          patches = [\n            ...patches,\n            ...patchFunctions.splitNodePatch(\n              editor,\n              operation,\n              previousChildren,\n            ),\n          ]\n          break\n        case 'insert_node':\n          patches = [\n            ...patches,\n            ...patchFunctions.insertNodePatch(\n              editor,\n              operation,\n              previousChildren,\n            ),\n          ]\n          break\n        case 'set_node':\n          patches = [\n            ...patches,\n            ...patchFunctions.setNodePatch(editor, operation, previousChildren),\n          ]\n          break\n        case 'merge_node':\n          patches = [\n            ...patches,\n            ...patchFunctions.mergeNodePatch(\n              editor,\n              operation,\n              previousChildren,\n            ),\n          ]\n          break\n        case 'move_node':\n          patches = [\n            ...patches,\n            ...patchFunctions.moveNodePatch(\n              editor,\n              operation,\n              previousChildren,\n            ),\n          ]\n          break\n        default:\n        // Do nothing\n      }\n\n      // Unset the value if a operation made the editor empty\n      if (\n        !editorWasEmpty &&\n        editorIsEmpty &&\n        ['merge_node', 'set_node', 'remove_text', 'remove_node'].includes(\n          operation.type,\n        )\n      ) {\n        patches = [...patches, unset([])]\n        editorActor.send({\n          type: 'unset',\n          previousValue: fromSlateValue(\n            previousChildren,\n            schemaTypes.block.name,\n            KEY_TO_VALUE_ELEMENT.get(editor),\n          ),\n        })\n      }\n\n      // Prepend patches with setIfMissing if going from empty editor to something involving a patch.\n      if (editorWasEmpty && patches.length > 0) {\n        patches = [setIfMissing([], []), ...patches]\n      }\n\n      // Emit all patches\n      if (patches.length > 0) {\n        patches.forEach((patch) => {\n          editorActor.send({\n            type: 'patch',\n            patch: {...patch, origin: 'local'},\n          })\n        })\n      }\n      return editor\n    }\n    return editor\n  }\n}\n","import {Editor, Path} from 'slate'\nimport type {PortableTextSlateEditor} from '../../types/editor'\nimport type {SlateTextBlock, VoidElement} from '../../types/slate'\nimport {debugWithName} from '../../utils/debug'\nimport {isChangingRemotely} from '../../utils/withChanges'\nimport {isRedoing, isUndoing} from '../../utils/withUndoRedo'\nimport type {EditorActor} from '../editor-machine'\n\nconst debug = debugWithName('plugin:withPlaceholderBlock')\n\n/**\n * Keep a \"placeholder\" block present when the editor is empty\n *\n */\nexport function createWithPlaceholderBlock(\n  editorActor: EditorActor,\n): (editor: PortableTextSlateEditor) => PortableTextSlateEditor {\n  return function withPlaceholderBlock(\n    editor: PortableTextSlateEditor,\n  ): PortableTextSlateEditor {\n    const {apply} = editor\n\n    editor.apply = (op) => {\n      if (editorActor.getSnapshot().matches({'edit mode': 'read only'})) {\n        apply(op)\n        return\n      }\n\n      /**\n       * We don't want to run any side effects when the editor is processing\n       * remote changes.\n       */\n      if (isChangingRemotely(editor)) {\n        apply(op)\n        return\n      }\n\n      /**\n       * We don't want to run any side effects when the editor is undoing or\n       * redoing operations.\n       */\n      if (isUndoing(editor) || isRedoing(editor)) {\n        apply(op)\n        return\n      }\n\n      if (op.type === 'remove_node') {\n        const node = op.node as SlateTextBlock | VoidElement\n        if (op.path[0] === 0 && Editor.isVoid(editor, node)) {\n          // Check next path, if it exists, do nothing\n          const nextPath = Path.next(op.path)\n          // Is removing the first block which is a void (not a text block), add a new empty text block in it, if there is no other element in the next path\n          if (!editor.children[nextPath[0]]) {\n            debug('Adding placeholder block')\n            Editor.insertNode(\n              editor,\n              editor.pteCreateTextBlock({decorators: []}),\n            )\n          }\n        }\n      }\n      apply(op)\n    }\n    return editor\n  }\n}\n","import {Editor, Path, Text as SlateText, Transforms} from 'slate'\nimport type {\n  PortableTextMemberSchemaTypes,\n  PortableTextSlateEditor,\n} from '../../types/editor'\nimport {debugWithName} from '../../utils/debug'\nimport type {EditorActor} from '../editor-machine'\n\nconst debug = debugWithName('plugin:withPortableTextBlockStyle')\n\nexport function createWithPortableTextBlockStyle(\n  editorActor: EditorActor,\n  types: PortableTextMemberSchemaTypes,\n): (editor: PortableTextSlateEditor) => PortableTextSlateEditor {\n  const defaultStyle = types.styles[0].value\n  return function withPortableTextBlockStyle(\n    editor: PortableTextSlateEditor,\n  ): PortableTextSlateEditor {\n    // Extend Slate's default normalization to reset split node to normal style\n    // if there is no text at the right end of the split.\n    const {normalizeNode} = editor\n\n    editor.normalizeNode = (nodeEntry) => {\n      const [, path] = nodeEntry\n\n      for (const op of editor.operations) {\n        if (\n          op.type === 'split_node' &&\n          op.path.length === 1 &&\n          editor.isTextBlock(op.properties) &&\n          op.properties.style !== defaultStyle &&\n          op.path[0] === path[0] &&\n          !Path.equals(path, op.path)\n        ) {\n          const [child] = Editor.node(editor, [op.path[0] + 1, 0])\n          if (SlateText.isText(child) && child.text === '') {\n            debug(`Normalizing split node to ${defaultStyle} style`, op)\n            editorActor.send({type: 'normalizing'})\n            Transforms.setNodes(\n              editor,\n              {style: defaultStyle},\n              {at: [op.path[0] + 1], voids: false},\n            )\n            editorActor.send({type: 'done normalizing'})\n            return\n          }\n        }\n      }\n\n      normalizeNode(nodeEntry)\n    }\n\n    return editor\n  }\n}\n","function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nfunction _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == typeof i ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != typeof i) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\nfunction isPortableTextSpan(node) {\n  return node._type === \"span\" && \"text\" in node && typeof node.text == \"string\" && (typeof node.marks > \"u\" || Array.isArray(node.marks) && node.marks.every(mark => typeof mark == \"string\"));\n}\nfunction isPortableTextBlock(node) {\n  return (\n    // A block doesn't _have_ to be named 'block' - to differentiate between\n    // allowed child types and marks, one might name them differently\n    typeof node._type == \"string\" &&\n    // Toolkit-types like nested spans are @-prefixed\n    node._type[0] !== \"@\" && (\n    // `markDefs` isn't _required_ per say, but if it's there, it needs to be an array\n    !(\"markDefs\" in node) || !node.markDefs || Array.isArray(node.markDefs) &&\n    // Every mark definition needs to have an `_key` to be mappable in child spans\n    node.markDefs.every(def => typeof def._key == \"string\")) &&\n    // `children` is required and needs to be an array\n    \"children\" in node && Array.isArray(node.children) &&\n    // All children are objects with `_type` (usually spans, but can contain other stuff)\n    node.children.every(child => typeof child == \"object\" && \"_type\" in child)\n  );\n}\nfunction isPortableTextListItemBlock(block) {\n  return isPortableTextBlock(block) && \"listItem\" in block && typeof block.listItem == \"string\" && (typeof block.level > \"u\" || typeof block.level == \"number\");\n}\nfunction isPortableTextToolkitList(block) {\n  return block._type === \"@list\";\n}\nfunction isPortableTextToolkitSpan(span) {\n  return span._type === \"@span\";\n}\nfunction isPortableTextToolkitTextNode(node) {\n  return node._type === \"@text\";\n}\nconst knownDecorators = [\"strong\", \"em\", \"code\", \"underline\", \"strike-through\"];\nfunction sortMarksByOccurences(span, index, blockChildren) {\n  if (!isPortableTextSpan(span) || !span.marks) return [];\n  if (!span.marks.length) return [];\n  const marks = span.marks.slice(),\n    occurences = {};\n  return marks.forEach(mark => {\n    occurences[mark] = 1;\n    for (let siblingIndex = index + 1; siblingIndex < blockChildren.length; siblingIndex++) {\n      const sibling = blockChildren[siblingIndex];\n      if (sibling && isPortableTextSpan(sibling) && Array.isArray(sibling.marks) && sibling.marks.indexOf(mark) !== -1) occurences[mark]++;else break;\n    }\n  }), marks.sort((markA, markB) => sortMarks(occurences, markA, markB));\n}\nfunction sortMarks(occurences, markA, markB) {\n  const aOccurences = occurences[markA],\n    bOccurences = occurences[markB];\n  if (aOccurences !== bOccurences) return bOccurences - aOccurences;\n  const aKnownPos = knownDecorators.indexOf(markA),\n    bKnownPos = knownDecorators.indexOf(markB);\n  return aKnownPos !== bKnownPos ? aKnownPos - bKnownPos : markA.localeCompare(markB);\n}\nfunction buildMarksTree(block) {\n  var _a;\n  const {\n    children,\n    markDefs = []\n  } = block;\n  if (!children || !children.length) return [];\n  const sortedMarks = children.map(sortMarksByOccurences),\n    rootNode = {\n      _type: \"@span\",\n      children: [],\n      markType: \"<unknown>\"\n    };\n  let nodeStack = [rootNode];\n  for (let i = 0; i < children.length; i++) {\n    const span = children[i];\n    if (!span) continue;\n    const marksNeeded = sortedMarks[i] || [];\n    let pos = 1;\n    if (nodeStack.length > 1) for (pos; pos < nodeStack.length; pos++) {\n      const mark = ((_a = nodeStack[pos]) == null ? void 0 : _a.markKey) || \"\",\n        index = marksNeeded.indexOf(mark);\n      if (index === -1) break;\n      marksNeeded.splice(index, 1);\n    }\n    nodeStack = nodeStack.slice(0, pos);\n    let currentNode = nodeStack[nodeStack.length - 1];\n    if (currentNode) {\n      for (const markKey of marksNeeded) {\n        const markDef = markDefs.find(def => def._key === markKey),\n          markType = markDef ? markDef._type : markKey,\n          node = {\n            _type: \"@span\",\n            _key: span._key,\n            children: [],\n            markDef,\n            markType,\n            markKey\n          };\n        currentNode.children.push(node), nodeStack.push(node), currentNode = node;\n      }\n      if (isPortableTextSpan(span)) {\n        const lines = span.text.split(`\n`);\n        for (let line = lines.length; line-- > 1;) lines.splice(line, 0, `\n`);\n        currentNode.children = currentNode.children.concat(lines.map(text => ({\n          _type: \"@text\",\n          text\n        })));\n      } else currentNode.children = currentNode.children.concat(span);\n    }\n  }\n  return rootNode.children;\n}\nfunction nestLists(blocks, mode) {\n  const tree = [];\n  let currentList;\n  for (let i = 0; i < blocks.length; i++) {\n    const block = blocks[i];\n    if (block) {\n      if (!isPortableTextListItemBlock(block)) {\n        tree.push(block), currentList = void 0;\n        continue;\n      }\n      if (!currentList) {\n        currentList = listFromBlock(block, i, mode), tree.push(currentList);\n        continue;\n      }\n      if (blockMatchesList(block, currentList)) {\n        currentList.children.push(block);\n        continue;\n      }\n      if ((block.level || 1) > currentList.level) {\n        const newList = listFromBlock(block, i, mode);\n        if (mode === \"html\") {\n          const lastListItem = currentList.children[currentList.children.length - 1],\n            newLastChild = _objectSpread(_objectSpread({}, lastListItem), {}, {\n              children: [...lastListItem.children, newList]\n            });\n          currentList.children[currentList.children.length - 1] = newLastChild;\n        } else currentList.children.push(newList);\n        currentList = newList;\n        continue;\n      }\n      if ((block.level || 1) < currentList.level) {\n        const matchingBranch = tree[tree.length - 1],\n          match = matchingBranch && findListMatching(matchingBranch, block);\n        if (match) {\n          currentList = match, currentList.children.push(block);\n          continue;\n        }\n        currentList = listFromBlock(block, i, mode), tree.push(currentList);\n        continue;\n      }\n      if (block.listItem !== currentList.listItem) {\n        const matchingBranch = tree[tree.length - 1],\n          match = matchingBranch && findListMatching(matchingBranch, {\n            level: block.level || 1\n          });\n        if (match && match.listItem === block.listItem) {\n          currentList = match, currentList.children.push(block);\n          continue;\n        } else {\n          currentList = listFromBlock(block, i, mode), tree.push(currentList);\n          continue;\n        }\n      }\n      console.warn(\"Unknown state encountered for block\", block), tree.push(block);\n    }\n  }\n  return tree;\n}\nfunction blockMatchesList(block, list) {\n  return (block.level || 1) === list.level && block.listItem === list.listItem;\n}\nfunction listFromBlock(block, index, mode) {\n  return {\n    _type: \"@list\",\n    _key: `${block._key || `${index}`}-parent`,\n    mode,\n    level: block.level || 1,\n    listItem: block.listItem,\n    children: [block]\n  };\n}\nfunction findListMatching(rootNode, matching) {\n  const level = matching.level || 1,\n    style = matching.listItem || \"normal\",\n    filterOnType = typeof matching.listItem == \"string\";\n  if (isPortableTextToolkitList(rootNode) && (rootNode.level || 1) === level && filterOnType && (rootNode.listItem || \"normal\") === style) return rootNode;\n  if (!(\"children\" in rootNode)) return;\n  const node = rootNode.children[rootNode.children.length - 1];\n  return node && !isPortableTextSpan(node) ? findListMatching(node, matching) : void 0;\n}\nfunction spanToPlainText(span) {\n  let text = \"\";\n  return span.children.forEach(current => {\n    isPortableTextToolkitTextNode(current) ? text += current.text : isPortableTextToolkitSpan(current) && (text += spanToPlainText(current));\n  }), text;\n}\nconst leadingSpace = /^\\s/,\n  trailingSpace = /\\s$/;\nfunction toPlainText(block) {\n  const blocks = Array.isArray(block) ? block : [block];\n  let text = \"\";\n  return blocks.forEach((current, index) => {\n    if (!isPortableTextBlock(current)) return;\n    let pad = !1;\n    current.children.forEach(span => {\n      isPortableTextSpan(span) ? (text += pad && text && !trailingSpace.test(text) && !leadingSpace.test(span.text) ? \" \" : \"\", text += span.text, pad = !1) : pad = !0;\n    }), index !== blocks.length - 1 && (text += `\n\n`);\n  }), text;\n}\nconst LIST_NEST_MODE_HTML = \"html\",\n  LIST_NEST_MODE_DIRECT = \"direct\";\nexport { LIST_NEST_MODE_DIRECT, LIST_NEST_MODE_HTML, buildMarksTree, isPortableTextBlock, isPortableTextListItemBlock, isPortableTextSpan, isPortableTextToolkitList, isPortableTextToolkitSpan, isPortableTextToolkitTextNode, nestLists, sortMarksByOccurences, spanToPlainText, toPlainText };\n//# sourceMappingURL=index.js.map\n","import type {PortableTextSpan} from '@sanity/types'\nimport {Node, Path} from 'slate'\nimport type {PortableTextSlateEditor} from '../types/editor'\n\nexport function getPreviousSpan({\n  editor,\n  blockPath,\n  spanPath,\n}: {\n  editor: PortableTextSlateEditor\n  blockPath: Path\n  spanPath: Path\n}): PortableTextSpan | undefined {\n  let previousSpan: PortableTextSpan | undefined\n\n  for (const [child, childPath] of Node.children(editor, blockPath, {\n    reverse: true,\n  })) {\n    if (!editor.isTextSpan(child)) {\n      continue\n    }\n\n    if (Path.isBefore(childPath, spanPath)) {\n      previousSpan = child\n      break\n    }\n  }\n\n  return previousSpan\n}\n\nexport function getNextSpan({\n  editor,\n  blockPath,\n  spanPath,\n}: {\n  editor: PortableTextSlateEditor\n  blockPath: Path\n  spanPath: Path\n}): PortableTextSpan | undefined {\n  let nextSpan: PortableTextSpan | undefined\n\n  for (const [child, childPath] of Node.children(editor, blockPath)) {\n    if (!editor.isTextSpan(child)) {\n      continue\n    }\n\n    if (Path.isAfter(childPath, spanPath)) {\n      nextSpan = child\n      break\n    }\n  }\n\n  return nextSpan\n}\n","/**\n *\n * This plugin will change Slate's default marks model (every prop is a mark) with the Portable Text model (marks is an array of strings on prop .marks).\n *\n */\n\nimport {isPortableTextBlock, isPortableTextSpan} from '@portabletext/toolkit'\nimport type {PortableTextObject, PortableTextSpan} from '@sanity/types'\nimport {isEqual, uniq} from 'lodash'\nimport {Editor, Element, Node, Path, Range, Text, Transforms} from 'slate'\nimport type {BehaviorActionImplementation} from '../../behavior-actions/behavior.actions'\nimport type {\n  PortableTextMemberSchemaTypes,\n  PortableTextSlateEditor,\n} from '../../types/editor'\nimport {debugWithName} from '../../utils/debug'\nimport {getNextSpan, getPreviousSpan} from '../../utils/sibling-utils'\nimport {isChangingRemotely} from '../../utils/withChanges'\nimport {isRedoing, isUndoing} from '../../utils/withUndoRedo'\nimport type {EditorActor} from '../editor-machine'\n\nconst debug = debugWithName('plugin:withPortableTextMarkModel')\n\nexport function createWithPortableTextMarkModel(\n  editorActor: EditorActor,\n  types: PortableTextMemberSchemaTypes,\n): (editor: PortableTextSlateEditor) => PortableTextSlateEditor {\n  return function withPortableTextMarkModel(editor: PortableTextSlateEditor) {\n    const {apply, normalizeNode} = editor\n    const decorators = types.decorators.map((t) => t.value)\n\n    // Extend Slate's default normalization. Merge spans with same set of .marks when doing merge_node operations, and clean up markDefs / marks\n    editor.normalizeNode = (nodeEntry) => {\n      const [node, path] = nodeEntry\n\n      if (editor.isTextBlock(node)) {\n        const children = Node.children(editor, path)\n\n        for (const [child, childPath] of children) {\n          const nextNode = node.children[childPath[1] + 1]\n\n          if (\n            editor.isTextSpan(child) &&\n            editor.isTextSpan(nextNode) &&\n            child.marks?.every((mark) => nextNode.marks?.includes(mark)) &&\n            nextNode.marks?.every((mark) => child.marks?.includes(mark))\n          ) {\n            debug(\n              'Merging spans',\n              JSON.stringify(child, null, 2),\n              JSON.stringify(nextNode, null, 2),\n            )\n            editorActor.send({type: 'normalizing'})\n            Transforms.mergeNodes(editor, {\n              at: [childPath[0], childPath[1] + 1],\n              voids: true,\n            })\n            editorActor.send({type: 'done normalizing'})\n            return\n          }\n        }\n      }\n\n      /**\n       * Add missing .markDefs to block nodes\n       */\n      if (editor.isTextBlock(node) && !Array.isArray(node.markDefs)) {\n        debug('Adding .markDefs to block node')\n        editorActor.send({type: 'normalizing'})\n        Transforms.setNodes(editor, {markDefs: []}, {at: path})\n        editorActor.send({type: 'done normalizing'})\n        return\n      }\n\n      /**\n       * Add missing .marks to span nodes\n       */\n      if (editor.isTextSpan(node) && !Array.isArray(node.marks)) {\n        debug('Adding .marks to span node')\n        editorActor.send({type: 'normalizing'})\n        Transforms.setNodes(editor, {marks: []}, {at: path})\n        editorActor.send({type: 'done normalizing'})\n        return\n      }\n\n      /**\n       * Remove annotations from empty spans\n       */\n      if (editor.isTextSpan(node)) {\n        const blockPath = Path.parent(path)\n        const [block] = Editor.node(editor, blockPath)\n        const decorators = types.decorators.map((decorator) => decorator.value)\n        const annotations = node.marks?.filter(\n          (mark) => !decorators.includes(mark),\n        )\n\n        if (editor.isTextBlock(block)) {\n          if (node.text === '' && annotations && annotations.length > 0) {\n            debug('Removing annotations from empty span node')\n            editorActor.send({type: 'normalizing'})\n            Transforms.setNodes(\n              editor,\n              {marks: node.marks?.filter((mark) => decorators.includes(mark))},\n              {at: path},\n            )\n            editorActor.send({type: 'done normalizing'})\n            return\n          }\n        }\n      }\n\n      /**\n       * Remove orphaned annotations from child spans of block nodes\n       */\n      if (editor.isTextBlock(node)) {\n        const decorators = types.decorators.map((decorator) => decorator.value)\n\n        for (const [child, childPath] of Node.children(editor, path)) {\n          if (editor.isTextSpan(child)) {\n            const marks = child.marks ?? []\n            const orphanedAnnotations = marks.filter((mark) => {\n              return (\n                !decorators.includes(mark) &&\n                !node.markDefs?.find((def) => def._key === mark)\n              )\n            })\n\n            if (orphanedAnnotations.length > 0) {\n              debug('Removing orphaned annotations from span node')\n              editorActor.send({type: 'normalizing'})\n              Transforms.setNodes(\n                editor,\n                {\n                  marks: marks.filter(\n                    (mark) => !orphanedAnnotations.includes(mark),\n                  ),\n                },\n                {at: childPath},\n              )\n              editorActor.send({type: 'done normalizing'})\n              return\n            }\n          }\n        }\n      }\n\n      /**\n       * Remove orphaned annotations from span nodes\n       */\n      if (editor.isTextSpan(node)) {\n        const blockPath = Path.parent(path)\n        const [block] = Editor.node(editor, blockPath)\n\n        if (editor.isTextBlock(block)) {\n          const decorators = types.decorators.map(\n            (decorator) => decorator.value,\n          )\n          const marks = node.marks ?? []\n          const orphanedAnnotations = marks.filter((mark) => {\n            return (\n              !decorators.includes(mark) &&\n              !block.markDefs?.find((def) => def._key === mark)\n            )\n          })\n\n          if (orphanedAnnotations.length > 0) {\n            debug('Removing orphaned annotations from span node')\n            editorActor.send({type: 'normalizing'})\n            Transforms.setNodes(\n              editor,\n              {\n                marks: marks.filter(\n                  (mark) => !orphanedAnnotations.includes(mark),\n                ),\n              },\n              {at: path},\n            )\n            editorActor.send({type: 'done normalizing'})\n            return\n          }\n        }\n      }\n\n      // Remove duplicate markDefs\n      if (editor.isTextBlock(node)) {\n        const markDefs = node.markDefs ?? []\n        const markDefKeys = new Set<string>()\n        const newMarkDefs: Array<PortableTextObject> = []\n\n        for (const markDef of markDefs) {\n          if (!markDefKeys.has(markDef._key)) {\n            markDefKeys.add(markDef._key)\n            newMarkDefs.push(markDef)\n          }\n        }\n\n        if (markDefs.length !== newMarkDefs.length) {\n          debug('Removing duplicate markDefs')\n          editorActor.send({type: 'normalizing'})\n          Transforms.setNodes(editor, {markDefs: newMarkDefs}, {at: path})\n          editorActor.send({type: 'done normalizing'})\n          return\n        }\n      }\n\n      // Check consistency of markDefs (unless we are merging two nodes)\n      if (\n        editor.isTextBlock(node) &&\n        !editor.operations.some(\n          (op) =>\n            op.type === 'merge_node' &&\n            'markDefs' in op.properties &&\n            op.path.length === 1,\n        )\n      ) {\n        const newMarkDefs = (node.markDefs || []).filter((def) => {\n          return node.children.find((child) => {\n            return (\n              Text.isText(child) &&\n              Array.isArray(child.marks) &&\n              child.marks.includes(def._key)\n            )\n          })\n        })\n        if (node.markDefs && !isEqual(newMarkDefs, node.markDefs)) {\n          debug('Removing markDef not in use')\n          editorActor.send({type: 'normalizing'})\n          Transforms.setNodes(\n            editor,\n            {\n              markDefs: newMarkDefs,\n            },\n            {at: path},\n          )\n          editorActor.send({type: 'done normalizing'})\n          return\n        }\n      }\n\n      normalizeNode(nodeEntry)\n    }\n\n    editor.apply = (op) => {\n      /**\n       * We don't want to run any side effects when the editor is processing\n       * remote changes.\n       */\n      if (isChangingRemotely(editor)) {\n        apply(op)\n        return\n      }\n\n      /**\n       * We don't want to run any side effects when the editor is undoing or\n       * redoing operations.\n       */\n      if (isUndoing(editor) || isRedoing(editor)) {\n        apply(op)\n        return\n      }\n\n      if (op.type === 'set_selection') {\n        const marks = Editor.marks(editor)\n\n        if (\n          marks &&\n          op.properties &&\n          op.newProperties &&\n          op.properties.anchor &&\n          op.properties.focus &&\n          op.newProperties.anchor &&\n          op.newProperties.focus\n        ) {\n          const previousSelectionIsCollapsed = Range.isCollapsed({\n            anchor: op.properties.anchor,\n            focus: op.properties.focus,\n          })\n          const newSelectionIsCollapsed = Range.isCollapsed({\n            anchor: op.newProperties.anchor,\n            focus: op.newProperties.focus,\n          })\n\n          if (previousSelectionIsCollapsed && newSelectionIsCollapsed) {\n            const focusSpan: PortableTextSpan | undefined = Array.from(\n              Editor.nodes(editor, {\n                mode: 'lowest',\n                at: op.properties.focus,\n                match: (n) => editor.isTextSpan(n),\n                voids: false,\n              }),\n            )[0]?.[0]\n            const newFocusSpan: PortableTextSpan | undefined = Array.from(\n              Editor.nodes(editor, {\n                mode: 'lowest',\n                at: op.newProperties.focus,\n                match: (n) => editor.isTextSpan(n),\n                voids: false,\n              }),\n            )[0]?.[0]\n            const movedToNextSpan =\n              focusSpan &&\n              newFocusSpan &&\n              op.newProperties.focus.path[0] === op.properties.focus.path[0] &&\n              op.newProperties.focus.path[1] ===\n                op.properties.focus.path[1] + 1 &&\n              focusSpan.text.length === op.properties.focus.offset &&\n              op.newProperties.focus.offset === 0\n            const movedToPreviousSpan =\n              focusSpan &&\n              newFocusSpan &&\n              op.newProperties.focus.path[0] === op.properties.focus.path[0] &&\n              op.newProperties.focus.path[1] ===\n                op.properties.focus.path[1] - 1 &&\n              op.properties.focus.offset === 0 &&\n              newFocusSpan.text.length === op.newProperties.focus.offset\n\n            // If the editor has marks and we are not visually moving the\n            // selection then we just abort. Otherwise the marks would be\n            // cleared and we can't use them for the possible subsequent insert\n            // operation.\n            if (movedToNextSpan || movedToPreviousSpan) {\n              return\n            }\n          }\n        }\n      }\n\n      if (op.type === 'insert_node') {\n        const {selection} = editor\n\n        if (selection) {\n          const [_block, blockPath] = Editor.node(editor, selection, {depth: 1})\n          const previousSpan = getPreviousSpan({\n            editor,\n            blockPath,\n            spanPath: op.path,\n          })\n          const previousSpanAnnotations = previousSpan\n            ? previousSpan.marks?.filter((mark) => !decorators.includes(mark))\n            : []\n\n          const nextSpan = getNextSpan({\n            editor,\n            blockPath,\n            spanPath: [op.path[0], op.path[1] - 1],\n          })\n          const nextSpanAnnotations = nextSpan\n            ? nextSpan.marks?.filter((mark) => !decorators.includes(mark))\n            : []\n\n          const annotationsEnding =\n            previousSpanAnnotations?.filter(\n              (annotation) => !nextSpanAnnotations?.includes(annotation),\n            ) ?? []\n          const atTheEndOfAnnotation = annotationsEnding.length > 0\n\n          if (\n            atTheEndOfAnnotation &&\n            isPortableTextSpan(op.node) &&\n            op.node.marks?.some((mark) => annotationsEnding.includes(mark))\n          ) {\n            Transforms.insertNodes(editor, {\n              ...op.node,\n              marks:\n                op.node.marks?.filter(\n                  (mark) => !annotationsEnding.includes(mark),\n                ) ?? [],\n            })\n            return\n          }\n\n          const annotationsStarting =\n            nextSpanAnnotations?.filter(\n              (annotation) => !previousSpanAnnotations?.includes(annotation),\n            ) ?? []\n          const atTheStartOfAnnotation = annotationsStarting.length > 0\n\n          if (\n            atTheStartOfAnnotation &&\n            isPortableTextSpan(op.node) &&\n            op.node.marks?.some((mark) => annotationsStarting.includes(mark))\n          ) {\n            Transforms.insertNodes(editor, {\n              ...op.node,\n              marks:\n                op.node.marks?.filter(\n                  (mark) => !annotationsStarting.includes(mark),\n                ) ?? [],\n            })\n            return\n          }\n\n          const nextSpanDecorators =\n            nextSpan?.marks?.filter((mark) => decorators.includes(mark)) ?? []\n          const decoratorStarting = nextSpanDecorators.length > 0\n\n          if (\n            decoratorStarting &&\n            atTheEndOfAnnotation &&\n            !atTheStartOfAnnotation &&\n            isPortableTextSpan(op.node) &&\n            op.node.marks?.length === 0\n          ) {\n            Transforms.insertNodes(editor, {\n              ...op.node,\n              marks: nextSpanDecorators,\n            })\n            return\n          }\n        }\n      }\n\n      if (op.type === 'insert_text') {\n        const {selection} = editor\n        const collapsedSelection = selection\n          ? Range.isCollapsed(selection)\n          : false\n\n        if (selection && collapsedSelection) {\n          const [_block, blockPath] = Editor.node(editor, selection, {\n            depth: 1,\n          })\n\n          const [span, spanPath] =\n            Array.from(\n              Editor.nodes(editor, {\n                mode: 'lowest',\n                at: selection.focus,\n                match: (n) => editor.isTextSpan(n),\n                voids: false,\n              }),\n            )[0] ?? ([undefined, undefined] as const)\n\n          const marks = span.marks ?? []\n          const marksWithoutAnnotations = marks.filter((mark) =>\n            decorators.includes(mark),\n          )\n          const spanHasAnnotations =\n            marks.length > marksWithoutAnnotations.length\n\n          const spanIsEmpty = span.text.length === 0\n\n          const atTheBeginningOfSpan = selection.anchor.offset === 0\n          const atTheEndOfSpan = selection.anchor.offset === span.text.length\n\n          const previousSpan = getPreviousSpan({editor, blockPath, spanPath})\n          const nextSpan = getNextSpan({editor, blockPath, spanPath})\n          const nextSpanAnnotations =\n            nextSpan?.marks?.filter((mark) => !decorators.includes(mark)) ?? []\n          const spanAnnotations = marks.filter(\n            (mark) => !decorators.includes(mark),\n          )\n\n          const previousSpanHasAnnotations = previousSpan\n            ? previousSpan.marks?.some((mark) => !decorators.includes(mark))\n            : false\n          const previousSpanHasSameAnnotations = previousSpan\n            ? previousSpan.marks\n                ?.filter((mark) => !decorators.includes(mark))\n                .every((mark) => marks.includes(mark))\n            : false\n          const previousSpanHasSameAnnotation = previousSpan\n            ? previousSpan.marks?.some(\n                (mark) => !decorators.includes(mark) && marks.includes(mark),\n              )\n            : false\n\n          const previousSpanHasSameMarks = previousSpan\n            ? previousSpan.marks?.every((mark) => marks.includes(mark))\n            : false\n          const nextSpanSharesSomeAnnotations = spanAnnotations.some((mark) =>\n            nextSpanAnnotations?.includes(mark),\n          )\n\n          if (spanHasAnnotations && !spanIsEmpty) {\n            if (atTheBeginningOfSpan) {\n              if (previousSpanHasSameMarks) {\n                Transforms.insertNodes(editor, {\n                  _type: 'span',\n                  _key: editorActor.getSnapshot().context.keyGenerator(),\n                  text: op.text,\n                  marks: previousSpan?.marks ?? [],\n                })\n                return\n              } else if (previousSpanHasSameAnnotations) {\n                Transforms.insertNodes(editor, {\n                  _type: 'span',\n                  _key: editorActor.getSnapshot().context.keyGenerator(),\n                  text: op.text,\n                  marks: previousSpan?.marks ?? [],\n                })\n                return\n              } else if (previousSpanHasSameAnnotation) {\n                apply(op)\n                return\n              } else if (!previousSpan) {\n                Transforms.insertNodes(editor, {\n                  _type: 'span',\n                  _key: editorActor.getSnapshot().context.keyGenerator(),\n                  text: op.text,\n                  marks: [],\n                })\n                return\n              }\n            }\n\n            if (atTheEndOfSpan) {\n              if (\n                (nextSpan &&\n                  nextSpanSharesSomeAnnotations &&\n                  nextSpanAnnotations.length < spanAnnotations.length) ||\n                !nextSpanSharesSomeAnnotations\n              ) {\n                Transforms.insertNodes(editor, {\n                  _type: 'span',\n                  _key: editorActor.getSnapshot().context.keyGenerator(),\n                  text: op.text,\n                  marks: nextSpan?.marks ?? [],\n                })\n                return\n              }\n\n              if (!nextSpan) {\n                Transforms.insertNodes(editor, {\n                  _type: 'span',\n                  _key: editorActor.getSnapshot().context.keyGenerator(),\n                  text: op.text,\n                  marks: [],\n                })\n                return\n              }\n            }\n          }\n\n          if (atTheBeginningOfSpan && !spanIsEmpty && !!previousSpan) {\n            Transforms.insertNodes(editor, {\n              _type: 'span',\n              _key: editorActor.getSnapshot().context.keyGenerator(),\n              text: op.text,\n              marks: previousSpanHasAnnotations\n                ? []\n                : (previousSpan.marks ?? []).filter((mark) =>\n                    decorators.includes(mark),\n                  ),\n            })\n            return\n          }\n        }\n      }\n\n      if (op.type === 'remove_text') {\n        const {selection} = editor\n\n        if (selection && Range.isExpanded(selection)) {\n          const [block, blockPath] = Editor.node(editor, selection, {\n            depth: 1,\n          })\n          const [span, spanPath] =\n            Array.from(\n              Editor.nodes(editor, {\n                mode: 'lowest',\n                at: {path: op.path, offset: op.offset},\n                match: (n) => editor.isTextSpan(n),\n                voids: false,\n              }),\n            )[0] ?? ([undefined, undefined] as const)\n\n          if (span && block && isPortableTextBlock(block)) {\n            const markDefs = block.markDefs ?? []\n            const marks = span.marks ?? []\n            const spanHasAnnotations = marks.some((mark) =>\n              markDefs.find((markDef) => markDef._key === mark),\n            )\n            const deletingFromTheEnd =\n              op.offset + op.text.length === span.text.length\n            const deletingAllText = op.offset === 0 && deletingFromTheEnd\n\n            const previousSpan = getPreviousSpan({editor, blockPath, spanPath})\n            const nextSpan = getNextSpan({editor, blockPath, spanPath})\n\n            const previousSpanHasSameAnnotation = previousSpan\n              ? previousSpan.marks?.some(\n                  (mark) => !decorators.includes(mark) && marks.includes(mark),\n                )\n              : false\n            const nextSpanHasSameAnnotation = nextSpan\n              ? nextSpan.marks?.some(\n                  (mark) => !decorators.includes(mark) && marks.includes(mark),\n                )\n              : false\n\n            if (\n              spanHasAnnotations &&\n              deletingAllText &&\n              !previousSpanHasSameAnnotation &&\n              !nextSpanHasSameAnnotation\n            ) {\n              const marksWithoutAnnotationMarks: string[] = (\n                {\n                  ...(Editor.marks(editor) || {}),\n                }.marks || []\n              ).filter((mark) => decorators.includes(mark))\n\n              Editor.withoutNormalizing(editor, () => {\n                apply(op)\n                Transforms.setNodes(\n                  editor,\n                  {marks: marksWithoutAnnotationMarks},\n                  {at: op.path},\n                )\n              })\n\n              editor.onChange()\n              return\n            }\n          }\n        }\n      }\n\n      /**\n       * Copy over markDefs when merging blocks\n       */\n      if (\n        op.type === 'merge_node' &&\n        op.path.length === 1 &&\n        'markDefs' in op.properties &&\n        op.properties._type === types.block.name &&\n        Array.isArray(op.properties.markDefs) &&\n        op.properties.markDefs.length > 0 &&\n        op.path[0] - 1 >= 0\n      ) {\n        const [targetBlock, targetPath] = Editor.node(editor, [op.path[0] - 1])\n\n        if (editor.isTextBlock(targetBlock)) {\n          const oldDefs =\n            (Array.isArray(targetBlock.markDefs) && targetBlock.markDefs) || []\n          const newMarkDefs = uniq([...oldDefs, ...op.properties.markDefs])\n\n          debug(`Copying markDefs over to merged block`, op)\n          Transforms.setNodes(\n            editor,\n            {markDefs: newMarkDefs},\n            {at: targetPath, voids: false},\n          )\n          apply(op)\n          return\n        }\n      }\n\n      apply(op)\n    }\n\n    return editor\n  }\n}\n\nexport const addDecoratorActionImplementation: BehaviorActionImplementation<\n  'decorator.add'\n> = ({action}) => {\n  const editor = action.editor\n  const mark = action.decorator\n\n  if (editor.selection) {\n    if (Range.isExpanded(editor.selection)) {\n      // Split if needed\n      Transforms.setNodes(\n        editor,\n        {},\n        {match: Text.isText, split: true, hanging: true},\n      )\n      // Use new selection\n      const splitTextNodes = Range.isRange(editor.selection)\n        ? [\n            ...Editor.nodes(editor, {\n              at: editor.selection,\n              match: Text.isText,\n            }),\n          ]\n        : []\n      const shouldRemoveMark =\n        splitTextNodes.length > 1 &&\n        splitTextNodes.every((node) => node[0].marks?.includes(mark))\n\n      if (shouldRemoveMark) {\n        editor.removeMark(mark)\n      } else {\n        splitTextNodes.forEach(([node, path]) => {\n          const marks = [\n            ...(Array.isArray(node.marks) ? node.marks : []).filter(\n              (eMark: string) => eMark !== mark,\n            ),\n            mark,\n          ]\n          Transforms.setNodes(\n            editor,\n            {marks},\n            {at: path, match: Text.isText, split: true, hanging: true},\n          )\n        })\n      }\n    } else {\n      const [block, blockPath] = Editor.node(editor, editor.selection, {\n        depth: 1,\n      })\n      const lonelyEmptySpan =\n        editor.isTextBlock(block) &&\n        block.children.length === 1 &&\n        editor.isTextSpan(block.children[0]) &&\n        block.children[0].text === ''\n          ? block.children[0]\n          : undefined\n\n      if (lonelyEmptySpan) {\n        const existingMarks = lonelyEmptySpan.marks ?? []\n        const existingMarksWithoutDecorator = existingMarks.filter(\n          (existingMark) => existingMark !== mark,\n        )\n\n        Transforms.setNodes(\n          editor,\n          {\n            marks:\n              existingMarks.length === existingMarksWithoutDecorator.length\n                ? [...existingMarks, mark]\n                : existingMarksWithoutDecorator,\n          },\n          {\n            at: blockPath,\n            match: (node) => editor.isTextSpan(node),\n          },\n        )\n      } else {\n        const existingMarks: string[] =\n          {\n            ...(Editor.marks(editor) || {}),\n          }.marks || []\n        const marks = {\n          ...(Editor.marks(editor) || {}),\n          marks: [...existingMarks, mark],\n        }\n        editor.marks = marks as Text\n      }\n    }\n    editor.onChange()\n  }\n}\n\nexport const removeDecoratorActionImplementation: BehaviorActionImplementation<\n  'decorator.remove'\n> = ({action}) => {\n  const editor = action.editor\n  const mark = action.decorator\n  const {selection} = editor\n\n  if (selection) {\n    if (Range.isExpanded(selection)) {\n      // Split if needed\n      Transforms.setNodes(\n        editor,\n        {},\n        {match: Text.isText, split: true, hanging: true},\n      )\n      if (editor.selection) {\n        const splitTextNodes = [\n          ...Editor.nodes(editor, {\n            at: editor.selection,\n            match: Text.isText,\n          }),\n        ]\n        splitTextNodes.forEach(([node, path]) => {\n          const block = editor.children[path[0]]\n          if (Element.isElement(block) && block.children.includes(node)) {\n            Transforms.setNodes(\n              editor,\n              {\n                marks: (Array.isArray(node.marks) ? node.marks : []).filter(\n                  (eMark: string) => eMark !== mark,\n                ),\n                _type: 'span',\n              },\n              {at: path},\n            )\n          }\n        })\n      }\n    } else {\n      const [block, blockPath] = Editor.node(editor, selection, {\n        depth: 1,\n      })\n      const lonelyEmptySpan =\n        editor.isTextBlock(block) &&\n        block.children.length === 1 &&\n        editor.isTextSpan(block.children[0]) &&\n        block.children[0].text === ''\n          ? block.children[0]\n          : undefined\n\n      if (lonelyEmptySpan) {\n        const existingMarks = lonelyEmptySpan.marks ?? []\n        const existingMarksWithoutDecorator = existingMarks.filter(\n          (existingMark) => existingMark !== mark,\n        )\n\n        Transforms.setNodes(\n          editor,\n          {\n            marks: existingMarksWithoutDecorator,\n          },\n          {\n            at: blockPath,\n            match: (node) => editor.isTextSpan(node),\n          },\n        )\n      } else {\n        const existingMarks: string[] =\n          {\n            ...(Editor.marks(editor) || {}),\n          }.marks || []\n        const marks = {\n          ...(Editor.marks(editor) || {}),\n          marks: existingMarks.filter((eMark) => eMark !== mark),\n        } as Text\n        editor.marks = {marks: marks.marks, _type: 'span'} as Text\n      }\n    }\n  }\n}\n\nexport function isDecoratorActive({\n  editor,\n  decorator,\n}: {\n  editor: PortableTextSlateEditor\n  decorator: string\n}) {\n  if (!editor.selection) {\n    return false\n  }\n\n  const selectedTextNodes = Array.from(\n    Editor.nodes(editor, {match: Text.isText, at: editor.selection}),\n  )\n\n  if (selectedTextNodes.length === 0) {\n    return false\n  }\n\n  if (Range.isExpanded(editor.selection)) {\n    return selectedTextNodes.every((n) => {\n      const [node] = n\n\n      return node.marks?.includes(decorator)\n    })\n  }\n\n  return (\n    {\n      ...(Editor.marks(editor) || {}),\n    }.marks || []\n  ).includes(decorator)\n}\n\nexport const toggleDecoratorActionImplementation: BehaviorActionImplementation<\n  'decorator.toggle'\n> = ({context, action}) => {\n  const isActive = isDecoratorActive({\n    editor: action.editor,\n    decorator: action.decorator,\n  })\n\n  if (isActive) {\n    removeDecoratorActionImplementation({\n      context,\n      action: {\n        type: 'decorator.remove',\n        editor: action.editor,\n        decorator: action.decorator,\n      },\n    })\n  } else {\n    addDecoratorActionImplementation({\n      context,\n      action: {\n        type: 'decorator.add',\n        editor: action.editor,\n        decorator: action.decorator,\n      },\n    })\n  }\n}\n","import type {BaseRange} from 'slate'\nimport type {\n  EditorSelection,\n  PortableTextMemberSchemaTypes,\n  PortableTextSlateEditor,\n} from '../../types/editor'\nimport {debugWithName} from '../../utils/debug'\nimport {\n  toPortableTextRange,\n  type ObjectWithKeyAndType,\n} from '../../utils/ranges'\nimport {SLATE_TO_PORTABLE_TEXT_RANGE} from '../../utils/weakMaps'\nimport type {EditorActor} from '../editor-machine'\n\nconst debug = debugWithName('plugin:withPortableTextSelections')\nconst debugVerbose = debug.enabled && false\n\n// This plugin will make sure that we emit a PT selection whenever the editor has changed.\nexport function createWithPortableTextSelections(\n  editorActor: EditorActor,\n  types: PortableTextMemberSchemaTypes,\n): (editor: PortableTextSlateEditor) => PortableTextSlateEditor {\n  let prevSelection: BaseRange | null = null\n  return function withPortableTextSelections(\n    editor: PortableTextSlateEditor,\n  ): PortableTextSlateEditor {\n    const emitPortableTextSelection = () => {\n      if (prevSelection !== editor.selection) {\n        let ptRange: EditorSelection = null\n        if (editor.selection) {\n          const existing = SLATE_TO_PORTABLE_TEXT_RANGE.get(editor.selection)\n          if (existing) {\n            ptRange = existing\n          } else {\n            const value = editor.children satisfies ObjectWithKeyAndType[]\n            ptRange = toPortableTextRange(value, editor.selection, types)\n            SLATE_TO_PORTABLE_TEXT_RANGE.set(editor.selection, ptRange)\n          }\n        }\n        if (debugVerbose) {\n          debug(\n            `Emitting selection ${JSON.stringify(ptRange || null)} (${JSON.stringify(\n              editor.selection,\n            )})`,\n          )\n        }\n        if (ptRange) {\n          editorActor.send({type: 'selection', selection: ptRange})\n        } else {\n          editorActor.send({type: 'selection', selection: null})\n        }\n      }\n      prevSelection = editor.selection\n    }\n\n    const {onChange} = editor\n    editor.onChange = () => {\n      const hasChanges = editor.operations.length > 0\n      onChange()\n      if (\n        hasChanges &&\n        !editorActor.getSnapshot().matches({setup: 'setting up'})\n      ) {\n        emitPortableTextSelection()\n      }\n    }\n    return editor\n  }\n}\n","import {\n  isPortableTextListBlock,\n  isPortableTextSpan,\n  isPortableTextTextBlock,\n  type PortableTextListBlock,\n  type PortableTextSpan,\n  type PortableTextTextBlock,\n} from '@sanity/types'\nimport {Transforms, type Element} from 'slate'\nimport type {\n  PortableTextMemberSchemaTypes,\n  PortableTextSlateEditor,\n} from '../../types/editor'\nimport {debugWithName} from '../../utils/debug'\nimport type {EditorActor} from '../editor-machine'\n\nconst debug = debugWithName('plugin:withSchemaTypes')\n/**\n * This plugin makes sure that schema types are recognized properly by Slate as blocks, voids, inlines\n *\n */\nexport function createWithSchemaTypes({\n  editorActor,\n  schemaTypes,\n}: {\n  editorActor: EditorActor\n  schemaTypes: PortableTextMemberSchemaTypes\n}) {\n  return function withSchemaTypes(\n    editor: PortableTextSlateEditor,\n  ): PortableTextSlateEditor {\n    editor.isTextBlock = (value: unknown): value is PortableTextTextBlock => {\n      return (\n        isPortableTextTextBlock(value) && value._type === schemaTypes.block.name\n      )\n    }\n    editor.isTextSpan = (value: unknown): value is PortableTextSpan => {\n      return isPortableTextSpan(value) && value._type === schemaTypes.span.name\n    }\n    editor.isListBlock = (value: unknown): value is PortableTextListBlock => {\n      return (\n        isPortableTextListBlock(value) && value._type === schemaTypes.block.name\n      )\n    }\n    editor.isVoid = (element: Element): boolean => {\n      return (\n        schemaTypes.block.name !== element._type &&\n        (schemaTypes.blockObjects\n          .map((obj) => obj.name)\n          .includes(element._type) ||\n          schemaTypes.inlineObjects\n            .map((obj) => obj.name)\n            .includes(element._type))\n      )\n    }\n    editor.isInline = (element: Element): boolean => {\n      const inlineSchemaTypes = schemaTypes.inlineObjects.map((obj) => obj.name)\n      return (\n        inlineSchemaTypes.includes(element._type) &&\n        '__inline' in element &&\n        element.__inline === true\n      )\n    }\n\n    // Extend Slate's default normalization\n    const {normalizeNode} = editor\n    editor.normalizeNode = (entry) => {\n      const [node, path] = entry\n\n      // If text block children node is missing _type, set it to the span type\n      if (node._type === undefined && path.length === 2) {\n        debug('Setting span type on text node without a type')\n        const span = node as PortableTextSpan\n        const key =\n          span._key || editorActor.getSnapshot().context.keyGenerator()\n        editorActor.send({type: 'normalizing'})\n        Transforms.setNodes(\n          editor,\n          {...span, _type: schemaTypes.span.name, _key: key},\n          {at: path},\n        )\n        editorActor.send({type: 'done normalizing'})\n        return\n      }\n\n      // catches cases when the children are missing keys but excludes it when the normalize is running the node as the editor object\n      if (node._key === undefined && (path.length === 1 || path.length === 2)) {\n        debug('Setting missing key on child node without a key')\n        const key = editorActor.getSnapshot().context.keyGenerator()\n        editorActor.send({type: 'normalizing'})\n        Transforms.setNodes(editor, {_key: key}, {at: path})\n        editorActor.send({type: 'done normalizing'})\n        return\n      }\n\n      normalizeNode(entry)\n    }\n    return editor\n  }\n}\n","import {Editor, Range, Text, Transforms} from 'slate'\nimport type {\n  PortableTextMemberSchemaTypes,\n  PortableTextSlateEditor,\n} from '../../types/editor'\nimport {debugWithName} from '../../utils/debug'\nimport {toSlateValue} from '../../utils/values'\nimport type {EditorActor} from '../editor-machine'\n\nconst debug = debugWithName('plugin:withUtils')\n\ninterface Options {\n  editorActor: EditorActor\n  schemaTypes: PortableTextMemberSchemaTypes\n}\n/**\n * This plugin makes various util commands available in the editor\n *\n */\nexport function createWithUtils({editorActor, schemaTypes}: Options) {\n  return function withUtils(\n    editor: PortableTextSlateEditor,\n  ): PortableTextSlateEditor {\n    // Expands the the selection to wrap around the word the focus is at\n    editor.pteExpandToWord = () => {\n      const {selection} = editor\n      if (selection && !Range.isExpanded(selection)) {\n        const [textNode] = Editor.node(editor, selection.focus, {depth: 2})\n        if (!textNode || !Text.isText(textNode) || textNode.text.length === 0) {\n          debug(`pteExpandToWord: Can't expand to word here`)\n          return\n        }\n        const {focus} = selection\n        const focusOffset = focus.offset\n        const charsBefore = textNode.text.slice(0, focusOffset)\n        const charsAfter = textNode.text.slice(focusOffset, -1)\n        const isEmpty = (str: string) => str.match(/\\s/g)\n        const whiteSpaceBeforeIndex = charsBefore\n          .split('')\n          .reverse()\n          .findIndex((str) => isEmpty(str))\n        const newStartOffset =\n          whiteSpaceBeforeIndex > -1\n            ? charsBefore.length - whiteSpaceBeforeIndex\n            : 0\n        const whiteSpaceAfterIndex = charsAfter\n          .split('')\n          .findIndex((obj) => isEmpty(obj))\n        const newEndOffset =\n          charsBefore.length +\n          (whiteSpaceAfterIndex > -1\n            ? whiteSpaceAfterIndex\n            : charsAfter.length + 1)\n        if (\n          !(\n            newStartOffset === newEndOffset ||\n            Number.isNaN(newStartOffset) ||\n            Number.isNaN(newEndOffset)\n          )\n        ) {\n          debug('pteExpandToWord: Expanding to focused word')\n          Transforms.setSelection(editor, {\n            anchor: {...selection.anchor, offset: newStartOffset},\n            focus: {...selection.focus, offset: newEndOffset},\n          })\n          return\n        }\n        debug(`pteExpandToWord: Can't expand to word here`)\n      }\n    }\n\n    editor.pteCreateTextBlock = (options: {\n      decorators: Array<string>\n      listItem?: string\n      level?: number\n    }) => {\n      const block = toSlateValue(\n        [\n          {\n            _type: schemaTypes.block.name,\n            _key: editorActor.getSnapshot().context.keyGenerator(),\n            style: schemaTypes.styles[0].value || 'normal',\n            ...(options.listItem ? {listItem: options.listItem} : {}),\n            ...(options.level ? {level: options.level} : {}),\n            markDefs: [],\n            children: [\n              {\n                _type: 'span',\n                _key: editorActor.getSnapshot().context.keyGenerator(),\n                text: '',\n                marks: options.decorators.filter((decorator) =>\n                  schemaTypes.decorators.find(({value}) => value === decorator),\n                ),\n              },\n            ],\n          },\n        ],\n        {schemaTypes},\n      )[0]\n      return block\n    }\n    return editor\n  }\n}\n","import type {BaseOperation, Editor, Node, NodeEntry} from 'slate'\nimport type {PortableTextSlateEditor} from '../../types/editor'\nimport {createOperationToPatches} from '../../utils/operationToPatches'\nimport type {EditorActor} from '../editor-machine'\nimport {createWithEventListeners} from './create-with-event-listeners'\nimport {createWithMaxBlocks} from './createWithMaxBlocks'\nimport {createWithObjectKeys} from './createWithObjectKeys'\nimport {createWithPatches} from './createWithPatches'\nimport {createWithPlaceholderBlock} from './createWithPlaceholderBlock'\nimport {createWithPortableTextBlockStyle} from './createWithPortableTextBlockStyle'\nimport {createWithPortableTextMarkModel} from './createWithPortableTextMarkModel'\nimport {createWithPortableTextSelections} from './createWithPortableTextSelections'\nimport {createWithSchemaTypes} from './createWithSchemaTypes'\nimport {createWithUndoRedo} from './createWithUndoRedo'\nimport {createWithUtils} from './createWithUtils'\n\nexport interface OriginalEditorFunctions {\n  apply: (operation: BaseOperation) => void\n  onChange: () => void\n  normalizeNode: (entry: NodeEntry<Node>) => void\n}\n\ntype PluginsOptions = {\n  editorActor: EditorActor\n  subscriptions: Array<() => () => void>\n}\n\nexport const withPlugins = <T extends Editor>(\n  editor: T,\n  options: PluginsOptions,\n): PortableTextSlateEditor => {\n  const e = editor as T & PortableTextSlateEditor\n  const {editorActor} = options\n  const schemaTypes = editorActor.getSnapshot().context.schema\n  const operationToPatches = createOperationToPatches(schemaTypes)\n  const withObjectKeys = createWithObjectKeys(editorActor, schemaTypes)\n  const withSchemaTypes = createWithSchemaTypes({\n    editorActor,\n    schemaTypes,\n  })\n  const withPatches = createWithPatches({\n    editorActor,\n    patchFunctions: operationToPatches,\n    schemaTypes,\n    subscriptions: options.subscriptions,\n  })\n  const withMaxBlocks = createWithMaxBlocks(editorActor)\n  const withUndoRedo = createWithUndoRedo({\n    editorActor,\n    blockSchemaType: schemaTypes.block,\n    subscriptions: options.subscriptions,\n  })\n  const withPortableTextMarkModel = createWithPortableTextMarkModel(\n    editorActor,\n    schemaTypes,\n  )\n  const withPortableTextBlockStyle = createWithPortableTextBlockStyle(\n    editorActor,\n    schemaTypes,\n  )\n\n  const withPlaceholderBlock = createWithPlaceholderBlock(editorActor)\n\n  const withUtils = createWithUtils({\n    editorActor,\n    schemaTypes,\n  })\n  const withPortableTextSelections = createWithPortableTextSelections(\n    editorActor,\n    schemaTypes,\n  )\n  const withEventListeners = createWithEventListeners(\n    editorActor,\n    options.subscriptions,\n  )\n\n  // Ordering is important here, selection dealing last, data manipulation in the middle and core model stuff first.\n  return withEventListeners(\n    withSchemaTypes(\n      withObjectKeys(\n        withPortableTextMarkModel(\n          withPortableTextBlockStyle(\n            withPlaceholderBlock(\n              withUtils(\n                withMaxBlocks(\n                  withUndoRedo(withPatches(withPortableTextSelections(e))),\n                ),\n              ),\n            ),\n          ),\n        ),\n      ),\n    ),\n  )\n}\n","import {createEditor, type Descendant} from 'slate'\nimport {withReact} from 'slate-react'\nimport type {PortableTextSlateEditor} from '../types/editor'\nimport {debugWithName} from '../utils/debug'\nimport {KEY_TO_SLATE_ELEMENT, KEY_TO_VALUE_ELEMENT} from '../utils/weakMaps'\nimport type {EditorActor} from './editor-machine'\nimport {withPlugins} from './plugins/with-plugins'\n\nconst debug = debugWithName('component:PortableTextEditor:SlateContainer')\n\ntype SlateEditorConfig = {\n  editorActor: EditorActor\n}\n\n/**\n * @internal\n */\nexport type SlateEditor = {\n  instance: PortableTextSlateEditor\n  initialValue: Array<Descendant>\n}\n\nconst slateEditors = new WeakMap<EditorActor, SlateEditor>()\n\nexport function createSlateEditor(config: SlateEditorConfig): SlateEditor {\n  const existingSlateEditor = slateEditors.get(config.editorActor)\n\n  if (existingSlateEditor) {\n    debug('Reusing existing Slate editor instance', config.editorActor.id)\n    return existingSlateEditor\n  }\n\n  debug('Creating new Slate editor instance', config.editorActor.id)\n\n  const unsubscriptions: Array<() => void> = []\n  const subscriptions: Array<() => () => void> = []\n\n  const instance = withPlugins(withReact(createEditor()), {\n    editorActor: config.editorActor,\n    subscriptions,\n  })\n\n  KEY_TO_VALUE_ELEMENT.set(instance, {})\n  KEY_TO_SLATE_ELEMENT.set(instance, {})\n\n  for (const subscription of subscriptions) {\n    unsubscriptions.push(subscription())\n  }\n\n  const initialValue = [instance.pteCreateTextBlock({decorators: []})]\n\n  const slateEditor: SlateEditor = {\n    instance,\n    initialValue,\n  }\n\n  slateEditors.set(config.editorActor, slateEditor)\n\n  return slateEditor\n}\n","import {Editor, Transforms} from 'slate'\nimport type {BehaviorActionImplementation} from './behavior.actions'\nimport {createGuards} from './behavior.guards'\n\nexport const toggleListItemActionImplementation: BehaviorActionImplementation<\n  'list item.toggle'\n> = ({context, action}) => {\n  const isActive = isListItemActive({\n    editor: action.editor,\n    listItem: action.listItem,\n  })\n\n  if (isActive) {\n    removeListItemActionImplementation({\n      context,\n      action: {...action, type: 'list item.remove'},\n    })\n  } else {\n    addListItemActionImplementation({\n      context,\n      action: {...action, type: 'list item.add'},\n    })\n  }\n}\n\nexport const removeListItemActionImplementation: BehaviorActionImplementation<\n  'list item.remove'\n> = ({context, action}) => {\n  if (!action.editor.selection) {\n    return\n  }\n\n  const guards = createGuards(context)\n\n  const selectedBlocks = [\n    ...Editor.nodes(action.editor, {\n      at: action.editor.selection,\n      match: (node) => guards.isListBlock(node),\n    }),\n  ]\n\n  for (const [, at] of selectedBlocks) {\n    Transforms.unsetNodes(action.editor, ['listItem', 'level'], {at})\n  }\n}\n\nexport const addListItemActionImplementation: BehaviorActionImplementation<\n  'list item.add'\n> = ({context, action}) => {\n  if (!action.editor.selection) {\n    return\n  }\n\n  const guards = createGuards(context)\n\n  const selectedBlocks = [\n    ...Editor.nodes(action.editor, {\n      at: action.editor.selection,\n      match: (node) => guards.isTextBlock(node),\n    }),\n  ]\n\n  for (const [, at] of selectedBlocks) {\n    Transforms.setNodes(\n      action.editor,\n      {\n        level: 1,\n        listItem: action.listItem,\n      },\n      {at},\n    )\n  }\n}\n\nexport function isListItemActive({\n  editor,\n  listItem,\n}: {\n  editor: Editor\n  listItem: string\n}): boolean {\n  if (!editor.selection) {\n    return false\n  }\n\n  const selectedBlocks = [\n    ...Editor.nodes(editor, {\n      at: editor.selection,\n      match: (node) => editor.isTextBlock(node),\n    }),\n  ]\n\n  if (selectedBlocks.length > 0) {\n    return selectedBlocks.every(\n      ([node]) => editor.isListBlock(node) && node.listItem === listItem,\n    )\n  }\n\n  return false\n}\n","import {Editor, Transforms} from 'slate'\nimport type {BehaviorActionImplementation} from './behavior.actions'\nimport {createGuards} from './behavior.guards'\n\nexport const toggleStyleActionImplementation: BehaviorActionImplementation<\n  'style.toggle'\n> = ({context, action}) => {\n  const isActive = isStyleActive({\n    editor: action.editor,\n    style: action.style,\n  })\n\n  if (isActive) {\n    removeStyleActionImplementation({\n      context,\n      action: {...action, type: 'style.remove'},\n    })\n  } else {\n    addStyleActionImplementation({\n      context,\n      action: {...action, type: 'style.add'},\n    })\n  }\n}\n\nexport const removeStyleActionImplementation: BehaviorActionImplementation<\n  'style.remove'\n> = ({context, action}) => {\n  if (!action.editor.selection) {\n    return\n  }\n\n  const defaultStyle = context.schema.styles[0].value\n  const guards = createGuards(context)\n\n  const selectedBlocks = [\n    ...Editor.nodes(action.editor, {\n      at: action.editor.selection,\n      match: (node) => guards.isTextBlock(node),\n    }),\n  ]\n\n  for (const [, at] of selectedBlocks) {\n    Transforms.setNodes(\n      action.editor,\n      {\n        style: defaultStyle,\n      },\n      {\n        at,\n      },\n    )\n  }\n}\n\nexport const addStyleActionImplementation: BehaviorActionImplementation<\n  'style.add'\n> = ({context, action}) => {\n  if (!action.editor.selection) {\n    return\n  }\n\n  const guards = createGuards(context)\n\n  const selectedBlocks = [\n    ...Editor.nodes(action.editor, {\n      at: action.editor.selection,\n      match: (node) => guards.isTextBlock(node),\n    }),\n  ]\n\n  for (const [, at] of selectedBlocks) {\n    Transforms.setNodes(\n      action.editor,\n      {\n        style: action.style,\n      },\n      {\n        at,\n      },\n    )\n  }\n}\n\nexport function isStyleActive({\n  editor,\n  style,\n}: {\n  editor: Editor\n  style: string\n}): boolean {\n  if (!editor.selection) {\n    return false\n  }\n\n  const selectedBlocks = [\n    ...Editor.nodes(editor, {\n      at: editor.selection,\n      match: (node) => editor.isTextBlock(node),\n    }),\n  ]\n\n  if (selectedBlocks.length > 0) {\n    return selectedBlocks.every(([node]) => node.style === style)\n  }\n\n  return false\n}\n","import {\n  isPortableTextSpan,\n  type Path,\n  type PortableTextBlock,\n  type PortableTextChild,\n  type PortableTextObject,\n  type PortableTextSpan,\n  type PortableTextTextBlock,\n} from '@sanity/types'\nimport {\n  Editor,\n  Node,\n  Range,\n  Element as SlateElement,\n  Path as SlatePath,\n  Text,\n  Transforms,\n} from 'slate'\nimport type {DOMNode} from 'slate-dom'\nimport {ReactEditor} from 'slate-react'\nimport {isListItemActive} from '../../behavior-actions/behavior.action.list-item'\nimport {isStyleActive} from '../../behavior-actions/behavior.action.style'\nimport type {BehaviorActionImplementation} from '../../behavior-actions/behavior.actions'\nimport type {\n  EditableAPI,\n  EditableAPIDeleteOptions,\n  EditorSelection,\n  PortableTextSlateEditor,\n} from '../../types/editor'\nimport {debugWithName} from '../../utils/debug'\nimport {toPortableTextRange, toSlateRange} from '../../utils/ranges'\nimport {fromSlateValue, toSlateValue} from '../../utils/values'\nimport {\n  KEY_TO_VALUE_ELEMENT,\n  SLATE_TO_PORTABLE_TEXT_RANGE,\n} from '../../utils/weakMaps'\nimport type {EditorActor} from '../editor-machine'\nimport {isDecoratorActive} from './createWithPortableTextMarkModel'\n\nconst debug = debugWithName('API:editable')\n\nexport function createEditableAPI(\n  editor: PortableTextSlateEditor,\n  editorActor: EditorActor,\n) {\n  const types = editorActor.getSnapshot().context.schema\n\n  const editableApi: EditableAPI = {\n    focus: (): void => {\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'focus',\n        },\n        editor,\n      })\n    },\n    blur: (): void => {\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'blur',\n        },\n        editor,\n      })\n    },\n    toggleMark: (mark: string): void => {\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'decorator.toggle',\n          decorator: mark,\n        },\n        editor,\n      })\n    },\n    toggleList: (listItem: string): void => {\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'list item.toggle',\n          listItem,\n        },\n        editor,\n      })\n    },\n    toggleBlockStyle: (style: string): void => {\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'style.toggle',\n          style,\n        },\n        editor,\n      })\n    },\n    isMarkActive: (mark: string): boolean => {\n      // Try/catch this, as Slate may error because the selection is currently wrong\n      // TODO: catch only relevant error from Slate\n      try {\n        return isDecoratorActive({editor, decorator: mark})\n      } catch (err) {\n        console.warn(err)\n        return false\n      }\n    },\n    marks: (): string[] => {\n      return (\n        {\n          ...(Editor.marks(editor) || {}),\n        }.marks || []\n      )\n    },\n    undo: (): void => editor.undo(),\n    redo: (): void => editor.redo(),\n    select: (selection: EditorSelection): void => {\n      const slateSelection = toSlateRange(selection, editor)\n      if (slateSelection) {\n        Transforms.select(editor, slateSelection)\n      } else {\n        Transforms.deselect(editor)\n      }\n      editor.onChange()\n    },\n    focusBlock: (): PortableTextBlock | undefined => {\n      if (editor.selection) {\n        const block = Node.descendant(\n          editor,\n          editor.selection.focus.path.slice(0, 1),\n        )\n        if (block) {\n          return fromSlateValue(\n            [block],\n            types.block.name,\n            KEY_TO_VALUE_ELEMENT.get(editor),\n          )[0]\n        }\n      }\n      return undefined\n    },\n    focusChild: (): PortableTextChild | undefined => {\n      if (editor.selection) {\n        const block = Node.descendant(\n          editor,\n          editor.selection.focus.path.slice(0, 1),\n        )\n        if (block && editor.isTextBlock(block)) {\n          const ptBlock = fromSlateValue(\n            [block],\n            types.block.name,\n            KEY_TO_VALUE_ELEMENT.get(editor),\n          )[0] as PortableTextTextBlock\n          return ptBlock.children[editor.selection.focus.path[1]]\n        }\n      }\n      return undefined\n    },\n    insertChild: <TSchemaType extends {name: string}>(\n      type: TSchemaType,\n      value?: {[prop: string]: any},\n    ): Path => {\n      if (type.name !== types.span.name) {\n        editorActor.send({\n          type: 'behavior event',\n          behaviorEvent: {\n            type: 'insert.inline object',\n            inlineObject: {\n              name: type.name,\n              value,\n            },\n          },\n          editor,\n        })\n\n        return (\n          toPortableTextRange(\n            fromSlateValue(\n              editor.children,\n              types.block.name,\n              KEY_TO_VALUE_ELEMENT.get(editor),\n            ),\n            editor.selection,\n            types,\n          )?.focus.path ?? []\n        )\n      }\n\n      if (!editor.selection) {\n        throw new Error('The editor has no selection')\n      }\n      const [focusBlock] = Array.from(\n        Editor.nodes(editor, {\n          at: editor.selection.focus.path.slice(0, 1),\n          match: (n) => n._type === types.block.name,\n        }),\n      )[0] || [undefined]\n      if (!focusBlock) {\n        throw new Error('No focused text block')\n      }\n      if (\n        type.name !== types.span.name &&\n        !types.inlineObjects.some((t) => t.name === type.name)\n      ) {\n        throw new Error(\n          'This type cannot be inserted as a child to a text block',\n        )\n      }\n      const block = toSlateValue(\n        [\n          {\n            _key: editorActor.getSnapshot().context.keyGenerator(),\n            _type: types.block.name,\n            children: [\n              {\n                _key: editorActor.getSnapshot().context.keyGenerator(),\n                _type: type.name,\n                ...(value ? value : {}),\n              },\n            ],\n          },\n        ],\n        {schemaTypes: editorActor.getSnapshot().context.schema},\n      )[0] as unknown as SlateElement\n      const child = block.children[0]\n      const focusChildPath = editor.selection.focus.path.slice(0, 2)\n      const isSpanNode = child._type === types.span.name\n      const focusNode = Node.get(editor, focusChildPath)\n\n      // If we are inserting a span, and currently have focus on an inline object,\n      // move the selection to the next span (guaranteed by normalizing rules) before inserting it.\n      if (isSpanNode && focusNode._type !== types.span.name) {\n        debug(\n          'Inserting span child next to inline object child, moving selection + 1',\n        )\n        editor.move({distance: 1, unit: 'character'})\n      }\n\n      Transforms.insertNodes(editor, child, {\n        select: true,\n        at: editor.selection,\n      })\n      editor.onChange()\n\n      return (\n        toPortableTextRange(\n          fromSlateValue(\n            editor.children,\n            types.block.name,\n            KEY_TO_VALUE_ELEMENT.get(editor),\n          ),\n          editor.selection,\n          types,\n        )?.focus.path || []\n      )\n    },\n    insertBlock: <TSchemaType extends {name: string}>(\n      type: TSchemaType,\n      value?: {[prop: string]: any},\n    ): Path => {\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'insert.block object',\n          blockObject: {\n            name: type.name,\n            value,\n          },\n          placement: 'auto',\n        },\n        editor,\n      })\n\n      return (\n        toPortableTextRange(\n          fromSlateValue(\n            editor.children,\n            types.block.name,\n            KEY_TO_VALUE_ELEMENT.get(editor),\n          ),\n          editor.selection,\n          types,\n        )?.focus.path ?? []\n      )\n    },\n    hasBlockStyle: (style: string): boolean => {\n      try {\n        return isStyleActive({editor, style})\n      } catch {\n        // This is fine.\n        return false\n      }\n    },\n    hasListStyle: (listItem: string): boolean => {\n      try {\n        return isListItemActive({editor, listItem})\n      } catch {\n        // This is fine.\n        return false\n      }\n    },\n    isVoid: (element: PortableTextBlock | PortableTextChild) => {\n      return ![types.block.name, types.span.name].includes(element._type)\n    },\n    findByPath: (\n      path: Path,\n    ): [\n      PortableTextBlock | PortableTextChild | undefined,\n      Path | undefined,\n    ] => {\n      const slatePath = toSlateRange(\n        {focus: {path, offset: 0}, anchor: {path, offset: 0}},\n        editor,\n      )\n      if (slatePath) {\n        const [block, blockPath] = Editor.node(\n          editor,\n          slatePath.focus.path.slice(0, 1),\n        )\n        if (block && blockPath && typeof block._key === 'string') {\n          if (path.length === 1 && slatePath.focus.path.length === 1) {\n            return [\n              fromSlateValue([block], types.block.name)[0],\n              [{_key: block._key}],\n            ]\n          }\n          const ptBlock = fromSlateValue(\n            [block],\n            types.block.name,\n            KEY_TO_VALUE_ELEMENT.get(editor),\n          )[0]\n          if (editor.isTextBlock(ptBlock)) {\n            const ptChild = ptBlock.children[slatePath.focus.path[1]]\n            if (ptChild) {\n              return [\n                ptChild,\n                [{_key: block._key}, 'children', {_key: ptChild._key}],\n              ]\n            }\n          }\n        }\n      }\n      return [undefined, undefined]\n    },\n    findDOMNode: (\n      element: PortableTextBlock | PortableTextChild,\n    ): DOMNode | undefined => {\n      let node: DOMNode | undefined\n      try {\n        const [item] = Array.from(\n          Editor.nodes(editor, {\n            at: [],\n            match: (n) => n._key === element._key,\n          }) || [],\n        )[0] || [undefined]\n        node = ReactEditor.toDOMNode(editor, item)\n      } catch {\n        // Nothing\n      }\n      return node\n    },\n    activeAnnotations: (): PortableTextObject[] => {\n      if (!editor.selection || editor.selection.focus.path.length < 2) {\n        return []\n      }\n      try {\n        const activeAnnotations: PortableTextObject[] = []\n        const spans = Editor.nodes(editor, {\n          at: editor.selection,\n          match: (node) =>\n            Text.isText(node) &&\n            node.marks !== undefined &&\n            Array.isArray(node.marks) &&\n            node.marks.length > 0,\n        })\n        for (const [span, path] of spans) {\n          const [block] = Editor.node(editor, path, {depth: 1})\n          if (editor.isTextBlock(block)) {\n            block.markDefs?.forEach((def) => {\n              if (\n                Text.isText(span) &&\n                span.marks &&\n                Array.isArray(span.marks) &&\n                span.marks.includes(def._key)\n              ) {\n                activeAnnotations.push(def)\n              }\n            })\n          }\n        }\n        return activeAnnotations\n      } catch {\n        return []\n      }\n    },\n    isAnnotationActive: (\n      annotationType: PortableTextObject['_type'],\n    ): boolean => {\n      return isAnnotationActive({editor, annotation: {name: annotationType}})\n    },\n    addAnnotation: (type, value) => {\n      let paths: ReturnType<EditableAPI['addAnnotation']> = undefined\n\n      Editor.withoutNormalizing(editor, () => {\n        paths = addAnnotationActionImplementation({\n          context: {\n            keyGenerator: editorActor.getSnapshot().context.keyGenerator,\n            schema: types,\n          },\n          action: {\n            type: 'annotation.add',\n            annotation: {name: type.name, value: value ?? {}},\n            editor,\n          },\n        })\n      })\n      editor.onChange()\n\n      return paths\n    },\n    delete: (\n      selection: EditorSelection,\n      options?: EditableAPIDeleteOptions,\n    ): void => {\n      if (selection) {\n        const range = toSlateRange(selection, editor)\n        const hasRange =\n          range && range.anchor.path.length > 0 && range.focus.path.length > 0\n        if (!hasRange) {\n          throw new Error('Invalid range')\n        }\n        if (range) {\n          if (!options?.mode || options?.mode === 'selected') {\n            debug(`Deleting content in selection`)\n            Transforms.delete(editor, {\n              at: range,\n              hanging: true,\n              voids: true,\n            })\n            editor.onChange()\n            return\n          }\n          if (options?.mode === 'blocks') {\n            debug(`Deleting blocks touched by selection`)\n            Transforms.removeNodes(editor, {\n              at: range,\n              voids: true,\n              match: (node) => {\n                return (\n                  editor.isTextBlock(node) ||\n                  (!editor.isTextBlock(node) && SlateElement.isElement(node))\n                )\n              },\n            })\n          }\n          if (options?.mode === 'children') {\n            debug(`Deleting children touched by selection`)\n            Transforms.removeNodes(editor, {\n              at: range,\n              voids: true,\n              match: (node) => {\n                return (\n                  node._type === types.span.name || // Text children\n                  (!editor.isTextBlock(node) && SlateElement.isElement(node)) // inline blocks\n                )\n              },\n            })\n          }\n          // If the editor was emptied, insert a placeholder block\n          // directly into the editor's children. We don't want to do this\n          // through a Transform (because that would trigger a change event\n          // that would insert the placeholder into the actual value\n          // which should remain empty)\n          if (editor.children.length === 0) {\n            editor.children = [editor.pteCreateTextBlock({decorators: []})]\n          }\n          editor.onChange()\n        }\n      }\n    },\n    removeAnnotation: <TSchemaType extends {name: string}>(\n      type: TSchemaType,\n    ): void => {\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'annotation.remove',\n          annotation: {name: type.name},\n        },\n        editor,\n      })\n    },\n    getSelection: (): EditorSelection | null => {\n      let ptRange: EditorSelection = null\n      if (editor.selection) {\n        const existing = SLATE_TO_PORTABLE_TEXT_RANGE.get(editor.selection)\n        if (existing) {\n          return existing\n        }\n        ptRange = toPortableTextRange(\n          fromSlateValue(\n            editor.children,\n            types.block.name,\n            KEY_TO_VALUE_ELEMENT.get(editor),\n          ),\n          editor.selection,\n          types,\n        )\n        SLATE_TO_PORTABLE_TEXT_RANGE.set(editor.selection, ptRange)\n      }\n      return ptRange\n    },\n    getValue: () => {\n      return fromSlateValue(\n        editor.children,\n        types.block.name,\n        KEY_TO_VALUE_ELEMENT.get(editor),\n      )\n    },\n    isCollapsedSelection: () => {\n      return !!editor.selection && Range.isCollapsed(editor.selection)\n    },\n    isExpandedSelection: () => {\n      return !!editor.selection && Range.isExpanded(editor.selection)\n    },\n    insertBreak: () => {\n      editor.insertBreak()\n      editor.onChange()\n    },\n    getFragment: () => {\n      return fromSlateValue(editor.getFragment(), types.block.name)\n    },\n    isSelectionsOverlapping: (\n      selectionA: EditorSelection,\n      selectionB: EditorSelection,\n    ) => {\n      // Convert the selections to Slate ranges\n      const rangeA = toSlateRange(selectionA, editor)\n      const rangeB = toSlateRange(selectionB, editor)\n\n      // Make sure the ranges are valid\n      const isValidRanges = Range.isRange(rangeA) && Range.isRange(rangeB)\n\n      // Check if the ranges are overlapping\n      const isOverlapping = isValidRanges && Range.includes(rangeA, rangeB)\n\n      return isOverlapping\n    },\n  }\n\n  return editableApi\n}\n\nfunction isAnnotationActive({\n  editor,\n  annotation,\n}: {\n  editor: PortableTextSlateEditor\n  annotation: {\n    name: string\n  }\n}) {\n  if (!editor.selection || editor.selection.focus.path.length < 2) {\n    return false\n  }\n\n  try {\n    const spans = [\n      ...Editor.nodes(editor, {\n        at: editor.selection,\n        match: (node) => Text.isText(node),\n      }),\n    ]\n\n    if (spans.length === 0) {\n      return false\n    }\n\n    if (\n      spans.some(\n        ([span]) =>\n          !isPortableTextSpan(span) || !span.marks || span.marks?.length === 0,\n      )\n    )\n      return false\n\n    const selectionMarkDefs = spans.reduce((accMarkDefs, [, path]) => {\n      const [block] = Editor.node(editor, path, {depth: 1})\n      if (editor.isTextBlock(block) && block.markDefs) {\n        return [...accMarkDefs, ...block.markDefs]\n      }\n      return accMarkDefs\n    }, [] as PortableTextObject[])\n\n    return spans.every(([span]) => {\n      if (!isPortableTextSpan(span)) return false\n\n      const spanMarkDefs = span.marks?.map(\n        (markKey) =>\n          selectionMarkDefs.find((def) => def?._key === markKey)?._type,\n      )\n\n      return spanMarkDefs?.includes(annotation.name)\n    })\n  } catch {\n    return false\n  }\n}\n\n/**\n * @public\n */\nexport type AddedAnnotationPaths = {\n  /**\n   * @deprecated An annotation may be applied to multiple blocks, resulting\n   * in multiple `markDef`'s being created. Use `markDefPaths` instead.\n   */\n  markDefPath: Path\n  markDefPaths: Array<Path>\n  /**\n   * @deprecated Does not return anything meaningful since an annotation\n   * can span multiple blocks and spans. If references the span closest\n   * to the focus point of the selection.\n   */\n  spanPath: Path\n}\n\nexport const addAnnotationActionImplementation: BehaviorActionImplementation<\n  'annotation.add',\n  AddedAnnotationPaths | undefined\n> = ({context, action}) => {\n  const editor = action.editor\n  const {selection: originalSelection} = editor\n  let paths: AddedAnnotationPaths | undefined = undefined\n\n  if (originalSelection) {\n    if (Range.isCollapsed(originalSelection)) {\n      editor.pteExpandToWord()\n      editor.onChange()\n    }\n\n    // If we still have a selection, add the annotation to the selected text\n    if (editor.selection) {\n      let spanPath: Path | undefined\n      let markDefPath: Path | undefined\n      const markDefPaths: Path[] = []\n\n      if (!editor.selection) {\n        return\n      }\n\n      const selectedBlocks = Editor.nodes(editor, {\n        at: editor.selection,\n        match: (node) => editor.isTextBlock(node),\n        reverse: Range.isBackward(editor.selection),\n      })\n\n      for (const [block, blockPath] of selectedBlocks) {\n        if (block.children.length === 0) {\n          continue\n        }\n\n        if (block.children.length === 1 && block.children[0].text === '') {\n          continue\n        }\n\n        const annotationKey = context.keyGenerator()\n        const markDefs = block.markDefs ?? []\n        const existingMarkDef = markDefs.find(\n          (markDef) =>\n            markDef._type === action.annotation.name &&\n            markDef._key === annotationKey,\n        )\n\n        if (existingMarkDef === undefined) {\n          Transforms.setNodes(\n            editor,\n            {\n              markDefs: [\n                ...markDefs,\n                {\n                  _type: action.annotation.name,\n                  _key: annotationKey,\n                  ...action.annotation.value,\n                },\n              ],\n            },\n            {at: blockPath},\n          )\n\n          markDefPath = [{_key: block._key}, 'markDefs', {_key: annotationKey}]\n          if (Range.isBackward(editor.selection)) {\n            markDefPaths.unshift(markDefPath)\n          } else {\n            markDefPaths.push(markDefPath)\n          }\n        }\n\n        Transforms.setNodes(editor, {}, {match: Text.isText, split: true})\n\n        const children = Node.children(editor, blockPath)\n\n        for (const [span, path] of children) {\n          if (!editor.isTextSpan(span)) {\n            continue\n          }\n\n          if (!Range.includes(editor.selection, path)) {\n            continue\n          }\n\n          const marks = span.marks ?? []\n          const existingSameTypeAnnotations = marks.filter((mark) =>\n            markDefs.some(\n              (markDef) =>\n                markDef._key === mark &&\n                markDef._type === action.annotation.name,\n            ),\n          )\n\n          Transforms.setNodes(\n            editor,\n            {\n              marks: [\n                ...marks.filter(\n                  (mark) => !existingSameTypeAnnotations.includes(mark),\n                ),\n                annotationKey,\n              ],\n            },\n            {at: path},\n          )\n          spanPath = [{_key: block._key}, 'children', {_key: span._key}]\n        }\n      }\n\n      if (markDefPath && spanPath) {\n        paths = {\n          markDefPath,\n          markDefPaths,\n          spanPath,\n        }\n      }\n    }\n  }\n  return paths\n}\n\nexport const removeAnnotationActionImplementation: BehaviorActionImplementation<\n  'annotation.remove'\n> = ({action}) => {\n  const editor = action.editor\n\n  debug('Removing annotation', action.annotation.name)\n\n  if (!editor.selection) {\n    return\n  }\n\n  if (Range.isCollapsed(editor.selection)) {\n    const [block, blockPath] = Editor.node(editor, editor.selection, {\n      depth: 1,\n    })\n\n    if (!editor.isTextBlock(block)) {\n      return\n    }\n\n    const markDefs = block.markDefs ?? []\n    const potentialAnnotations = markDefs.filter(\n      (markDef) => markDef._type === action.annotation.name,\n    )\n\n    const [selectedChild, selectedChildPath] = Editor.node(\n      editor,\n      editor.selection,\n      {\n        depth: 2,\n      },\n    )\n\n    if (!editor.isTextSpan(selectedChild)) {\n      return\n    }\n\n    const annotationToRemove = selectedChild.marks?.find((mark) =>\n      potentialAnnotations.some((markDef) => markDef._key === mark),\n    )\n\n    if (!annotationToRemove) {\n      return\n    }\n\n    const previousSpansWithSameAnnotation: Array<\n      [span: PortableTextSpan, path: SlatePath]\n    > = []\n\n    for (const [child, childPath] of Node.children(editor, blockPath, {\n      reverse: true,\n    })) {\n      if (!editor.isTextSpan(child)) {\n        continue\n      }\n\n      if (!SlatePath.isBefore(childPath, selectedChildPath)) {\n        continue\n      }\n\n      if (child.marks?.includes(annotationToRemove)) {\n        previousSpansWithSameAnnotation.push([child, childPath])\n      } else {\n        break\n      }\n    }\n\n    const nextSpansWithSameAnnotation: Array<\n      [span: PortableTextSpan, path: SlatePath]\n    > = []\n\n    for (const [child, childPath] of Node.children(editor, blockPath)) {\n      if (!editor.isTextSpan(child)) {\n        continue\n      }\n\n      if (!SlatePath.isAfter(childPath, selectedChildPath)) {\n        continue\n      }\n\n      if (child.marks?.includes(annotationToRemove)) {\n        nextSpansWithSameAnnotation.push([child, childPath])\n      } else {\n        break\n      }\n    }\n\n    for (const [child, childPath] of [\n      ...previousSpansWithSameAnnotation,\n      [selectedChild, selectedChildPath] as const,\n      ...nextSpansWithSameAnnotation,\n    ]) {\n      Transforms.setNodes(\n        editor,\n        {\n          marks: child.marks?.filter((mark) => mark !== annotationToRemove),\n        },\n        {at: childPath},\n      )\n    }\n  } else {\n    Transforms.setNodes(\n      editor,\n      {},\n      {\n        match: (node) => editor.isTextSpan(node),\n        split: true,\n        hanging: true,\n      },\n    )\n\n    const blocks = Editor.nodes(editor, {\n      at: editor.selection,\n      match: (node) => editor.isTextBlock(node),\n    })\n\n    for (const [block, blockPath] of blocks) {\n      const children = Node.children(editor, blockPath)\n\n      for (const [child, childPath] of children) {\n        if (!editor.isTextSpan(child)) {\n          continue\n        }\n\n        if (!Range.includes(editor.selection, childPath)) {\n          continue\n        }\n\n        const markDefs = block.markDefs ?? []\n        const marks = child.marks ?? []\n        const marksWithoutAnnotation = marks.filter((mark) => {\n          const markDef = markDefs.find((markDef) => markDef._key === mark)\n          return markDef?._type !== action.annotation.name\n        })\n\n        if (marksWithoutAnnotation.length !== marks.length) {\n          Transforms.setNodes(\n            editor,\n            {\n              marks: marksWithoutAnnotation,\n            },\n            {at: childPath},\n          )\n        }\n      }\n    }\n  }\n}\n\nexport const toggleAnnotationActionImplementation: BehaviorActionImplementation<\n  'annotation.toggle',\n  AddedAnnotationPaths | undefined\n> = ({context, action}) => {\n  const isActive = isAnnotationActive({\n    editor: action.editor,\n    annotation: {name: action.annotation.name},\n  })\n\n  if (isActive) {\n    removeAnnotationActionImplementation({\n      context,\n      action: {\n        type: 'annotation.remove',\n        annotation: action.annotation,\n        editor: action.editor,\n      },\n    })\n  } else {\n    return addAnnotationActionImplementation({\n      context,\n      action: {\n        type: 'annotation.add',\n        annotation: action.annotation,\n        editor: action.editor,\n      },\n    })\n  }\n}\n","import {Editor, Transforms, type Descendant} from 'slate'\nimport type {EditorSchema} from '../editor/define-schema'\nimport type {PortableTextSlateEditor} from '../types/editor'\nimport {isEqualToEmptyEditor} from '../utils/values'\n\nexport function insertBlock({\n  block,\n  placement,\n  editor,\n  schema,\n}: {\n  block: Descendant\n  placement: 'auto' | 'after' | 'before'\n  editor: PortableTextSlateEditor\n  schema: EditorSchema\n}) {\n  if (!editor.selection) {\n    const lastBlock = Array.from(\n      Editor.nodes(editor, {\n        match: (n) => !Editor.isEditor(n),\n        at: [],\n        reverse: true,\n      }),\n    )[0]\n\n    // If there is no selection, let's just insert the new block at the\n    // end of the document\n    Editor.insertNode(editor, block)\n\n    if (lastBlock && isEqualToEmptyEditor([lastBlock[0]], schema)) {\n      // And if the last block was an empty text block, let's remove\n      // that too\n      Transforms.removeNodes(editor, {at: lastBlock[1]})\n    }\n  } else {\n    const [focusBlock, focusBlockPath] = Array.from(\n      Editor.nodes(editor, {\n        at: editor.selection.focus.path.slice(0, 1),\n        match: (n) => !Editor.isEditor(n),\n      }),\n    )[0] ?? [undefined, undefined]\n\n    if (placement === 'after') {\n      const nextPath = [focusBlockPath[0] + 1]\n\n      Transforms.insertNodes(editor, block, {at: nextPath})\n      Transforms.select(editor, {\n        anchor: {path: [nextPath[0], 0], offset: 0},\n        focus: {path: [nextPath[0], 0], offset: 0},\n      })\n    } else if (placement === 'before') {\n      Transforms.insertNodes(editor, block, {at: focusBlockPath})\n    } else {\n      Editor.insertNode(editor, block)\n    }\n\n    if (focusBlock && isEqualToEmptyEditor([focusBlock], schema)) {\n      Transforms.removeNodes(editor, {at: focusBlockPath})\n    }\n  }\n}\n","import {toSlateValue} from '../utils/values'\nimport {insertBlock} from './behavior.action-utils.insert-block'\nimport type {BehaviorActionImplementation} from './behavior.actions'\n\nexport const insertBlockObjectActionImplementation: BehaviorActionImplementation<\n  'insert.block object'\n> = ({context, action}) => {\n  const block = toSlateValue(\n    [\n      {\n        _key: context.keyGenerator(),\n        _type: action.blockObject.name,\n        ...(action.blockObject.value ? action.blockObject.value : {}),\n      },\n    ],\n    {schemaTypes: context.schema},\n  )[0]\n\n  insertBlock({\n    block,\n    placement: action.placement,\n    editor: action.editor,\n    schema: context.schema,\n  })\n}\n","import {isEqual} from 'lodash'\nimport {Editor, Node, Path, Range, Transforms} from 'slate'\nimport type {SlateTextBlock, VoidElement} from '../types/slate'\nimport type {BehaviorActionImplementation} from './behavior.actions'\n\nexport const insertBreakActionImplementation: BehaviorActionImplementation<\n  'insert.break'\n> = ({context, action}) => {\n  const keyGenerator = context.keyGenerator\n  const schema = context.schema\n  const editor = action.editor\n\n  if (!editor.selection) {\n    return\n  }\n\n  const [focusSpan] = Array.from(\n    Editor.nodes(editor, {\n      mode: 'lowest',\n      at: editor.selection.focus,\n      match: (n) => editor.isTextSpan(n),\n      voids: false,\n    }),\n  )[0] ?? [undefined]\n  const focusDecorators =\n    focusSpan?.marks?.filter((mark) =>\n      schema.decorators.some((decorator) => decorator.value === mark),\n    ) ?? []\n  const focusAnnotations =\n    focusSpan?.marks?.filter(\n      (mark) =>\n        !schema.decorators.some((decorator) => decorator.value === mark),\n    ) ?? []\n\n  const anchorBlockPath = editor.selection.anchor.path.slice(0, 1)\n  const focusBlockPath = editor.selection.focus.path.slice(0, 1)\n  const focusBlock = Node.descendant(editor, focusBlockPath) as\n    | SlateTextBlock\n    | VoidElement\n\n  if (editor.isTextBlock(focusBlock)) {\n    const [start, end] = Range.edges(editor.selection)\n    const lastFocusBlockChild =\n      focusBlock.children[focusBlock.children.length - 1]\n    const atTheEndOfBlock = isEqual(start, {\n      path: [...focusBlockPath, focusBlock.children.length - 1],\n      offset: editor.isTextSpan(lastFocusBlockChild)\n        ? lastFocusBlockChild.text.length\n        : 0,\n    })\n    const atTheStartOfBlock = isEqual(end, {\n      path: [...focusBlockPath, 0],\n      offset: 0,\n    })\n\n    if (atTheEndOfBlock && Range.isCollapsed(editor.selection)) {\n      Editor.insertNode(\n        editor,\n        editor.pteCreateTextBlock({\n          decorators: [],\n          listItem: focusBlock.listItem,\n          level: focusBlock.level,\n        }),\n      )\n\n      return\n    }\n\n    if (atTheStartOfBlock && Range.isCollapsed(editor.selection)) {\n      Editor.insertNode(\n        editor,\n        editor.pteCreateTextBlock({\n          decorators: focusAnnotations.length === 0 ? focusDecorators : [],\n          listItem: focusBlock.listItem,\n          level: focusBlock.level,\n        }),\n      )\n\n      const [nextBlockPath] = Path.next(focusBlockPath)\n\n      Transforms.select(editor, {\n        anchor: {path: [nextBlockPath, 0], offset: 0},\n        focus: {path: [nextBlockPath, 0], offset: 0},\n      })\n\n      return\n    }\n\n    const selectionAcrossBlocks = anchorBlockPath[0] !== focusBlockPath[0]\n\n    const isInTheMiddleOfNode = !atTheStartOfBlock && !atTheEndOfBlock\n\n    if (isInTheMiddleOfNode && !selectionAcrossBlocks) {\n      Editor.withoutNormalizing(editor, () => {\n        if (!editor.selection) {\n          return\n        }\n\n        Transforms.splitNodes(editor, {\n          at: editor.selection,\n        })\n\n        const [nextNode, nextNodePath] = Editor.node(\n          editor,\n          Path.next(focusBlockPath),\n          {depth: 1},\n        )\n\n        Transforms.setSelection(editor, {\n          anchor: {path: [...nextNodePath, 0], offset: 0},\n          focus: {path: [...nextNodePath, 0], offset: 0},\n        })\n\n        /**\n         * Assign new keys to markDefs that are now split across two blocks\n         */\n        if (\n          editor.isTextBlock(nextNode) &&\n          nextNode.markDefs &&\n          nextNode.markDefs.length > 0\n        ) {\n          const newMarkDefKeys = new Map<string, string>()\n\n          const prevNodeSpans = Array.from(\n            Node.children(editor, focusBlockPath),\n          )\n            .map((entry) => entry[0])\n            .filter((node) => editor.isTextSpan(node))\n          const children = Node.children(editor, nextNodePath)\n\n          for (const [child, childPath] of children) {\n            if (!editor.isTextSpan(child)) {\n              continue\n            }\n\n            const marks = child.marks ?? []\n\n            // Go through the marks of the span and figure out if any of\n            // them refer to annotations that are also present in the\n            // previous block\n            for (const mark of marks) {\n              if (\n                schema.decorators.some((decorator) => decorator.value === mark)\n              ) {\n                continue\n              }\n\n              if (\n                prevNodeSpans.some((prevNodeSpan) =>\n                  prevNodeSpan.marks?.includes(mark),\n                ) &&\n                !newMarkDefKeys.has(mark)\n              ) {\n                // This annotation is both present in the previous block\n                // and this block, so let's assign a new key to it\n                newMarkDefKeys.set(mark, keyGenerator())\n              }\n            }\n\n            const newMarks = marks.map(\n              (mark) => newMarkDefKeys.get(mark) ?? mark,\n            )\n\n            // No need to update the marks if they are the same\n            if (!isEqual(marks, newMarks)) {\n              Transforms.setNodes(\n                editor,\n                {marks: newMarks},\n                {\n                  at: childPath,\n                },\n              )\n            }\n          }\n\n          // Time to update all the markDefs that need a new key because\n          // they've been split across blocks\n          const newMarkDefs = nextNode.markDefs.map((markDef) => ({\n            ...markDef,\n            _key: newMarkDefKeys.get(markDef._key) ?? markDef._key,\n          }))\n\n          // No need to update the markDefs if they are the same\n          if (!isEqual(nextNode.markDefs, newMarkDefs)) {\n            Transforms.setNodes(\n              editor,\n              {markDefs: newMarkDefs},\n              {\n                at: nextNodePath,\n                match: (node) => editor.isTextBlock(node),\n              },\n            )\n          }\n        }\n      })\n      editor.onChange()\n      return\n    }\n  }\n\n  Transforms.splitNodes(editor, {always: true})\n}\n\nexport const insertSoftBreakActionImplementation: BehaviorActionImplementation<\n  'insert.soft break'\n> = ({context, action}) => {\n  // This mimics Slate's internal which also just does a regular insert break\n  // when soft-breaking\n  insertBreakActionImplementation({\n    context,\n    action: {...action, type: 'insert.break'},\n  })\n}\n","import {Editor, Transforms, type Element} from 'slate'\nimport {toSlateValue} from '../utils/values'\nimport type {BehaviorActionImplementation} from './behavior.actions'\n\nexport const insertInlineObjectActionImplementation: BehaviorActionImplementation<\n  'insert.inline object'\n> = ({context, action}) => {\n  if (\n    !context.schema.inlineObjects.some(\n      (inlineObject) => inlineObject.name === action.inlineObject.name,\n    )\n  ) {\n    console.error('Unable to insert unknown inline object')\n    return\n  }\n\n  if (!action.editor.selection) {\n    console.error('Unable to insert inline object without selection')\n    return\n  }\n\n  const [focusTextBlock] = Array.from(\n    Editor.nodes(action.editor, {\n      at: action.editor.selection.focus.path,\n      match: (node) => action.editor.isTextBlock(node),\n    }),\n  ).at(0) ?? [undefined, undefined]\n\n  if (!focusTextBlock) {\n    console.error('Unable to perform action without focus text block')\n    return\n  }\n\n  const block = toSlateValue(\n    [\n      {\n        _type: context.schema.block.name,\n        _key: context.keyGenerator(),\n        children: [\n          {\n            _type: action.inlineObject.name,\n            _key: context.keyGenerator(),\n            ...(action.inlineObject.value ?? {}),\n          },\n        ],\n      },\n    ],\n    {schemaTypes: context.schema},\n  ).at(0) as unknown as Element\n  const child = block?.children.at(0)\n\n  if (!child) {\n    console.error('Unable to insert inline object')\n    return\n  }\n\n  Transforms.insertNodes(action.editor, child)\n}\n","import {Editor, Transforms} from 'slate'\nimport type {BehaviorActionImplementation} from './behavior.actions'\n\nexport const insertSpanActionImplementation: BehaviorActionImplementation<\n  'insert.span'\n> = ({context, action}) => {\n  if (!action.editor.selection) {\n    console.error('Unable to perform action without selection', action)\n    return\n  }\n\n  const [focusBlock, focusBlockPath] = Array.from(\n    Editor.nodes(action.editor, {\n      at: action.editor.selection.focus.path,\n      match: (node) => action.editor.isTextBlock(node),\n    }),\n  )[0] ?? [undefined, undefined]\n\n  if (!focusBlock || !focusBlockPath) {\n    console.error('Unable to perform action without focus block', action)\n    return\n  }\n\n  const markDefs = focusBlock.markDefs ?? []\n  const annotations = action.annotations\n    ? action.annotations.map((annotation) => ({\n        _type: annotation.name,\n        _key: context.keyGenerator(),\n        ...annotation.value,\n      }))\n    : undefined\n\n  if (annotations && annotations.length > 0) {\n    Transforms.setNodes(action.editor, {\n      markDefs: [...markDefs, ...annotations],\n    })\n  }\n\n  Transforms.insertNodes(action.editor, {\n    _type: 'span',\n    _key: context.keyGenerator(),\n    text: action.text,\n    marks: [\n      ...(annotations?.map((annotation) => annotation._key) ?? []),\n      ...(action.decorators ?? []),\n    ],\n  })\n}\n","import {Transforms} from 'slate'\nimport {toSlateRange} from '../utils/ranges'\nimport type {BehaviorActionImplementation} from './behavior.actions'\n\nexport const textBlockSetActionImplementation: BehaviorActionImplementation<\n  'text block.set'\n> = ({action}) => {\n  const at = toSlateRange(\n    {\n      anchor: {path: action.at, offset: 0},\n      focus: {path: action.at, offset: 0},\n    },\n    action.editor,\n  )!\n\n  Transforms.setNodes(\n    action.editor,\n    {\n      ...(action.style ? {style: action.style} : {}),\n      ...(action.listItem ? {listItem: action.listItem} : {}),\n      ...(action.level ? {level: action.level} : {}),\n    },\n    {at},\n  )\n}\n","import {Transforms} from 'slate'\nimport {toSlateRange} from '../utils/ranges'\nimport type {BehaviorActionImplementation} from './behavior.actions'\n\nexport const textBlockUnsetActionImplementation: BehaviorActionImplementation<\n  'text block.unset'\n> = ({action}) => {\n  const at = toSlateRange(\n    {\n      anchor: {path: action.at, offset: 0},\n      focus: {path: action.at, offset: 0},\n    },\n    action.editor,\n  )!\n\n  Transforms.unsetNodes(action.editor, action.props, {at})\n}\n","import {\n  deleteBackward,\n  deleteForward,\n  insertText,\n  Path,\n  Transforms,\n} from 'slate'\nimport {ReactEditor} from 'slate-react'\nimport type {\n  BehaviorAction,\n  SyntheticBehaviorEvent,\n} from '../behaviors/behavior.types'\nimport type {EditorContext} from '../editor/editor-snapshot'\nimport {\n  addAnnotationActionImplementation,\n  removeAnnotationActionImplementation,\n  toggleAnnotationActionImplementation,\n} from '../editor/plugins/createWithEditableAPI'\nimport {\n  addDecoratorActionImplementation,\n  removeDecoratorActionImplementation,\n  toggleDecoratorActionImplementation,\n} from '../editor/plugins/createWithPortableTextMarkModel'\nimport {blockOffsetToSpanSelectionPoint} from '../editor/utils/utils.block-offset'\nimport type {PickFromUnion} from '../type-utils'\nimport {toSlatePath} from '../utils/paths'\nimport {toSlateRange} from '../utils/ranges'\nimport {fromSlateValue, toSlateValue} from '../utils/values'\nimport {KEY_TO_VALUE_ELEMENT} from '../utils/weakMaps'\nimport {insertBlock} from './behavior.action-utils.insert-block'\nimport {insertBlockObjectActionImplementation} from './behavior.action.insert-block-object'\nimport {\n  insertBreakActionImplementation,\n  insertSoftBreakActionImplementation,\n} from './behavior.action.insert-break'\nimport {insertInlineObjectActionImplementation} from './behavior.action.insert-inline-object'\nimport {insertSpanActionImplementation} from './behavior.action.insert-span'\nimport {\n  addListItemActionImplementation,\n  removeListItemActionImplementation,\n  toggleListItemActionImplementation,\n} from './behavior.action.list-item'\nimport {\n  addStyleActionImplementation,\n  removeStyleActionImplementation,\n  toggleStyleActionImplementation,\n} from './behavior.action.style'\nimport {textBlockSetActionImplementation} from './behavior.action.text-block.set'\nimport {textBlockUnsetActionImplementation} from './behavior.action.text-block.unset'\n\nexport type BehaviorActionImplementationContext = Pick<\n  EditorContext,\n  'keyGenerator' | 'schema'\n>\n\nexport type BehaviorActionImplementation<\n  TBehaviorActionType extends BehaviorAction['type'],\n  TReturnType = void,\n> = ({\n  context,\n  action,\n}: {\n  context: BehaviorActionImplementationContext\n  action: PickFromUnion<BehaviorAction, 'type', TBehaviorActionType>\n}) => TReturnType\n\ntype BehaviorActionImplementations = {\n  [TBehaviorActionType in BehaviorAction['type']]: BehaviorActionImplementation<TBehaviorActionType>\n}\n\nconst behaviorActionImplementations: BehaviorActionImplementations = {\n  'annotation.add': addAnnotationActionImplementation,\n  'annotation.remove': removeAnnotationActionImplementation,\n  'annotation.toggle': toggleAnnotationActionImplementation,\n  'blur': ({action}) => {\n    ReactEditor.blur(action.editor)\n  },\n  'decorator.add': addDecoratorActionImplementation,\n  'decorator.remove': removeDecoratorActionImplementation,\n  'decorator.toggle': toggleDecoratorActionImplementation,\n  'focus': ({action}) => {\n    ReactEditor.focus(action.editor)\n  },\n  'delete.backward': ({action}) => {\n    deleteBackward(action.editor, action.unit)\n  },\n  'delete.forward': ({action}) => {\n    deleteForward(action.editor, action.unit)\n  },\n  'delete.block': ({action}) => {\n    const range = toSlateRange(\n      {\n        anchor: {path: action.blockPath, offset: 0},\n        focus: {path: action.blockPath, offset: 0},\n      },\n      action.editor,\n    )\n\n    if (!range) {\n      console.error('Unable to find Slate range from selection points')\n      return\n    }\n\n    Transforms.removeNodes(action.editor, {\n      at: range,\n    })\n  },\n  'delete.text': ({context, action}) => {\n    const value = fromSlateValue(\n      action.editor.children,\n      context.schema.block.name,\n      KEY_TO_VALUE_ELEMENT.get(action.editor),\n    )\n\n    const anchor = blockOffsetToSpanSelectionPoint({\n      value,\n      blockOffset: action.anchor,\n    })\n    const focus = blockOffsetToSpanSelectionPoint({\n      value,\n      blockOffset: action.focus,\n    })\n\n    if (!anchor || !focus) {\n      console.error('Unable to find anchor or focus selection point')\n      return\n    }\n\n    const range = toSlateRange(\n      {\n        anchor,\n        focus,\n      },\n      action.editor,\n    )\n\n    if (!range) {\n      console.error('Unable to find Slate range from selection points')\n      return\n    }\n\n    Transforms.delete(action.editor, {\n      at: range,\n    })\n  },\n  'insert.block object': insertBlockObjectActionImplementation,\n  'insert.break': insertBreakActionImplementation,\n  'insert.inline object': insertInlineObjectActionImplementation,\n  'insert.soft break': insertSoftBreakActionImplementation,\n  'insert.span': insertSpanActionImplementation,\n  'insert.text': ({action}) => {\n    insertText(action.editor, action.text)\n  },\n  'insert.text block': ({context, action}) => {\n    const block = toSlateValue(\n      [\n        {\n          _key: context.keyGenerator(),\n          _type: context.schema.block.name,\n          style: context.schema.styles[0].value ?? 'normal',\n          markDefs: [],\n          children: action.textBlock?.children?.map((child) => ({\n            ...child,\n            _key: context.keyGenerator(),\n          })) ?? [\n            {\n              _type: context.schema.span.name,\n              _key: context.keyGenerator(),\n              text: '',\n            },\n          ],\n        },\n      ],\n      {schemaTypes: context.schema},\n    )[0]\n\n    insertBlock({\n      block,\n      editor: action.editor,\n      schema: context.schema,\n      placement: action.placement,\n    })\n  },\n  'effect': ({action}) => {\n    action.effect()\n  },\n  'list item.add': addListItemActionImplementation,\n  'list item.remove': removeListItemActionImplementation,\n  'list item.toggle': toggleListItemActionImplementation,\n  'move.block': ({action}) => {\n    const at = [toSlatePath(action.at, action.editor)[0]]\n    const to = [toSlatePath(action.to, action.editor)[0]]\n\n    Transforms.moveNodes(action.editor, {\n      at,\n      to,\n      mode: 'highest',\n    })\n  },\n  'move.block down': ({action}) => {\n    const at = [toSlatePath(action.at, action.editor)[0]]\n    const to = [Path.next(at)[0]]\n\n    Transforms.moveNodes(action.editor, {\n      at,\n      to,\n      mode: 'highest',\n    })\n  },\n  'move.block up': ({action}) => {\n    const at = [toSlatePath(action.at, action.editor)[0]]\n\n    if (!Path.hasPrevious(at)) {\n      return\n    }\n\n    const to = [Path.previous(at)[0]]\n\n    Transforms.moveNodes(action.editor, {\n      at,\n      to,\n      mode: 'highest',\n    })\n  },\n  'noop': () => {},\n  'select': ({action}) => {\n    const newSelection = toSlateRange(action.selection, action.editor)\n\n    if (newSelection) {\n      Transforms.select(action.editor, newSelection)\n    } else {\n      Transforms.deselect(action.editor)\n    }\n  },\n  'select.previous block': ({action}) => {\n    if (!action.editor.selection) {\n      console.error('Unable to select previous block without a selection')\n      return\n    }\n\n    const blockPath = action.editor.selection.focus.path.slice(0, 1)\n\n    if (!Path.hasPrevious(blockPath)) {\n      console.error(\"There's no previous block to select\")\n      return\n    }\n\n    const previousBlockPath = Path.previous(blockPath)\n\n    Transforms.select(action.editor, previousBlockPath)\n  },\n  'select.next block': ({action}) => {\n    if (!action.editor.selection) {\n      console.error('Unable to select next block without a selection')\n      return\n    }\n\n    const blockPath = action.editor.selection.focus.path.slice(0, 1)\n    const nextBlockPath = [blockPath[0] + 1]\n\n    Transforms.select(action.editor, nextBlockPath)\n  },\n  'reselect': ({action}) => {\n    const selection = action.editor.selection\n\n    if (selection) {\n      Transforms.select(action.editor, {...selection})\n      action.editor.selection = {...selection}\n    }\n  },\n  'style.toggle': toggleStyleActionImplementation,\n  'style.add': addStyleActionImplementation,\n  'style.remove': removeStyleActionImplementation,\n  'text block.set': textBlockSetActionImplementation,\n  'text block.unset': textBlockUnsetActionImplementation,\n}\n\nexport function performAction({\n  context,\n  action,\n}: {\n  context: BehaviorActionImplementationContext\n  action: BehaviorAction\n}) {\n  switch (action.type) {\n    case 'delete.block': {\n      behaviorActionImplementations['delete.block']({\n        context,\n        action,\n      })\n      break\n    }\n    case 'delete.text': {\n      behaviorActionImplementations['delete.text']({\n        context,\n        action,\n      })\n      break\n    }\n    case 'insert.span': {\n      behaviorActionImplementations['insert.span']({\n        context,\n        action,\n      })\n      break\n    }\n    case 'insert.text block': {\n      behaviorActionImplementations['insert.text block']({\n        context,\n        action,\n      })\n      break\n    }\n    case 'list item.add': {\n      behaviorActionImplementations['list item.add']({\n        context,\n        action,\n      })\n      break\n    }\n    case 'list item.remove': {\n      behaviorActionImplementations['list item.remove']({\n        context,\n        action,\n      })\n      break\n    }\n    case 'move.block': {\n      behaviorActionImplementations['move.block']({\n        context,\n        action,\n      })\n      break\n    }\n    case 'move.block down': {\n      behaviorActionImplementations['move.block down']({\n        context,\n        action,\n      })\n      break\n    }\n    case 'move.block up': {\n      behaviorActionImplementations['move.block up']({\n        context,\n        action,\n      })\n      break\n    }\n    case 'noop': {\n      behaviorActionImplementations.noop({\n        context,\n        action,\n      })\n      break\n    }\n    case 'effect': {\n      behaviorActionImplementations.effect({\n        context,\n        action,\n      })\n      break\n    }\n    case 'select': {\n      behaviorActionImplementations.select({\n        context,\n        action,\n      })\n      break\n    }\n    case 'select.previous block': {\n      behaviorActionImplementations['select.previous block']({\n        context,\n        action,\n      })\n      break\n    }\n    case 'select.next block': {\n      behaviorActionImplementations['select.next block']({\n        context,\n        action,\n      })\n      break\n    }\n    case 'reselect': {\n      behaviorActionImplementations.reselect({\n        context,\n        action,\n      })\n      break\n    }\n    case 'style.add': {\n      behaviorActionImplementations['style.add']({\n        context,\n        action,\n      })\n      break\n    }\n    case 'style.remove': {\n      behaviorActionImplementations['style.remove']({\n        context,\n        action,\n      })\n      break\n    }\n    case 'text block.set': {\n      behaviorActionImplementations['text block.set']({\n        context,\n        action,\n      })\n      break\n    }\n    case 'text block.unset': {\n      behaviorActionImplementations['text block.unset']({\n        context,\n        action,\n      })\n      break\n    }\n    default: {\n      performDefaultAction({context, action})\n    }\n  }\n}\n\nfunction performDefaultAction({\n  context,\n  action,\n}: {\n  context: BehaviorActionImplementationContext\n  action: PickFromUnion<BehaviorAction, 'type', SyntheticBehaviorEvent['type']>\n}) {\n  switch (action.type) {\n    case 'annotation.add': {\n      behaviorActionImplementations['annotation.add']({\n        context,\n        action,\n      })\n      break\n    }\n    case 'annotation.remove': {\n      behaviorActionImplementations['annotation.remove']({\n        context,\n        action,\n      })\n      break\n    }\n    case 'annotation.toggle': {\n      behaviorActionImplementations['annotation.toggle']({\n        context,\n        action,\n      })\n      break\n    }\n    case 'blur': {\n      behaviorActionImplementations.blur({\n        context,\n        action,\n      })\n      break\n    }\n    case 'decorator.add': {\n      behaviorActionImplementations['decorator.add']({\n        context,\n        action,\n      })\n      break\n    }\n    case 'decorator.remove': {\n      behaviorActionImplementations['decorator.remove']({\n        context,\n        action,\n      })\n      break\n    }\n    case 'decorator.toggle': {\n      behaviorActionImplementations['decorator.toggle']({\n        context,\n        action,\n      })\n      break\n    }\n    case 'delete.backward': {\n      behaviorActionImplementations['delete.backward']({\n        context,\n        action,\n      })\n      break\n    }\n    case 'delete.forward': {\n      behaviorActionImplementations['delete.forward']({\n        context,\n        action,\n      })\n      break\n    }\n    case 'focus': {\n      behaviorActionImplementations.focus({\n        context,\n        action,\n      })\n      break\n    }\n    case 'insert.block object': {\n      behaviorActionImplementations['insert.block object']({\n        context,\n        action,\n      })\n      break\n    }\n    case 'insert.inline object': {\n      behaviorActionImplementations['insert.inline object']({\n        context,\n        action,\n      })\n      break\n    }\n    case 'insert.break': {\n      behaviorActionImplementations['insert.break']({\n        context,\n        action,\n      })\n      break\n    }\n    case 'insert.soft break': {\n      behaviorActionImplementations['insert.soft break']({\n        context,\n        action,\n      })\n      break\n    }\n    case 'insert.text': {\n      behaviorActionImplementations['insert.text']({\n        context,\n        action,\n      })\n      break\n    }\n    case 'list item.toggle': {\n      behaviorActionImplementations['list item.toggle']({\n        context,\n        action,\n      })\n      break\n    }\n    default: {\n      behaviorActionImplementations['style.toggle']({\n        context,\n        action,\n      })\n    }\n  }\n}\n","import {Editor} from 'slate'\nimport type {PortableTextSlateEditor} from '../types/editor'\nimport type {EditorSchema} from './define-schema'\n\nexport function getActiveDecorators({\n  schema,\n  slateEditorInstance,\n}: {\n  schema: EditorSchema\n  slateEditorInstance: PortableTextSlateEditor\n}) {\n  const decorators = schema.decorators.map((decorator) => decorator.value)\n\n  const marks =\n    {\n      ...(Editor.marks(slateEditorInstance) ?? {}),\n    }.marks ?? []\n\n  return marks.filter((mark) => decorators.includes(mark))\n}\n","import type {Patch} from '@portabletext/patches'\nimport type {PortableTextBlock} from '@sanity/types'\nimport type {FocusEvent} from 'react'\nimport {Editor} from 'slate'\nimport {\n  assertEvent,\n  assign,\n  emit,\n  enqueueActions,\n  setup,\n  type ActorRefFrom,\n} from 'xstate'\nimport {performAction} from '../behavior-actions/behavior.actions'\nimport {coreBehaviors} from '../behaviors/behavior.core'\nimport type {\n  Behavior,\n  BehaviorAction,\n  NativeBehaviorEvent,\n  SyntheticBehaviorEvent,\n} from '../behaviors/behavior.types'\nimport type {OmitFromUnion, PickFromUnion} from '../type-utils'\nimport type {\n  EditorSelection,\n  InvalidValueResolution,\n  PortableTextSlateEditor,\n} from '../types/editor'\nimport {toPortableTextRange} from '../utils/ranges'\nimport {fromSlateValue} from '../utils/values'\nimport {KEY_TO_VALUE_ELEMENT} from '../utils/weakMaps'\nimport type {EditorSchema} from './define-schema'\nimport type {EditorContext} from './editor-snapshot'\nimport {getActiveDecorators} from './get-active-decorators'\n\nexport * from 'xstate/guards'\n\n/**\n * @internal\n */\nexport type EditorActor = ActorRefFrom<typeof editorMachine>\n\n/**\n * @internal\n */\nexport type PatchEvent = {type: 'patch'; patch: Patch}\n\n/**\n * @internal\n */\nexport type PatchesEvent = {\n  type: 'patches'\n  patches: Array<Patch>\n  snapshot: Array<PortableTextBlock> | undefined\n}\n\n/**\n * @internal\n */\nexport type MutationEvent = {\n  type: 'mutation'\n  patches: Array<Patch>\n  /**\n   * @deprecated Use `value` instead\n   */\n  snapshot: Array<PortableTextBlock> | undefined\n  value: Array<PortableTextBlock> | undefined\n}\n\n/**\n * @internal\n */\nexport type InternalEditorEvent =\n  | {type: 'normalizing'}\n  | {type: 'done normalizing'}\n  | {type: 'done syncing initial value'}\n  | {\n      type: 'behavior event'\n      behaviorEvent: SyntheticBehaviorEvent | NativeBehaviorEvent\n      editor: PortableTextSlateEditor\n      nativeEvent?: {preventDefault: () => void}\n    }\n  | {\n      type: 'update readOnly'\n      readOnly: boolean\n    }\n  | {\n      type: 'update schema'\n      schema: EditorSchema\n    }\n  | {\n      type: 'update behaviors'\n      behaviors: Array<Behavior>\n    }\n  | {\n      type: 'update value'\n      value: Array<PortableTextBlock> | undefined\n    }\n  | {\n      type: 'update maxBlocks'\n      maxBlocks: number | undefined\n    }\n  | OmitFromUnion<\n      InternalEditorEmittedEvent,\n      'type',\n      'ready' | 'read only' | 'editable'\n    >\n\n/**\n * @public\n */\nexport type EditorEmittedEvent = PickFromUnion<\n  InternalEditorEmittedEvent,\n  'type',\n  | 'blurred'\n  | 'done loading'\n  | 'editable'\n  | 'error'\n  | 'focused'\n  | 'invalid value'\n  | 'loading'\n  | 'mutation'\n  | 'patch'\n  | 'read only'\n  | 'ready'\n  | 'selection'\n  | 'value changed'\n>\n\n/**\n * @internal\n */\nexport type InternalEditorEmittedEvent =\n  | {type: 'ready'}\n  | PatchEvent\n  | PatchesEvent\n  | MutationEvent\n  | {\n      type: 'unset'\n      previousValue: Array<PortableTextBlock>\n    }\n  | {\n      type: 'value changed'\n      value: Array<PortableTextBlock> | undefined\n    }\n  | {\n      type: 'invalid value'\n      resolution: InvalidValueResolution | null\n      value: Array<PortableTextBlock> | undefined\n    }\n  | {\n      type: 'error'\n      name: string\n      description: string\n      data: unknown\n    }\n  | {type: 'selection'; selection: EditorSelection}\n  | {type: 'blurred'; event: FocusEvent<HTMLDivElement, Element>}\n  | {type: 'focused'; event: FocusEvent<HTMLDivElement, Element>}\n  | {type: 'loading'}\n  | {type: 'done loading'}\n  | {type: 'read only'}\n  | {type: 'editable'}\n  | PickFromUnion<\n      SyntheticBehaviorEvent,\n      'type',\n      | 'annotation.add'\n      | 'annotation.remove'\n      | 'annotation.toggle'\n      | 'blur'\n      | 'decorator.add'\n      | 'decorator.remove'\n      | 'decorator.toggle'\n      | 'insert.block object'\n      | 'insert.inline object'\n      | 'list item.toggle'\n      | 'focus'\n      | 'style.toggle'\n    >\n\n/**\n * @internal\n */\nexport const editorMachine = setup({\n  types: {\n    context: {} as {\n      behaviors: Array<Behavior>\n      keyGenerator: () => string\n      pendingEvents: Array<PatchEvent | MutationEvent>\n      schema: EditorSchema\n      initialReadOnly: boolean\n      maxBlocks: number | undefined\n      selection: EditorSelection\n      value: Array<PortableTextBlock> | undefined\n    },\n    events: {} as InternalEditorEvent,\n    emitted: {} as InternalEditorEmittedEvent,\n    input: {} as {\n      behaviors?: Array<Behavior>\n      keyGenerator: () => string\n      maxBlocks?: number\n      readOnly?: boolean\n      schema: EditorSchema\n      value?: Array<PortableTextBlock>\n    },\n  },\n  actions: {\n    'assign behaviors': assign({\n      behaviors: ({event}) => {\n        assertEvent(event, 'update behaviors')\n        return event.behaviors\n      },\n    }),\n    'assign schema': assign({\n      schema: ({event}) => {\n        assertEvent(event, 'update schema')\n        return event.schema\n      },\n    }),\n    'emit patch event': emit(({event}) => {\n      assertEvent(event, 'patch')\n      return event\n    }),\n    'emit mutation event': emit(({event}) => {\n      assertEvent(event, 'mutation')\n      return event\n    }),\n    'emit read only': emit({type: 'read only'}),\n    'emit editable': emit({type: 'editable'}),\n    'defer event': assign({\n      pendingEvents: ({context, event}) => {\n        assertEvent(event, ['patch', 'mutation'])\n        return [...context.pendingEvents, event]\n      },\n    }),\n    'emit pending events': enqueueActions(({context, enqueue}) => {\n      for (const event of context.pendingEvents) {\n        enqueue(emit(event))\n      }\n    }),\n    'emit ready': emit({type: 'ready'}),\n    'clear pending events': assign({\n      pendingEvents: [],\n    }),\n    'handle behavior event': enqueueActions(({context, event, enqueue}) => {\n      assertEvent(event, ['behavior event'])\n\n      const defaultAction =\n        event.behaviorEvent.type === 'copy' ||\n        event.behaviorEvent.type === 'key.down' ||\n        event.behaviorEvent.type === 'key.up' ||\n        event.behaviorEvent.type === 'paste'\n          ? undefined\n          : ({\n              ...event.behaviorEvent,\n              editor: event.editor,\n            } satisfies BehaviorAction)\n\n      const eventBehaviors = context.behaviors.filter(\n        (behavior) => behavior.on === event.behaviorEvent.type,\n      )\n\n      if (eventBehaviors.length === 0) {\n        if (!defaultAction) {\n          return\n        }\n\n        Editor.withoutNormalizing(event.editor, () => {\n          performAction({\n            context,\n            action: defaultAction,\n          })\n        })\n        event.editor.onChange()\n        return\n      }\n\n      const value = fromSlateValue(\n        event.editor.children,\n        context.schema.block.name,\n        KEY_TO_VALUE_ELEMENT.get(event.editor),\n      )\n      const selection = toPortableTextRange(\n        value,\n        event.editor.selection,\n        context.schema,\n      )\n\n      const editorContext = {\n        activeDecorators: getActiveDecorators({\n          schema: context.schema,\n          slateEditorInstance: event.editor,\n        }),\n        keyGenerator: context.keyGenerator,\n        schema: context.schema,\n        selection,\n        value,\n      } satisfies EditorContext\n\n      let behaviorOverwritten = false\n\n      for (const eventBehavior of eventBehaviors) {\n        const shouldRun =\n          eventBehavior.guard === undefined ||\n          eventBehavior.guard({\n            context: editorContext,\n            event: event.behaviorEvent,\n          })\n\n        if (!shouldRun) {\n          continue\n        }\n\n        const actionIntendSets = eventBehavior.actions.map((actionSet) =>\n          actionSet(\n            {context: editorContext, event: event.behaviorEvent},\n            shouldRun,\n          ),\n        )\n\n        for (const actionIntends of actionIntendSets) {\n          behaviorOverwritten =\n            behaviorOverwritten ||\n            (actionIntends.length > 0 &&\n              actionIntends.some(\n                (actionIntend) => actionIntend.type !== 'effect',\n              ))\n\n          Editor.withoutNormalizing(event.editor, () => {\n            for (const actionIntend of actionIntends) {\n              const action = {\n                ...actionIntend,\n                editor: event.editor,\n              }\n\n              performAction({context, action})\n            }\n          })\n          event.editor.onChange()\n\n          if (\n            actionIntends.some(\n              (actionIntend) => actionIntend.type === 'reselect',\n            )\n          ) {\n            enqueue.raise({\n              type: 'selection',\n              selection: toPortableTextRange(\n                event.editor.children,\n                event.editor.selection,\n                context.schema,\n              ),\n            })\n          }\n        }\n\n        if (behaviorOverwritten) {\n          event.nativeEvent?.preventDefault()\n          break\n        }\n      }\n\n      if (!behaviorOverwritten) {\n        if (!defaultAction) {\n          return\n        }\n\n        Editor.withoutNormalizing(event.editor, () => {\n          performAction({\n            context,\n            action: defaultAction,\n          })\n        })\n        event.editor.onChange()\n      }\n    }),\n  },\n}).createMachine({\n  id: 'editor',\n  context: ({input}) => ({\n    behaviors: input.behaviors ?? coreBehaviors,\n    keyGenerator: input.keyGenerator,\n    pendingEvents: [],\n    schema: input.schema,\n    selection: null,\n    initialReadOnly: input.readOnly ?? false,\n    maxBlocks: input.maxBlocks,\n    value: input.value,\n  }),\n  on: {\n    'unset': {actions: emit(({event}) => event)},\n    'value changed': {actions: emit(({event}) => event)},\n    'invalid value': {actions: emit(({event}) => event)},\n    'error': {actions: emit(({event}) => event)},\n    'selection': {\n      actions: [\n        assign({selection: ({event}) => event.selection}),\n        emit(({event}) => event),\n      ],\n    },\n    'blurred': {actions: emit(({event}) => event)},\n    'focused': {actions: emit(({event}) => event)},\n    'loading': {actions: emit({type: 'loading'})},\n    'patches': {actions: emit(({event}) => event)},\n    'done loading': {actions: emit({type: 'done loading'})},\n    'update behaviors': {actions: 'assign behaviors'},\n    'update schema': {actions: 'assign schema'},\n    'update value': {actions: assign({value: ({event}) => event.value})},\n    'update maxBlocks': {\n      actions: assign({maxBlocks: ({event}) => event.maxBlocks}),\n    },\n  },\n  type: 'parallel',\n  states: {\n    'edit mode': {\n      initial: 'read only',\n      states: {\n        'read only': {\n          initial: 'determine initial edit mode',\n          states: {\n            'determine initial edit mode': {\n              on: {\n                'done syncing initial value': [\n                  {\n                    target: '#editor.edit mode.read only.read only',\n                    guard: ({context}) => context.initialReadOnly,\n                  },\n                  {\n                    target: '#editor.edit mode.editable',\n                  },\n                ],\n              },\n            },\n            'read only': {\n              on: {\n                'update readOnly': {\n                  guard: ({event}) => !event.readOnly,\n                  target: '#editor.edit mode.editable',\n                  actions: ['emit editable'],\n                },\n              },\n            },\n          },\n        },\n        'editable': {\n          on: {\n            'update readOnly': {\n              guard: ({event}) => event.readOnly,\n              target: '#editor.edit mode.read only.read only',\n              actions: ['emit read only'],\n            },\n            'behavior event': {\n              actions: 'handle behavior event',\n            },\n            'annotation.add': {\n              actions: emit(({event}) => event),\n            },\n            'annotation.remove': {\n              actions: emit(({event}) => event),\n            },\n            'annotation.toggle': {\n              actions: emit(({event}) => event),\n            },\n            'blur': {\n              actions: emit(({event}) => event),\n            },\n            'decorator.*': {\n              actions: emit(({event}) => event),\n            },\n            'focus': {\n              actions: emit(({event}) => event),\n            },\n            'insert.*': {\n              actions: emit(({event}) => event),\n            },\n            'list item.*': {\n              actions: emit(({event}) => event),\n            },\n            'style.*': {\n              actions: emit(({event}) => event),\n            },\n          },\n        },\n      },\n    },\n    'setup': {\n      initial: 'setting up',\n      states: {\n        'setting up': {\n          exit: ['emit ready'],\n          on: {\n            'patch': {\n              actions: 'defer event',\n            },\n            'mutation': {\n              actions: 'defer event',\n            },\n            'done syncing initial value': {\n              target: 'pristine',\n            },\n          },\n        },\n        'pristine': {\n          initial: 'idle',\n          states: {\n            idle: {\n              on: {\n                normalizing: {\n                  target: 'normalizing',\n                },\n                patch: {\n                  actions: 'defer event',\n                  target: '#editor.setup.dirty',\n                },\n                mutation: {\n                  actions: 'defer event',\n                  target: '#editor.setup.dirty',\n                },\n              },\n            },\n            normalizing: {\n              on: {\n                'done normalizing': {\n                  target: 'idle',\n                },\n                'patch': {\n                  actions: 'defer event',\n                },\n                'mutation': {\n                  actions: 'defer event',\n                },\n              },\n            },\n          },\n        },\n        'dirty': {\n          entry: ['emit pending events', 'clear pending events'],\n          on: {\n            patch: {\n              actions: 'emit patch event',\n            },\n            mutation: {\n              actions: 'emit mutation event',\n            },\n          },\n        },\n      },\n    },\n  },\n})\n","import type {PortableTextSlateEditor} from '../types/editor'\nimport {fromSlateValue} from '../utils/values'\nimport {KEY_TO_VALUE_ELEMENT} from '../utils/weakMaps'\nimport type {EditorActor} from './editor-machine'\n\nexport function getValue({\n  editorActorSnapshot,\n  slateEditorInstance,\n}: {\n  editorActorSnapshot: ReturnType<EditorActor['getSnapshot']>\n  slateEditorInstance: PortableTextSlateEditor\n}) {\n  return fromSlateValue(\n    slateEditorInstance.children,\n    editorActorSnapshot.context.schema.block.name,\n    KEY_TO_VALUE_ELEMENT.get(slateEditorInstance),\n  )\n}\n","import {useSelector} from '@xstate/react'\nimport type {PortableTextSlateEditor} from '../types/editor'\nimport type {Editor} from './create-editor'\nimport type {EditorActor} from './editor-machine'\nimport type {EditorSnapshot} from './editor-snapshot'\nimport {getActiveDecorators} from './get-active-decorators'\nimport {getValue} from './get-value'\n\nfunction defaultCompare<T>(a: T, b: T) {\n  return a === b\n}\n\n/**\n * @public\n */\nexport type EditorSelector<TSelected> = (snapshot: EditorSnapshot) => TSelected\n\n/**\n * @public\n */\nexport function useEditorSelector<TSelected>(\n  editor: Editor,\n  selector: EditorSelector<TSelected>,\n  compare: (a: TSelected, b: TSelected) => boolean = defaultCompare,\n) {\n  return useSelector(\n    editor._internal.editorActor,\n    (editorActorSnapshot) => {\n      const snapshot = getEditorSnapshot({\n        editorActorSnapshot,\n        slateEditorInstance: editor._internal.slateEditor.instance,\n      })\n\n      return selector(snapshot)\n    },\n    compare,\n  )\n}\n\nexport function getEditorSnapshot({\n  editorActorSnapshot,\n  slateEditorInstance,\n}: {\n  editorActorSnapshot: ReturnType<EditorActor['getSnapshot']>\n  slateEditorInstance: PortableTextSlateEditor\n}): EditorSnapshot {\n  return {\n    context: {\n      activeDecorators: getActiveDecorators({\n        schema: editorActorSnapshot.context.schema,\n        slateEditorInstance,\n      }),\n      keyGenerator: editorActorSnapshot.context.keyGenerator,\n      schema: editorActorSnapshot.context.schema,\n      selection: editorActorSnapshot.context.selection,\n      value: getValue({editorActorSnapshot, slateEditorInstance}),\n    },\n  }\n}\n","import getRandomValues from 'get-random-values-esm'\n\n/**\n * @public\n */\nexport const defaultKeyGenerator = (): string => randomKey(12)\n\nconst getByteHexTable = (() => {\n  let table: any[]\n  return () => {\n    if (table) {\n      return table\n    }\n\n    table = []\n    for (let i = 0; i < 256; ++i) {\n      table[i] = (i + 0x100).toString(16).slice(1)\n    }\n    return table\n  }\n})()\n\n// WHATWG crypto RNG - https://w3c.github.io/webcrypto/Overview.html\nfunction whatwgRNG(length = 16) {\n  const rnds8 = new Uint8Array(length)\n  getRandomValues(rnds8)\n  return rnds8\n}\n\nfunction randomKey(length?: number): string {\n  const table = getByteHexTable()\n  return whatwgRNG(length)\n    .reduce((str, n) => str + table[n], '')\n    .slice(0, length)\n}\n","import type {\n  ArrayDefinition,\n  ArraySchemaType,\n  PortableTextBlock,\n} from '@sanity/types'\nimport {useActorRef} from '@xstate/react'\nimport {useMemo} from 'react'\nimport {\n  createActor,\n  type ActorRef,\n  type EventObject,\n  type Snapshot,\n} from 'xstate'\nimport type {Behavior} from '../behaviors/behavior.types'\nimport type {PickFromUnion} from '../type-utils'\nimport type {EditableAPI} from '../types/editor'\nimport {compileType} from '../utils/schema'\nimport {createEditorSchema} from './create-editor-schema'\nimport {createSlateEditor, type SlateEditor} from './create-slate-editor'\nimport {compileSchemaDefinition, type SchemaDefinition} from './define-schema'\nimport {\n  editorMachine,\n  type EditorActor,\n  type EditorEmittedEvent,\n  type InternalEditorEvent,\n} from './editor-machine'\nimport {getEditorSnapshot} from './editor-selector'\nimport type {EditorSnapshot} from './editor-snapshot'\nimport {defaultKeyGenerator} from './key-generator'\nimport {createEditableAPI} from './plugins/createWithEditableAPI'\n\n/**\n * @public\n */\nexport type EditorConfig = {\n  /**\n   * @beta\n   */\n  behaviors?: Array<Behavior>\n  keyGenerator?: () => string\n  /**\n   * @deprecated Will be removed in the next major version\n   */\n  maxBlocks?: number\n  readOnly?: boolean\n  initialValue?: Array<PortableTextBlock>\n} & (\n  | {\n      schemaDefinition: SchemaDefinition\n      schema?: undefined\n    }\n  | {\n      schemaDefinition?: undefined\n      schema: ArraySchemaType<PortableTextBlock> | ArrayDefinition\n    }\n)\n\n/**\n * @public\n */\nexport type EditorEvent = PickFromUnion<\n  InternalEditorEvent,\n  'type',\n  | 'annotation.add'\n  | 'annotation.remove'\n  | 'annotation.toggle'\n  | 'blur'\n  | 'decorator.add'\n  | 'decorator.remove'\n  | 'decorator.toggle'\n  | 'focus'\n  | 'insert.block object'\n  | 'insert.inline object'\n  | 'list item.toggle'\n  | 'style.toggle'\n  | 'patches'\n  | 'update behaviors'\n  | 'update readOnly'\n  | 'update value'\n>\n\n/**\n * @public\n */\nexport type Editor = {\n  getSnapshot: () => EditorSnapshot\n  send: (event: EditorEvent) => void\n  on: ActorRef<Snapshot<unknown>, EventObject, EditorEmittedEvent>['on']\n  _internal: {\n    editable: EditableAPI\n    editorActor: EditorActor\n    slateEditor: SlateEditor\n  }\n}\n\nexport function createEditor(config: EditorConfig): Editor {\n  const editorActor = createActor(editorMachine, {\n    input: editorConfigToMachineInput(config),\n  })\n  editorActor.start()\n\n  return createEditorFromActor(editorActor)\n}\n\nexport function useCreateEditor(config: EditorConfig): Editor {\n  const editorActor = useActorRef(editorMachine, {\n    input: editorConfigToMachineInput(config),\n  })\n\n  return useMemo(() => createEditorFromActor(editorActor), [editorActor])\n}\n\nfunction editorConfigToMachineInput(config: EditorConfig) {\n  return {\n    behaviors: config.behaviors,\n    keyGenerator: config.keyGenerator ?? defaultKeyGenerator,\n    maxBlocks: config.maxBlocks,\n    readOnly: config.readOnly,\n    schema: config.schemaDefinition\n      ? compileSchemaDefinition(config.schemaDefinition)\n      : createEditorSchema(\n          config.schema.hasOwnProperty('jsonType')\n            ? config.schema\n            : compileType(config.schema),\n        ),\n    value: config.initialValue,\n  } as const\n}\n\nfunction createEditorFromActor(editorActor: EditorActor): Editor {\n  const slateEditor = createSlateEditor({editorActor})\n  const editable = createEditableAPI(slateEditor.instance, editorActor)\n\n  return {\n    getSnapshot: () =>\n      getEditorSnapshot({\n        editorActorSnapshot: editorActor.getSnapshot(),\n        slateEditorInstance: slateEditor.instance,\n      }),\n    send: (event) => {\n      editorActor.send(event)\n    },\n    on: (event, listener) =>\n      editorActor.on(\n        event,\n        // @ts-expect-error\n        listener,\n      ),\n    _internal: {\n      editable,\n      editorActor,\n      slateEditor,\n    },\n  }\n}\n","import {createContext} from 'react'\nimport type {EditorActor} from './editor-machine'\n\nexport const EditorActorContext = createContext<EditorActor>({} as EditorActor)\n","import {\n  createContext,\n  startTransition,\n  useContext,\n  useEffect,\n  useState,\n} from 'react'\nimport type {EditorSelection} from '../../types/editor'\nimport {debugWithName} from '../../utils/debug'\nimport type {EditorActor} from '../editor-machine'\n\n/**\n * A React context for sharing the editor selection.\n */\nconst PortableTextEditorSelectionContext =\n  createContext<EditorSelection | null>(null)\n\n/**\n * @deprecated Use `useEditorSelector` to get the current editor selection.\n * @public\n * Get the current editor selection from the React context.\n */\nexport const usePortableTextEditorSelection = (): EditorSelection => {\n  const selection = useContext(PortableTextEditorSelectionContext)\n\n  if (selection === undefined) {\n    throw new Error(\n      `The \\`usePortableTextEditorSelection\\` hook must be used inside the <PortableTextEditor> component's context.`,\n    )\n  }\n  return selection\n}\nconst debug = debugWithName('component:PortableTextEditor:SelectionProvider')\nconst debugVerbose = debug.enabled && false\n\n/**\n * @internal\n */\nexport function PortableTextEditorSelectionProvider(\n  props: React.PropsWithChildren<{\n    editorActor: EditorActor\n  }>,\n) {\n  const [selection, setSelection] = useState<EditorSelection>(null)\n\n  // Subscribe to, and handle changes from the editor\n  useEffect(() => {\n    debug('Subscribing to selection changes')\n    const subscription = props.editorActor.on('selection', (event) => {\n      // Set the selection state in a transition, we don't need the state immediately.\n      startTransition(() => {\n        if (debugVerbose) debug('Setting selection')\n        setSelection(event.selection)\n      })\n    })\n\n    return () => {\n      debug('Unsubscribing to selection changes')\n      subscription.unsubscribe()\n    }\n  }, [props.editorActor])\n\n  return (\n    <PortableTextEditorSelectionContext.Provider value={selection}>\n      {props.children}\n    </PortableTextEditorSelectionContext.Provider>\n  )\n}\n","import type {\n  ArrayDefinition,\n  ArraySchemaType,\n  Path,\n  PortableTextBlock,\n  PortableTextChild,\n  PortableTextObject,\n} from '@sanity/types'\nimport {\n  Component,\n  useEffect,\n  type MutableRefObject,\n  type PropsWithChildren,\n} from 'react'\nimport {Subject} from 'rxjs'\nimport {Slate} from 'slate-react'\nimport {useEffectEvent} from 'use-effect-event'\nimport type {\n  EditableAPI,\n  EditableAPIDeleteOptions,\n  EditorChange,\n  EditorChanges,\n  EditorSelection,\n  PatchObservable,\n  PortableTextMemberSchemaTypes,\n} from '../types/editor'\nimport {debugWithName} from '../utils/debug'\nimport {compileType} from '../utils/schema'\nimport {Synchronizer} from './components/Synchronizer'\nimport {createEditor, type Editor} from './create-editor'\nimport {createEditorSchema} from './create-editor-schema'\nimport {EditorActorContext} from './editor-actor-context'\nimport type {EditorActor} from './editor-machine'\nimport {PortableTextEditorContext} from './hooks/usePortableTextEditor'\nimport {PortableTextEditorSelectionProvider} from './hooks/usePortableTextEditorSelection'\nimport {defaultKeyGenerator} from './key-generator'\nimport type {AddedAnnotationPaths} from './plugins/createWithEditableAPI'\n\nconst debug = debugWithName('component:PortableTextEditor')\n\n/**\n * Props for the PortableTextEditor component\n *\n * @public\n * @deprecated Use `EditorProvider` instead\n */\nexport type PortableTextEditorProps<\n  TEditor extends Editor | undefined = undefined,\n> = PropsWithChildren<\n  TEditor extends Editor\n    ? {\n        /**\n         * @alpha\n         */\n        editor: TEditor\n      }\n    : {\n        editor?: undefined\n\n        /**\n         * Function that gets called when the editor changes the value\n         */\n        onChange: (change: EditorChange) => void\n\n        /**\n         * Schema type for the portable text field\n         */\n        schemaType: ArraySchemaType<PortableTextBlock> | ArrayDefinition\n\n        /**\n         * Maximum number of blocks to allow within the editor\n         */\n        maxBlocks?: number | string\n\n        /**\n         * Function used to generate keys for array items (`_key`)\n         */\n        keyGenerator?: () => string\n\n        /**\n         * Observable of local and remote patches for the edited value.\n         */\n        patches$?: PatchObservable\n\n        /**\n         * Backward compatibility (renamed to patches$).\n         */\n        incomingPatches$?: PatchObservable\n\n        /**\n         * Whether or not the editor should be in read-only mode\n         */\n        readOnly?: boolean\n\n        /**\n         * The current value of the portable text field\n         */\n        value?: PortableTextBlock[]\n\n        /**\n         * A ref to the editor instance\n         */\n        editorRef?: MutableRefObject<PortableTextEditor | null>\n      }\n>\n\n/**\n * The main Portable Text Editor component.\n * @public\n * @deprecated Use `EditorProvider` instead\n */\nexport class PortableTextEditor extends Component<\n  PortableTextEditorProps<Editor | undefined>\n> {\n  public static displayName = 'PortableTextEditor'\n  /**\n   * An observable of all the editor changes.\n   */\n  public change$: EditorChanges = new Subject()\n  /**\n   * A lookup table for all the relevant schema types for this portable text type.\n   */\n  public schemaTypes: PortableTextMemberSchemaTypes\n  /**\n   * The editor instance\n   */\n  private editor: Editor\n  /*\n   * The editor API (currently implemented with Slate).\n   */\n  private editable: EditableAPI\n\n  constructor(props: PortableTextEditorProps) {\n    super(props)\n\n    if (props.editor) {\n      this.editor = props.editor as Editor\n    } else {\n      this.editor = createEditor({\n        keyGenerator: props.keyGenerator ?? defaultKeyGenerator,\n        schema: props.schemaType,\n        initialValue: props.value,\n        maxBlocks:\n          props.maxBlocks === undefined\n            ? undefined\n            : Number.parseInt(props.maxBlocks.toString(), 10),\n        readOnly: props.readOnly,\n      })\n    }\n\n    this.schemaTypes =\n      this.editor._internal.editorActor.getSnapshot().context.schema\n    this.editable = this.editor._internal.editable\n  }\n\n  componentDidUpdate(prevProps: PortableTextEditorProps) {\n    // Set up the schema type lookup table again if the source schema type changes\n    if (\n      !this.props.editor &&\n      !prevProps.editor &&\n      this.props.schemaType !== prevProps.schemaType\n    ) {\n      this.schemaTypes = createEditorSchema(\n        this.props.schemaType.hasOwnProperty('jsonType')\n          ? this.props.schemaType\n          : compileType(this.props.schemaType),\n      )\n\n      this.editor._internal.editorActor.send({\n        type: 'update schema',\n        schema: this.schemaTypes,\n      })\n    }\n\n    if (!this.props.editor && !prevProps.editor) {\n      if (this.props.readOnly !== prevProps.readOnly) {\n        this.editor._internal.editorActor.send({\n          type: 'update readOnly',\n          readOnly: this.props.readOnly ?? false,\n        })\n      }\n\n      if (this.props.maxBlocks !== prevProps.maxBlocks) {\n        this.editor._internal.editorActor.send({\n          type: 'update maxBlocks',\n          maxBlocks:\n            this.props.maxBlocks === undefined\n              ? undefined\n              : Number.parseInt(this.props.maxBlocks.toString(), 10),\n        })\n      }\n\n      if (this.props.value !== prevProps.value) {\n        this.editor._internal.editorActor.send({\n          type: 'update value',\n          value: this.props.value,\n        })\n      }\n\n      if (\n        this.props.editorRef !== prevProps.editorRef &&\n        this.props.editorRef\n      ) {\n        this.props.editorRef.current = this\n      }\n    }\n  }\n\n  public setEditable = (editable: EditableAPI) => {\n    this.editor._internal.editable = {\n      ...this.editor._internal.editable,\n      ...editable,\n    }\n  }\n\n  render() {\n    const legacyPatches = !this.props.editor\n      ? (this.props.incomingPatches$ ?? this.props.patches$)\n      : undefined\n\n    return (\n      <>\n        {legacyPatches ? (\n          <RoutePatchesObservableToEditorActor\n            editorActor={this.editor._internal.editorActor}\n            patches$={legacyPatches}\n          />\n        ) : null}\n        <RouteEventsToChanges\n          editorActor={this.editor._internal.editorActor}\n          onChange={(change) => {\n            if (!this.props.editor) {\n              this.props.onChange(change)\n            }\n            /**\n             * For backwards compatibility, we relay all changes to the\n             * `change$` Subject as well.\n             */\n            this.change$.next(change)\n          }}\n        />\n        <Synchronizer\n          editorActor={this.editor._internal.editorActor}\n          slateEditor={this.editor._internal.slateEditor.instance}\n        />\n        <EditorActorContext.Provider value={this.editor._internal.editorActor}>\n          <Slate\n            editor={this.editor._internal.slateEditor.instance}\n            initialValue={this.editor._internal.slateEditor.initialValue}\n          >\n            <PortableTextEditorContext.Provider value={this}>\n              <PortableTextEditorSelectionProvider\n                editorActor={this.editor._internal.editorActor}\n              >\n                {this.props.children}\n              </PortableTextEditorSelectionProvider>\n            </PortableTextEditorContext.Provider>\n          </Slate>\n        </EditorActorContext.Provider>\n      </>\n    )\n  }\n\n  // Static API methods\n  static activeAnnotations = (\n    editor: PortableTextEditor,\n  ): PortableTextObject[] => {\n    return editor && editor.editable ? editor.editable.activeAnnotations() : []\n  }\n  static isAnnotationActive = (\n    editor: PortableTextEditor,\n    annotationType: PortableTextObject['_type'],\n  ): boolean => {\n    return editor && editor.editable\n      ? editor.editable.isAnnotationActive(annotationType)\n      : false\n  }\n  static addAnnotation = <TSchemaType extends {name: string}>(\n    editor: PortableTextEditor,\n    type: TSchemaType,\n    value?: {[prop: string]: unknown},\n  ): AddedAnnotationPaths | undefined =>\n    editor.editable?.addAnnotation(type, value)\n  static blur = (editor: PortableTextEditor): void => {\n    debug('Host blurred')\n    editor.editable?.blur()\n  }\n  static delete = (\n    editor: PortableTextEditor,\n    selection: EditorSelection,\n    options?: EditableAPIDeleteOptions,\n  ) => editor.editable?.delete(selection, options)\n  static findDOMNode = (\n    editor: PortableTextEditor,\n    element: PortableTextBlock | PortableTextChild,\n  ) => {\n    return editor.editable?.findDOMNode(element)\n  }\n  static findByPath = (editor: PortableTextEditor, path: Path) => {\n    return editor.editable?.findByPath(path) || []\n  }\n  static focus = (editor: PortableTextEditor): void => {\n    debug('Host requesting focus')\n    editor.editable?.focus()\n  }\n  static focusBlock = (editor: PortableTextEditor) => {\n    return editor.editable?.focusBlock()\n  }\n  static focusChild = (\n    editor: PortableTextEditor,\n  ): PortableTextChild | undefined => {\n    return editor.editable?.focusChild()\n  }\n  static getSelection = (editor: PortableTextEditor) => {\n    return editor.editable ? editor.editable.getSelection() : null\n  }\n  static getValue = (editor: PortableTextEditor) => {\n    return editor.editable?.getValue()\n  }\n  static hasBlockStyle = (editor: PortableTextEditor, blockStyle: string) => {\n    return editor.editable?.hasBlockStyle(blockStyle)\n  }\n  static hasListStyle = (editor: PortableTextEditor, listStyle: string) => {\n    return editor.editable?.hasListStyle(listStyle)\n  }\n  static isCollapsedSelection = (editor: PortableTextEditor) =>\n    editor.editable?.isCollapsedSelection()\n  static isExpandedSelection = (editor: PortableTextEditor) =>\n    editor.editable?.isExpandedSelection()\n  static isMarkActive = (editor: PortableTextEditor, mark: string) =>\n    editor.editable?.isMarkActive(mark)\n  static insertChild = <TSchemaType extends {name: string}>(\n    editor: PortableTextEditor,\n    type: TSchemaType,\n    value?: {[prop: string]: unknown},\n  ): Path | undefined => {\n    debug(`Host inserting child`)\n    return editor.editable?.insertChild(type, value)\n  }\n  static insertBlock = <TSchemaType extends {name: string}>(\n    editor: PortableTextEditor,\n    type: TSchemaType,\n    value?: {[prop: string]: unknown},\n  ): Path | undefined => {\n    return editor.editable?.insertBlock(type, value)\n  }\n  static insertBreak = (editor: PortableTextEditor): void => {\n    return editor.editable?.insertBreak()\n  }\n  static isVoid = (\n    editor: PortableTextEditor,\n    element: PortableTextBlock | PortableTextChild,\n  ) => {\n    return editor.editable?.isVoid(element)\n  }\n  static isObjectPath = (_editor: PortableTextEditor, path: Path): boolean => {\n    if (!path || !Array.isArray(path)) return false\n    const isChildObjectEditPath = path.length > 3 && path[1] === 'children'\n    const isBlockObjectEditPath = path.length > 1 && path[1] !== 'children'\n    return isBlockObjectEditPath || isChildObjectEditPath\n  }\n  static marks = (editor: PortableTextEditor) => {\n    return editor.editable?.marks()\n  }\n  static select = (\n    editor: PortableTextEditor,\n    selection: EditorSelection | null,\n  ) => {\n    debug(`Host setting selection`, selection)\n    editor.editable?.select(selection)\n  }\n  static removeAnnotation = <TSchemaType extends {name: string}>(\n    editor: PortableTextEditor,\n    type: TSchemaType,\n  ) => editor.editable?.removeAnnotation(type)\n  static toggleBlockStyle = (\n    editor: PortableTextEditor,\n    blockStyle: string,\n  ) => {\n    debug(`Host is toggling block style`)\n    return editor.editable?.toggleBlockStyle(blockStyle)\n  }\n  static toggleList = (editor: PortableTextEditor, listStyle: string): void => {\n    return editor.editable?.toggleList(listStyle)\n  }\n  static toggleMark = (editor: PortableTextEditor, mark: string): void => {\n    debug(`Host toggling mark`, mark)\n    editor.editable?.toggleMark(mark)\n  }\n  static getFragment = (\n    editor: PortableTextEditor,\n  ): PortableTextBlock[] | undefined => {\n    debug(`Host getting fragment`)\n    return editor.editable?.getFragment()\n  }\n  static undo = (editor: PortableTextEditor): void => {\n    debug('Host undoing')\n    editor.editable?.undo()\n  }\n  static redo = (editor: PortableTextEditor): void => {\n    debug('Host redoing')\n    editor.editable?.redo()\n  }\n  static isSelectionsOverlapping = (\n    editor: PortableTextEditor,\n    selectionA: EditorSelection,\n    selectionB: EditorSelection,\n  ) => {\n    return editor.editable?.isSelectionsOverlapping(selectionA, selectionB)\n  }\n}\n\nfunction RoutePatchesObservableToEditorActor(props: {\n  editorActor: EditorActor\n  patches$: PatchObservable\n}) {\n  useEffect(() => {\n    const subscription = props.patches$.subscribe((payload) => {\n      props.editorActor.send({\n        type: 'patches',\n        ...payload,\n      })\n    })\n\n    return () => {\n      subscription.unsubscribe()\n    }\n  }, [props.editorActor, props.patches$])\n\n  return null\n}\n\nexport function RouteEventsToChanges(props: {\n  editorActor: EditorActor\n  onChange: (change: EditorChange) => void\n}) {\n  // We want to ensure that _when_ `props.onChange` is called, it uses the current value.\n  // But we don't want to have the `useEffect` run setup + teardown + setup every time the prop might change, as that's unnecessary.\n  // So we use our own polyfill that lets us use an upcoming React hook that solves this exact problem.\n  // https://19.react.dev/learn/separating-events-from-effects#declaring-an-effect-event\n  const handleChange = useEffectEvent((change: EditorChange) =>\n    props.onChange(change),\n  )\n\n  useEffect(() => {\n    debug('Subscribing to editor changes')\n    const sub = props.editorActor.on('*', (event) => {\n      switch (event.type) {\n        case 'blurred': {\n          handleChange({type: 'blur', event: event.event})\n          break\n        }\n        case 'patch':\n          handleChange(event)\n          break\n        case 'loading': {\n          handleChange({type: 'loading', isLoading: true})\n          break\n        }\n        case 'done loading': {\n          handleChange({type: 'loading', isLoading: false})\n          break\n        }\n        case 'focused': {\n          handleChange({type: 'focus', event: event.event})\n          break\n        }\n        case 'value changed': {\n          handleChange({type: 'value', value: event.value})\n          break\n        }\n        case 'invalid value': {\n          handleChange({\n            type: 'invalidValue',\n            resolution: event.resolution,\n            value: event.value,\n          })\n          break\n        }\n        case 'error': {\n          handleChange({\n            ...event,\n            level: 'warning',\n          })\n          break\n        }\n        case 'annotation.add':\n        case 'annotation.remove':\n        case 'annotation.toggle':\n        case 'blur':\n        case 'decorator.add':\n        case 'decorator.remove':\n        case 'decorator.toggle':\n        case 'focus':\n        case 'insert.block object':\n        case 'insert.inline object':\n        case 'list item.toggle':\n        case 'style.toggle':\n        case 'patches':\n        case 'editable':\n        case 'read only':\n          break\n        default:\n          handleChange(event)\n      }\n    })\n    return () => {\n      debug('Unsubscribing to changes')\n      sub.unsubscribe()\n    }\n  }, [props.editorActor, handleChange])\n\n  return null\n}\n","import type {\n  Path,\n  PortableTextObject,\n  PortableTextTextBlock,\n} from '@sanity/types'\nimport {isEqual, uniq} from 'lodash'\nimport {\n  startTransition,\n  useCallback,\n  useEffect,\n  useMemo,\n  useRef,\n  useState,\n  type ReactElement,\n} from 'react'\nimport {Text} from 'slate'\nimport {useSelected, type RenderLeafProps} from 'slate-react'\nimport type {\n  BlockAnnotationRenderProps,\n  BlockChildRenderProps,\n  BlockDecoratorRenderProps,\n  PortableTextMemberSchemaTypes,\n  RenderAnnotationFunction,\n  RenderChildFunction,\n  RenderDecoratorFunction,\n} from '../../types/editor'\nimport {debugWithName} from '../../utils/debug'\nimport type {EditorActor} from '../editor-machine'\nimport {usePortableTextEditor} from '../hooks/usePortableTextEditor'\nimport {DefaultAnnotation} from '../nodes/DefaultAnnotation'\nimport {PortableTextEditor} from '../PortableTextEditor'\n\nconst debug = debugWithName('components:Leaf')\n\nconst EMPTY_MARKS: string[] = []\n\n/**\n * @internal\n */\nexport interface LeafProps extends RenderLeafProps {\n  editorActor: EditorActor\n  children: ReactElement<any>\n  schemaTypes: PortableTextMemberSchemaTypes\n  renderAnnotation?: RenderAnnotationFunction\n  renderChild?: RenderChildFunction\n  renderDecorator?: RenderDecoratorFunction\n  readOnly: boolean\n}\n\n/**\n * Renders Portable Text span nodes in Slate\n * @internal\n */\nexport const Leaf = (props: LeafProps) => {\n  const {\n    editorActor,\n    attributes,\n    children,\n    leaf,\n    schemaTypes,\n    renderChild,\n    renderDecorator,\n    renderAnnotation,\n  } = props\n  const spanRef = useRef<HTMLElement>(null)\n  const portableTextEditor = usePortableTextEditor()\n  const blockSelected = useSelected()\n  const [focused, setFocused] = useState(false)\n  const [selected, setSelected] = useState(false)\n  const block = children.props.parent as PortableTextTextBlock | undefined\n  const path: Path = useMemo(\n    () => (block ? [{_key: block?._key}, 'children', {_key: leaf._key}] : []),\n    [block, leaf._key],\n  )\n  const decoratorValues = useMemo(\n    () => schemaTypes.decorators.map((dec) => dec.value),\n    [schemaTypes.decorators],\n  )\n  const marks: string[] = useMemo(\n    () =>\n      uniq(\n        (leaf.marks || EMPTY_MARKS).filter((mark) =>\n          decoratorValues.includes(mark),\n        ),\n      ),\n    [decoratorValues, leaf.marks],\n  )\n  const annotationMarks = Array.isArray(leaf.marks) ? leaf.marks : EMPTY_MARKS\n  const annotations = useMemo(\n    () =>\n      annotationMarks\n        .map(\n          (mark) =>\n            !decoratorValues.includes(mark) &&\n            block?.markDefs?.find((def) => def._key === mark),\n        )\n        .filter(Boolean) as PortableTextObject[],\n    [annotationMarks, block, decoratorValues],\n  )\n\n  const shouldTrackSelectionAndFocus = annotations.length > 0 && blockSelected\n\n  useEffect(() => {\n    if (!shouldTrackSelectionAndFocus) {\n      setFocused(false)\n      return\n    }\n    const sel = PortableTextEditor.getSelection(portableTextEditor)\n    if (\n      sel &&\n      isEqual(sel.focus.path, path) &&\n      PortableTextEditor.isCollapsedSelection(portableTextEditor)\n    ) {\n      startTransition(() => {\n        setFocused(true)\n      })\n    }\n  }, [shouldTrackSelectionAndFocus, path, portableTextEditor])\n\n  // Function to check if this leaf is currently inside the user's text selection\n  const setSelectedFromRange = useCallback(() => {\n    if (!shouldTrackSelectionAndFocus) {\n      return\n    }\n    debug('Setting selection and focus from range')\n    const winSelection = window.getSelection()\n    if (!winSelection) {\n      setSelected(false)\n      return\n    }\n    if (winSelection && winSelection.rangeCount > 0) {\n      const range = winSelection.getRangeAt(0)\n      if (spanRef.current && range.intersectsNode(spanRef.current)) {\n        setSelected(true)\n      } else {\n        setSelected(false)\n      }\n    } else {\n      setSelected(false)\n    }\n  }, [shouldTrackSelectionAndFocus])\n\n  useEffect(() => {\n    if (!shouldTrackSelectionAndFocus) {\n      return undefined\n    }\n\n    const onBlur = editorActor.on('blur', () => {\n      setFocused(false)\n      setSelected(false)\n    })\n\n    const onFocus = editorActor.on('focus', () => {\n      const sel = PortableTextEditor.getSelection(portableTextEditor)\n      if (\n        sel &&\n        isEqual(sel.focus.path, path) &&\n        PortableTextEditor.isCollapsedSelection(portableTextEditor)\n      ) {\n        setFocused(true)\n      }\n      setSelectedFromRange()\n    })\n\n    const onSelection = editorActor.on('selection', (event) => {\n      if (\n        event.selection &&\n        isEqual(event.selection.focus.path, path) &&\n        PortableTextEditor.isCollapsedSelection(portableTextEditor)\n      ) {\n        setFocused(true)\n      } else {\n        setFocused(false)\n      }\n      setSelectedFromRange()\n    })\n\n    return () => {\n      onBlur.unsubscribe()\n      onFocus.unsubscribe()\n      onSelection.unsubscribe()\n    }\n  }, [\n    editorActor,\n    path,\n    portableTextEditor,\n    setSelectedFromRange,\n    shouldTrackSelectionAndFocus,\n  ])\n\n  useEffect(() => setSelectedFromRange(), [setSelectedFromRange])\n\n  const content = useMemo(() => {\n    let returnedChildren = children\n    // Render text nodes\n    if (Text.isText(leaf) && leaf._type === schemaTypes.span.name) {\n      marks.forEach((mark) => {\n        const schemaType = schemaTypes.decorators.find(\n          (dec) => dec.value === mark,\n        )\n        if (schemaType && renderDecorator) {\n          const _props: Omit<BlockDecoratorRenderProps, 'type'> =\n            Object.defineProperty(\n              {\n                children: returnedChildren,\n                editorElementRef: spanRef,\n                focused,\n                path,\n                selected,\n                schemaType,\n                value: mark,\n              },\n              'type',\n              {\n                enumerable: false,\n                get() {\n                  console.warn(\n                    \"Property 'type' is deprecated, use 'schemaType' instead.\",\n                  )\n                  return schemaType\n                },\n              },\n            )\n          returnedChildren = renderDecorator(\n            _props as BlockDecoratorRenderProps,\n          )\n        }\n      })\n\n      if (block && annotations.length > 0) {\n        annotations.forEach((annotation) => {\n          const schemaType = schemaTypes.annotations.find(\n            (t) => t.name === annotation._type,\n          )\n          if (schemaType) {\n            if (renderAnnotation) {\n              const _props: Omit<BlockAnnotationRenderProps, 'type'> =\n                Object.defineProperty(\n                  {\n                    block,\n                    children: returnedChildren,\n                    editorElementRef: spanRef,\n                    focused,\n                    path,\n                    selected,\n                    schemaType,\n                    value: annotation,\n                  },\n                  'type',\n                  {\n                    enumerable: false,\n                    get() {\n                      console.warn(\n                        \"Property 'type' is deprecated, use 'schemaType' instead.\",\n                      )\n                      return schemaType\n                    },\n                  },\n                )\n\n              returnedChildren = (\n                <span ref={spanRef}>\n                  {renderAnnotation(_props as BlockAnnotationRenderProps)}\n                </span>\n              )\n            } else {\n              returnedChildren = (\n                <DefaultAnnotation annotation={annotation}>\n                  <span ref={spanRef}>{returnedChildren}</span>\n                </DefaultAnnotation>\n              )\n            }\n          }\n        })\n      }\n      if (block && renderChild) {\n        const child = block.children.find((_child) => _child._key === leaf._key) // Ensure object equality\n        if (child) {\n          const defaultRendered = <>{returnedChildren}</>\n          const _props: Omit<BlockChildRenderProps, 'type'> =\n            Object.defineProperty(\n              {\n                annotations,\n                children: defaultRendered,\n                editorElementRef: spanRef,\n                focused,\n                path,\n                schemaType: schemaTypes.span,\n                selected,\n                value: child,\n              },\n              'type',\n              {\n                enumerable: false,\n                get() {\n                  console.warn(\n                    \"Property 'type' is deprecated, use 'schemaType' instead.\",\n                  )\n                  return schemaTypes.span\n                },\n              },\n            )\n          returnedChildren = renderChild(_props as BlockChildRenderProps)\n        }\n      }\n    }\n    return returnedChildren\n  }, [\n    annotations,\n    block,\n    children,\n    focused,\n    leaf,\n    marks,\n    path,\n    renderAnnotation,\n    renderChild,\n    renderDecorator,\n    schemaTypes.annotations,\n    schemaTypes.decorators,\n    schemaTypes.span,\n    selected,\n  ])\n  return useMemo(\n    () => (\n      <span key={leaf._key} {...attributes} ref={spanRef}>\n        {content}\n      </span>\n    ),\n    [leaf, attributes, content],\n  )\n}\n\nLeaf.displayName = 'Leaf'\n","import type {KeyboardEvent} from 'react'\nimport type {ReactEditor} from 'slate-react'\nimport type {PortableTextSlateEditor} from '../../types/editor'\nimport type {HotkeyOptions} from '../../types/options'\nimport {debugWithName} from '../../utils/debug'\nimport {isHotkey} from '../../utils/is-hotkey'\nimport type {EditorActor} from '../editor-machine'\nimport type {PortableTextEditor} from '../PortableTextEditor'\n\nconst debug = debugWithName('plugin:withHotKeys')\n\nconst DEFAULT_HOTKEYS: HotkeyOptions = {\n  marks: {\n    'mod+b': 'strong',\n    'mod+i': 'em',\n    'mod+u': 'underline',\n    \"mod+'\": 'code',\n  },\n  custom: {},\n}\n\n/**\n * This plugin takes care of all hotkeys in the editor\n *\n */\nexport function createWithHotkeys(\n  editorActor: EditorActor,\n  portableTextEditor: PortableTextEditor,\n  hotkeysFromOptions?: HotkeyOptions,\n): (editor: PortableTextSlateEditor & ReactEditor) => any {\n  const reservedHotkeys = ['enter', 'tab', 'shift', 'delete', 'end']\n  const activeHotkeys = hotkeysFromOptions || DEFAULT_HOTKEYS // TODO: Merge where possible? A union?\n  return function withHotKeys(editor: PortableTextSlateEditor & ReactEditor) {\n    editor.pteWithHotKeys = (event: KeyboardEvent<HTMLDivElement>): void => {\n      // Wire up custom marks hotkeys\n      Object.keys(activeHotkeys).forEach((cat) => {\n        if (cat === 'marks') {\n          for (const hotkey in activeHotkeys[cat]) {\n            if (reservedHotkeys.includes(hotkey)) {\n              throw new Error(`The hotkey ${hotkey} is reserved!`)\n            }\n            if (isHotkey(hotkey, event.nativeEvent)) {\n              event.preventDefault()\n              const possibleMark = activeHotkeys[cat]\n              if (possibleMark) {\n                const mark = possibleMark[hotkey]\n                debug(`HotKey ${hotkey} to toggle ${mark}`)\n                editorActor.send({\n                  type: 'behavior event',\n                  behaviorEvent: {\n                    type: 'decorator.toggle',\n                    decorator: mark,\n                  },\n                  editor,\n                })\n              }\n            }\n          }\n        }\n        if (cat === 'custom') {\n          for (const hotkey in activeHotkeys[cat]) {\n            if (reservedHotkeys.includes(hotkey)) {\n              throw new Error(`The hotkey ${hotkey} is reserved!`)\n            }\n            if (isHotkey(hotkey, event.nativeEvent)) {\n              const possibleCommand = activeHotkeys[cat]\n              if (possibleCommand) {\n                const command = possibleCommand[hotkey]\n                command(event, portableTextEditor)\n              }\n            }\n          }\n        }\n      })\n    }\n    return editor\n  }\n}\n","import {htmlToBlocks, normalizeBlock} from '@sanity/block-tools'\nimport type {PortableTextBlock, PortableTextChild} from '@sanity/types'\nimport {isEqual, uniq} from 'lodash'\nimport {Editor, Range, Transforms, type Descendant, type Node} from 'slate'\nimport {ReactEditor} from 'slate-react'\nimport type {\n  PortableTextMemberSchemaTypes,\n  PortableTextSlateEditor,\n} from '../../types/editor'\nimport {debugWithName} from '../../utils/debug'\nimport {validateValue} from '../../utils/validateValue'\nimport {\n  fromSlateValue,\n  isEqualToEmptyEditor,\n  toSlateValue,\n} from '../../utils/values'\nimport type {EditorActor} from '../editor-machine'\n\nconst debug = debugWithName('plugin:withInsertData')\n\n/**\n * This plugin handles copy/paste in the editor\n *\n */\nexport function createWithInsertData(\n  editorActor: EditorActor,\n  schemaTypes: PortableTextMemberSchemaTypes,\n) {\n  return function withInsertData(\n    editor: PortableTextSlateEditor,\n  ): PortableTextSlateEditor {\n    const blockTypeName = schemaTypes.block.name\n    const spanTypeName = schemaTypes.span.name\n    const whitespaceOnPasteMode =\n      schemaTypes.block.options.unstable_whitespaceOnPasteMode\n\n    const toPlainText = (blocks: PortableTextBlock[]) => {\n      return blocks\n        .map((block) => {\n          if (editor.isTextBlock(block)) {\n            return block.children\n              .map((child: PortableTextChild) => {\n                if (child._type === spanTypeName) {\n                  return child.text\n                }\n                return `[${\n                  schemaTypes.inlineObjects.find((t) => t.name === child._type)\n                    ?.title || 'Object'\n                }]`\n              })\n              .join('')\n          }\n          return `[${\n            schemaTypes.blockObjects.find((t) => t.name === block._type)\n              ?.title || 'Object'\n          }]`\n        })\n        .join('\\n\\n')\n    }\n\n    editor.setFragmentData = (data: DataTransfer, originEvent) => {\n      const {selection} = editor\n\n      if (!selection) {\n        return\n      }\n\n      const [start, end] = Range.edges(selection)\n      const startVoid = Editor.void(editor, {at: start.path})\n      const endVoid = Editor.void(editor, {at: end.path})\n\n      if (Range.isCollapsed(selection) && !startVoid) {\n        return\n      }\n\n      // Create a fake selection so that we can add a Base64-encoded copy of the\n      // fragment to the HTML, to decode on future pastes.\n      const domRange = ReactEditor.toDOMRange(editor, selection)\n      let contents = domRange.cloneContents()\n      // COMPAT: If the end node is a void node, we need to move the end of the\n      // range from the void node's spacer span, to the end of the void node's\n      // content, since the spacer is before void's content in the DOM.\n      if (endVoid) {\n        const [voidNode] = endVoid\n        const r = domRange.cloneRange()\n        const domNode = ReactEditor.toDOMNode(editor, voidNode)\n        r.setEndAfter(domNode)\n        contents = r.cloneContents()\n      }\n      // Remove any zero-width space spans from the cloned DOM so that they don't\n      // show up elsewhere when pasted.\n      Array.from(contents.querySelectorAll('[data-slate-zero-width]')).forEach(\n        (zw) => {\n          const isNewline = zw.getAttribute('data-slate-zero-width') === 'n'\n          zw.textContent = isNewline ? '\\n' : ''\n        },\n      )\n      // Clean up the clipboard HTML for editor spesific attributes\n      Array.from(contents.querySelectorAll('*')).forEach((elm) => {\n        elm.removeAttribute('contentEditable')\n        elm.removeAttribute('data-slate-inline')\n        elm.removeAttribute('data-slate-leaf')\n        elm.removeAttribute('data-slate-node')\n        elm.removeAttribute('data-slate-spacer')\n        elm.removeAttribute('data-slate-string')\n        elm.removeAttribute('data-slate-zero-width')\n        elm.removeAttribute('draggable')\n        for (const key in elm.attributes) {\n          if (elm.hasAttribute(key)) {\n            elm.removeAttribute(key)\n          }\n        }\n      })\n      const div = contents.ownerDocument.createElement('div')\n      div.appendChild(contents)\n      div.setAttribute('hidden', 'true')\n      contents.ownerDocument.body.appendChild(div)\n      const asHTML = div.innerHTML\n      contents.ownerDocument.body.removeChild(div)\n      const fragment = editor.getFragment()\n      const portableText = fromSlateValue(fragment, blockTypeName)\n\n      const asJSON = JSON.stringify(portableText)\n      const asPlainText = toPlainText(portableText)\n      data.clearData()\n      data.setData('text/plain', asPlainText)\n      data.setData('text/html', asHTML)\n      data.setData('application/json', asJSON)\n      data.setData('application/x-portable-text', asJSON)\n      debug('text', asPlainText)\n      data.setData(\n        'application/x-portable-text-event-origin',\n        originEvent || 'external',\n      )\n      debug('Set fragment data', asJSON, asHTML)\n    }\n\n    editor.insertPortableTextData = (data: DataTransfer): boolean => {\n      if (!editor.selection) {\n        return false\n      }\n      const pText = data.getData('application/x-portable-text')\n      const origin = data.getData('application/x-portable-text-event-origin')\n      debug(`Inserting portable text from ${origin} event`, pText)\n      if (pText) {\n        const parsed = JSON.parse(pText) as PortableTextBlock[]\n        if (Array.isArray(parsed) && parsed.length > 0) {\n          const slateValue = _regenerateKeys(\n            editor,\n            toSlateValue(parsed, {schemaTypes}),\n            editorActor.getSnapshot().context.keyGenerator,\n            spanTypeName,\n            schemaTypes,\n          )\n          // Validate the result\n          const validation = validateValue(\n            parsed,\n            schemaTypes,\n            editorActor.getSnapshot().context.keyGenerator,\n          )\n          // Bail out if it's not valid\n          if (!validation.valid && !validation.resolution?.autoResolve) {\n            const errorDescription = `${validation.resolution?.description}`\n            editorActor.send({\n              type: 'error',\n              name: 'pasteError',\n              description: errorDescription,\n              data: validation,\n            })\n            debug('Invalid insert result', validation)\n            return false\n          }\n          _insertFragment(editor, slateValue, schemaTypes)\n          return true\n        }\n      }\n      return false\n    }\n\n    editor.insertTextOrHTMLData = (data: DataTransfer): boolean => {\n      if (!editor.selection) {\n        debug('No selection, not inserting')\n        return false\n      }\n      const html = data.getData('text/html')\n      const text = data.getData('text/plain')\n\n      if (html || text) {\n        debug('Inserting data', data)\n        let portableText: PortableTextBlock[]\n        let fragment: Node[]\n        let insertedType: string | undefined\n\n        if (html) {\n          portableText = htmlToBlocks(html, schemaTypes.portableText, {\n            unstable_whitespaceOnPasteMode: whitespaceOnPasteMode,\n          }).map((block) =>\n            normalizeBlock(block, {blockTypeName}),\n          ) as PortableTextBlock[]\n          fragment = toSlateValue(portableText, {schemaTypes})\n          insertedType = 'HTML'\n\n          if (portableText.length === 0) {\n            return false\n          }\n        } else {\n          // plain text\n          const blocks = escapeHtml(text)\n            .split(/\\n{2,}/)\n            .map((line) =>\n              line\n                ? `<p>${line.replace(/(?:\\r\\n|\\r|\\n)/g, '<br/>')}</p>`\n                : '<p></p>',\n            )\n            .join('')\n          const textToHtml = `<html><body>${blocks}</body></html>`\n          portableText = htmlToBlocks(textToHtml, schemaTypes.portableText).map(\n            (block) => normalizeBlock(block, {blockTypeName}),\n          ) as PortableTextBlock[]\n          fragment = toSlateValue(portableText, {\n            schemaTypes,\n          })\n          insertedType = 'text'\n        }\n\n        // Validate the result\n        const validation = validateValue(\n          portableText,\n          schemaTypes,\n          editorActor.getSnapshot().context.keyGenerator,\n        )\n\n        // Bail out if it's not valid\n        if (!validation.valid) {\n          const errorDescription = `Could not validate the resulting portable text to insert.\\n${validation.resolution?.description}\\nTry to insert as plain text (shift-paste) instead.`\n          editorActor.send({\n            type: 'error',\n            name: 'pasteError',\n            description: errorDescription,\n            data: validation,\n          })\n          debug('Invalid insert result', validation)\n          return false\n        }\n        debug(\n          `Inserting ${insertedType} fragment at ${JSON.stringify(editor.selection)}`,\n        )\n        _insertFragment(editor, fragment, schemaTypes)\n        return true\n      }\n      return false\n    }\n\n    editor.insertData = (data: DataTransfer) => {\n      if (!editor.insertPortableTextData(data)) {\n        editor.insertTextOrHTMLData(data)\n      }\n    }\n\n    editor.insertFragmentData = (data: DataTransfer): boolean => {\n      const fragment = data.getData('application/x-portable-text')\n      if (fragment) {\n        const parsed = JSON.parse(fragment)\n        editor.insertFragment(parsed)\n        return true\n      }\n      return false\n    }\n\n    return editor\n  }\n}\n\nconst entityMap: Record<string, string> = {\n  '&': '&amp;',\n  '<': '&lt;',\n  '>': '&gt;',\n  '\"': '&quot;',\n  \"'\": '&#39;',\n  '/': '&#x2F;',\n  '`': '&#x60;',\n  '=': '&#x3D;',\n}\nfunction escapeHtml(str: string) {\n  return String(str).replace(/[&<>\"'`=/]/g, (s: string) => entityMap[s])\n}\n\n/**\n * Shared helper function to regenerate the keys on a fragment.\n *\n * @internal\n */\nfunction _regenerateKeys(\n  editor: Pick<PortableTextSlateEditor, 'isTextBlock' | 'isTextSpan'>,\n  fragment: Descendant[],\n  keyGenerator: () => string,\n  spanTypeName: string,\n  editorTypes: Pick<PortableTextMemberSchemaTypes, 'annotations'>,\n): Descendant[] {\n  return fragment.map((node) => {\n    const newNode: Descendant = {...node}\n    // Ensure the copy has new keys\n    if (editor.isTextBlock(newNode)) {\n      const annotations = editorTypes.annotations.map((t) => t.name)\n\n      // Ensure that if there are no annotations, we remove the markDefs\n      if (annotations.length === 0) {\n        const {markDefs, ...NewNodeNoDefs} = newNode\n\n        return {...NewNodeNoDefs, _key: keyGenerator()}\n      }\n\n      // Ensure that all annotations are allowed\n      const hasForbiddenAnnotations = (newNode.markDefs || []).some((def) => {\n        return !annotations.includes(def._type)\n      })\n\n      // if they have forbidden annotations, we remove them and keep the rest\n      if (hasForbiddenAnnotations) {\n        const allowedAnnotations = (newNode.markDefs || []).filter((def) => {\n          return annotations.includes(def._type)\n        })\n\n        return {...newNode, markDefs: allowedAnnotations, _key: keyGenerator()}\n      }\n\n      newNode.markDefs = (newNode.markDefs || []).map((def) => {\n        const oldKey = def._key\n        const newKey = keyGenerator()\n        newNode.children = newNode.children.map((child) =>\n          child._type === spanTypeName && editor.isTextSpan(child)\n            ? {\n                ...child,\n                marks:\n                  child.marks && child.marks.includes(oldKey)\n                    ? [...child.marks]\n                        .filter((mark) => mark !== oldKey)\n                        .concat(newKey)\n                    : child.marks,\n              }\n            : child,\n        )\n        return {...def, _key: newKey}\n      })\n    }\n    const nodeWithNewKeys = {...newNode, _key: keyGenerator()}\n    if (editor.isTextBlock(nodeWithNewKeys)) {\n      nodeWithNewKeys.children = nodeWithNewKeys.children.map((child) => ({\n        ...child,\n        _key: keyGenerator(),\n      }))\n    }\n    return nodeWithNewKeys as Descendant\n  })\n}\n\n/**\n * Shared helper function to insert the final fragment into the editor\n *\n * @internal\n */\nfunction _insertFragment(\n  editor: PortableTextSlateEditor,\n  fragment: Descendant[],\n  schemaTypes: PortableTextMemberSchemaTypes,\n) {\n  editor.withoutNormalizing(() => {\n    if (!editor.selection) {\n      return\n    }\n    // Ensure that markDefs for any annotations inside this fragment are copied over to the focused text block.\n    const [focusBlock, focusPath] = Editor.node(editor, editor.selection, {\n      depth: 1,\n    })\n    if (editor.isTextBlock(focusBlock) && editor.isTextBlock(fragment[0])) {\n      const {markDefs} = focusBlock\n      debug(\n        'Mixing markDefs of focusBlock and fragments[0] block',\n        markDefs,\n        fragment[0].markDefs,\n      )\n      if (!isEqual(markDefs, fragment[0].markDefs)) {\n        Transforms.setNodes(\n          editor,\n          {\n            markDefs: uniq([\n              ...(fragment[0].markDefs || []),\n              ...(markDefs || []),\n            ]),\n          },\n          {at: focusPath, mode: 'lowest', voids: false},\n        )\n      }\n    }\n\n    const isPasteToEmptyEditor = isEqualToEmptyEditor(\n      editor.children,\n      schemaTypes,\n    )\n\n    if (isPasteToEmptyEditor) {\n      // Special case for pasting directly into an empty editor (a placeholder block).\n      // When pasting content starting with multiple empty blocks,\n      // `editor.insertFragment` can potentially duplicate the keys of\n      // the placeholder block because of operations that happen\n      // inside `editor.insertFragment` (involves an `insert_node` operation).\n      // However by splitting the placeholder block first in this situation we are good.\n      Transforms.splitNodes(editor, {at: [0, 0]})\n      editor.insertFragment(fragment)\n      Transforms.removeNodes(editor, {at: [0]})\n    } else {\n      // All other inserts\n      editor.insertFragment(fragment)\n    }\n  })\n\n  editor.onChange()\n}\n\n/**\n * functions we don't want to export but want to test\n * @internal\n */\nexport const exportedForTesting = {\n  _regenerateKeys,\n}\n","import type {BaseEditor, Operation} from 'slate'\nimport type {ReactEditor} from 'slate-react'\nimport type {PortableTextSlateEditor} from '../types/editor'\nimport type {EditorActor} from './editor-machine'\n\n// React Compiler considers `slateEditor` as immutable, and opts-out if we do this inline in a useEffect, doing it in a function moves it out of the scope, and opts-in again for the rest of the component.\nexport function withSyncRangeDecorations({\n  editorActor,\n  slateEditor,\n  syncRangeDecorations,\n}: {\n  editorActor: EditorActor\n  slateEditor: BaseEditor & ReactEditor & PortableTextSlateEditor\n  syncRangeDecorations: (operation?: Operation) => void\n}) {\n  const originalApply = slateEditor.apply\n\n  slateEditor.apply = (op: Operation) => {\n    originalApply(op)\n\n    if (\n      !editorActor.getSnapshot().matches({'edit mode': 'read only'}) &&\n      op.type !== 'set_selection'\n    ) {\n      syncRangeDecorations(op)\n    }\n  }\n\n  return () => {\n    slateEditor.apply = originalApply\n  }\n}\n","import type {PortableTextBlock} from '@sanity/types'\nimport {useSelector} from '@xstate/react'\nimport {isEqual, noop} from 'lodash'\nimport {\n  forwardRef,\n  useCallback,\n  useContext,\n  useEffect,\n  useImperativeHandle,\n  useMemo,\n  useRef,\n  useState,\n  type ClipboardEvent,\n  type CSSProperties,\n  type FocusEventHandler,\n  type KeyboardEvent,\n  type MutableRefObject,\n  type TextareaHTMLAttributes,\n} from 'react'\nimport {\n  Editor,\n  Node,\n  Path,\n  Range as SlateRange,\n  Transforms,\n  type BaseRange,\n  type NodeEntry,\n  type Operation,\n  type Text,\n} from 'slate'\nimport {\n  ReactEditor,\n  Editable as SlateEditable,\n  useSlate,\n  type RenderElementProps,\n  type RenderLeafProps,\n} from 'slate-react'\nimport type {\n  EditorSelection,\n  OnCopyFn,\n  OnPasteFn,\n  RangeDecoration,\n  RenderAnnotationFunction,\n  RenderBlockFunction,\n  RenderChildFunction,\n  RenderDecoratorFunction,\n  RenderListItemFunction,\n  RenderPlaceholderFunction,\n  RenderStyleFunction,\n  ScrollSelectionIntoViewFunction,\n} from '../types/editor'\nimport type {HotkeyOptions} from '../types/options'\nimport type {SlateTextBlock, VoidElement} from '../types/slate'\nimport {debugWithName} from '../utils/debug'\nimport {\n  moveRangeByOperation,\n  toPortableTextRange,\n  toSlateRange,\n} from '../utils/ranges'\nimport {normalizeSelection} from '../utils/selection'\nimport {\n  fromSlateValue,\n  isEqualToEmptyEditor,\n  toSlateValue,\n} from '../utils/values'\nimport {Element} from './components/Element'\nimport {Leaf} from './components/Leaf'\nimport {EditorActorContext} from './editor-actor-context'\nimport {usePortableTextEditor} from './hooks/usePortableTextEditor'\nimport {createWithHotkeys} from './plugins/createWithHotKeys'\nimport {createWithInsertData} from './plugins/createWithInsertData'\nimport {PortableTextEditor} from './PortableTextEditor'\nimport {withSyncRangeDecorations} from './withSyncRangeDecorations'\n\nconst debug = debugWithName('component:Editable')\n\nconst PLACEHOLDER_STYLE: CSSProperties = {\n  position: 'absolute',\n  userSelect: 'none',\n  pointerEvents: 'none',\n  left: 0,\n  right: 0,\n}\n\ninterface BaseRangeWithDecoration extends BaseRange {\n  rangeDecoration: RangeDecoration\n}\n\n/**\n * @public\n */\nexport type PortableTextEditableProps = Omit<\n  TextareaHTMLAttributes<HTMLDivElement>,\n  'onPaste' | 'onCopy' | 'onBeforeInput'\n> & {\n  hotkeys?: HotkeyOptions\n  onBeforeInput?: (event: InputEvent) => void\n  onPaste?: OnPasteFn\n  onCopy?: OnCopyFn\n  ref: MutableRefObject<HTMLDivElement | null>\n  rangeDecorations?: RangeDecoration[]\n  renderAnnotation?: RenderAnnotationFunction\n  renderBlock?: RenderBlockFunction\n  renderChild?: RenderChildFunction\n  renderDecorator?: RenderDecoratorFunction\n  renderListItem?: RenderListItemFunction\n  renderPlaceholder?: RenderPlaceholderFunction\n  renderStyle?: RenderStyleFunction\n  scrollSelectionIntoView?: ScrollSelectionIntoViewFunction\n  selection?: EditorSelection\n  spellCheck?: boolean\n}\n\n/**\n * @public\n */\nexport const PortableTextEditable = forwardRef<\n  Omit<HTMLDivElement, 'as' | 'onPaste' | 'onBeforeInput'>,\n  PortableTextEditableProps\n>(function PortableTextEditable(props, forwardedRef) {\n  const {\n    hotkeys,\n    onBlur,\n    onFocus,\n    onBeforeInput,\n    onPaste,\n    onCopy,\n    onClick,\n    rangeDecorations,\n    renderAnnotation,\n    renderBlock,\n    renderChild,\n    renderDecorator,\n    renderListItem,\n    renderPlaceholder,\n    renderStyle,\n    selection: propsSelection,\n    scrollSelectionIntoView,\n    spellCheck,\n    ...restProps\n  } = props\n\n  const portableTextEditor = usePortableTextEditor()\n  const ref = useRef<HTMLDivElement | null>(null)\n  const [editableElement, setEditableElement] = useState<HTMLDivElement | null>(\n    null,\n  )\n  const [hasInvalidValue, setHasInvalidValue] = useState(false)\n  const [rangeDecorationState, setRangeDecorationsState] = useState<\n    BaseRangeWithDecoration[]\n  >([])\n\n  // Forward ref to parent component\n  useImperativeHandle<HTMLDivElement | null, HTMLDivElement | null>(\n    forwardedRef,\n    () => ref.current,\n  )\n\n  const rangeDecorationsRef = useRef(rangeDecorations)\n\n  const editorActor = useContext(EditorActorContext)\n  const readOnly = useSelector(editorActor, (s) =>\n    s.matches({'edit mode': 'read only'}),\n  )\n  const schemaTypes = useSelector(editorActor, (s) => s.context.schema)\n  const slateEditor = useSlate()\n\n  const blockTypeName = schemaTypes.block.name\n\n  // Output a minimal React editor inside Editable when in readOnly mode.\n  // NOTE: make sure all the plugins used here can be safely run over again at any point.\n  // There will be a problem if they redefine editor methods and then calling the original method within themselves.\n  useMemo(() => {\n    // React/UI-specific plugins\n    const withInsertData = createWithInsertData(editorActor, schemaTypes)\n\n    if (readOnly) {\n      debug('Editable is in read only mode')\n      return withInsertData(slateEditor)\n    }\n    const withHotKeys = createWithHotkeys(\n      editorActor,\n      portableTextEditor,\n      hotkeys,\n    )\n\n    debug('Editable is in edit mode')\n    return withInsertData(withHotKeys(slateEditor))\n  }, [\n    editorActor,\n    hotkeys,\n    portableTextEditor,\n    readOnly,\n    schemaTypes,\n    slateEditor,\n  ])\n\n  const renderElement = useCallback(\n    (eProps: RenderElementProps) => (\n      <Element\n        {...eProps}\n        readOnly={readOnly}\n        renderBlock={renderBlock}\n        renderChild={renderChild}\n        renderListItem={renderListItem}\n        renderStyle={renderStyle}\n        schemaTypes={schemaTypes}\n        spellCheck={spellCheck}\n      />\n    ),\n    [\n      schemaTypes,\n      spellCheck,\n      readOnly,\n      renderBlock,\n      renderChild,\n      renderListItem,\n      renderStyle,\n    ],\n  )\n\n  const renderLeaf = useCallback(\n    (\n      lProps: RenderLeafProps & {\n        leaf: Text & {placeholder?: boolean; rangeDecoration?: RangeDecoration}\n      },\n    ) => {\n      if (lProps.leaf._type === 'span') {\n        let rendered = (\n          <Leaf\n            {...lProps}\n            editorActor={editorActor}\n            schemaTypes={schemaTypes}\n            renderAnnotation={renderAnnotation}\n            renderChild={renderChild}\n            renderDecorator={renderDecorator}\n            readOnly={readOnly}\n          />\n        )\n        if (\n          renderPlaceholder &&\n          lProps.leaf.placeholder &&\n          lProps.text.text === ''\n        ) {\n          return (\n            <>\n              <span style={PLACEHOLDER_STYLE} contentEditable={false}>\n                {renderPlaceholder()}\n              </span>\n              {rendered}\n            </>\n          )\n        }\n        const decoration = lProps.leaf.rangeDecoration\n        if (decoration) {\n          rendered = decoration.component({children: rendered})\n        }\n        return rendered\n      }\n      return lProps.children\n    },\n    [\n      editorActor,\n      readOnly,\n      renderAnnotation,\n      renderChild,\n      renderDecorator,\n      renderPlaceholder,\n      schemaTypes,\n    ],\n  )\n\n  const restoreSelectionFromProps = useCallback(() => {\n    if (propsSelection) {\n      debug(`Selection from props ${JSON.stringify(propsSelection)}`)\n      const normalizedSelection = normalizeSelection(\n        propsSelection,\n        fromSlateValue(slateEditor.children, blockTypeName),\n      )\n      if (normalizedSelection !== null) {\n        debug(\n          `Normalized selection from props ${JSON.stringify(normalizedSelection)}`,\n        )\n        const slateRange = toSlateRange(normalizedSelection, slateEditor)\n        if (slateRange) {\n          Transforms.select(slateEditor, slateRange)\n          // Output selection here in those cases where the editor selection was the same, and there are no set_selection operations made.\n          // The selection is usually automatically emitted to change$ by the withPortableTextSelections plugin whenever there is a set_selection operation applied.\n          if (!slateEditor.operations.some((o) => o.type === 'set_selection')) {\n            editorActor.send({\n              type: 'selection',\n              selection: normalizedSelection,\n            })\n          }\n          slateEditor.onChange()\n        }\n      }\n    }\n  }, [blockTypeName, editorActor, propsSelection, slateEditor])\n\n  const syncRangeDecorations = useCallback(\n    (operation?: Operation) => {\n      if (rangeDecorations && rangeDecorations.length > 0) {\n        const newSlateRanges: BaseRangeWithDecoration[] = []\n        rangeDecorations.forEach((rangeDecorationItem) => {\n          const slateRange = toSlateRange(\n            rangeDecorationItem.selection,\n            slateEditor,\n          )\n          if (!SlateRange.isRange(slateRange)) {\n            if (rangeDecorationItem.onMoved) {\n              rangeDecorationItem.onMoved({\n                newSelection: null,\n                rangeDecoration: rangeDecorationItem,\n                origin: 'local',\n              })\n            }\n            return\n          }\n          let newRange: BaseRange | null | undefined\n          if (operation) {\n            newRange = moveRangeByOperation(slateRange, operation)\n            if (\n              (newRange && newRange !== slateRange) ||\n              (newRange === null && slateRange)\n            ) {\n              const value = PortableTextEditor.getValue(portableTextEditor)\n              const newRangeSelection = toPortableTextRange(\n                value,\n                newRange,\n                schemaTypes,\n              )\n              if (rangeDecorationItem.onMoved) {\n                rangeDecorationItem.onMoved({\n                  newSelection: newRangeSelection,\n                  rangeDecoration: rangeDecorationItem,\n                  origin: 'local',\n                })\n              }\n            }\n          }\n          // If the newRange is null, it means that the range is not valid anymore and should be removed\n          // If it's undefined, it means that the slateRange is still valid and should be kept\n          if (newRange !== null) {\n            newSlateRanges.push({\n              ...(newRange || slateRange),\n              rangeDecoration: rangeDecorationItem,\n            })\n          }\n        })\n        if (newSlateRanges.length > 0) {\n          setRangeDecorationsState(newSlateRanges)\n          return\n        }\n      }\n      setRangeDecorationsState((rangeDecorationState) => {\n        // If there's state then we want to reset\n        if (rangeDecorationState.length > 0) {\n          return []\n        }\n        // Otherwise we no-op, React will skip a state update if what we return has reference equality to the previous state\n        return rangeDecorationState\n      })\n    },\n    [portableTextEditor, rangeDecorations, schemaTypes, slateEditor],\n  )\n\n  // Restore selection from props when the editor has been initialized properly with it's value\n  useEffect(() => {\n    const onReady = editorActor.on('ready', () => {\n      syncRangeDecorations()\n      restoreSelectionFromProps()\n    })\n    const onInvalidValue = editorActor.on('invalid value', () => {\n      setHasInvalidValue(true)\n    })\n    const onValueChanged = editorActor.on('value changed', () => {\n      setHasInvalidValue(false)\n    })\n\n    return () => {\n      onReady.unsubscribe()\n      onInvalidValue.unsubscribe()\n      onValueChanged.unsubscribe()\n    }\n  }, [editorActor, restoreSelectionFromProps, syncRangeDecorations])\n\n  // Restore selection from props when it changes\n  useEffect(() => {\n    if (propsSelection && !hasInvalidValue) {\n      restoreSelectionFromProps()\n    }\n  }, [hasInvalidValue, propsSelection, restoreSelectionFromProps])\n\n  const [syncedRangeDecorations, setSyncedRangeDecorations] = useState(false)\n  useEffect(() => {\n    if (!syncedRangeDecorations) {\n      // We only want this to run once, on mount\n      setSyncedRangeDecorations(true)\n      syncRangeDecorations()\n    }\n  }, [syncRangeDecorations, syncedRangeDecorations])\n\n  useEffect(() => {\n    if (!isEqual(rangeDecorations, rangeDecorationsRef.current)) {\n      syncRangeDecorations()\n    }\n    rangeDecorationsRef.current = rangeDecorations\n  }, [rangeDecorations, syncRangeDecorations])\n\n  // Sync range decorations after an operation is applied\n  useEffect(() => {\n    const teardown = withSyncRangeDecorations({\n      editorActor,\n      slateEditor,\n      syncRangeDecorations,\n    })\n    return () => teardown()\n  }, [editorActor, slateEditor, syncRangeDecorations])\n\n  // Handle from props onCopy function\n  const handleCopy = useCallback(\n    (event: ClipboardEvent<HTMLDivElement>): void | ReactEditor => {\n      if (onCopy) {\n        const result = onCopy(event)\n        // CopyFn may return something to avoid doing default stuff\n        if (result !== undefined) {\n          event.preventDefault()\n        }\n      } else if (event.nativeEvent.clipboardData) {\n        editorActor.send({\n          type: 'behavior event',\n          behaviorEvent: {\n            type: 'copy',\n            data: event.nativeEvent.clipboardData,\n          },\n          editor: slateEditor,\n          nativeEvent: event,\n        })\n      }\n    },\n    [onCopy, editorActor, slateEditor],\n  )\n\n  // Handle incoming pasting events in the editor\n  const handlePaste = useCallback(\n    (event: ClipboardEvent<HTMLDivElement>): Promise<void> | void => {\n      const value = PortableTextEditor.getValue(portableTextEditor)\n      const ptRange = toPortableTextRange(\n        value,\n        slateEditor.selection,\n        schemaTypes,\n      )\n      const path = ptRange?.focus.path || []\n      const onPasteResult = onPaste?.({event, value, path, schemaTypes})\n\n      if (onPasteResult || !slateEditor.selection) {\n        event.preventDefault()\n\n        // Resolve it as promise (can be either async promise or sync return value)\n        editorActor.send({type: 'loading'})\n\n        Promise.resolve(onPasteResult)\n          .then((result) => {\n            debug('Custom paste function from client resolved', result)\n\n            if (!result || !result.insert) {\n              debug('No result from custom paste handler, pasting normally')\n\n              slateEditor.insertData(event.clipboardData)\n            } else if (result.insert) {\n              slateEditor.insertFragment(\n                toSlateValue(result.insert as PortableTextBlock[], {\n                  schemaTypes,\n                }),\n              )\n            } else {\n              console.warn(\n                'Your onPaste function returned something unexpected:',\n                result,\n              )\n            }\n          })\n          .catch((error) => {\n            console.error(error)\n\n            return error\n          })\n          .finally(() => {\n            editorActor.send({type: 'done loading'})\n          })\n      } else if (event.nativeEvent.clipboardData) {\n        editorActor.send({\n          type: 'behavior event',\n          behaviorEvent: {\n            type: 'paste',\n            data: event.nativeEvent.clipboardData,\n          },\n          editor: slateEditor,\n          nativeEvent: event,\n        })\n      }\n\n      debug('No result from custom paste handler, pasting normally')\n    },\n    [editorActor, onPaste, portableTextEditor, schemaTypes, slateEditor],\n  )\n\n  const handleOnFocus: FocusEventHandler<HTMLDivElement> = useCallback(\n    (event) => {\n      if (onFocus) {\n        onFocus(event)\n      }\n      if (!event.isDefaultPrevented()) {\n        const selection = PortableTextEditor.getSelection(portableTextEditor)\n        // Create an editor selection if it does'nt exist\n        if (selection === null) {\n          Transforms.select(slateEditor, Editor.start(slateEditor, []))\n          slateEditor.onChange()\n        }\n        editorActor.send({type: 'focused', event})\n        const newSelection = PortableTextEditor.getSelection(portableTextEditor)\n        // If the selection is the same, emit it explicitly here as there is no actual onChange event triggered.\n        if (selection === newSelection) {\n          editorActor.send({\n            type: 'selection',\n            selection,\n          })\n        }\n      }\n    },\n    [editorActor, onFocus, portableTextEditor, slateEditor],\n  )\n\n  const handleClick = useCallback(\n    (event: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n      if (onClick) {\n        onClick(event)\n      }\n\n      const focusBlockPath = slateEditor.selection\n        ? slateEditor.selection.focus.path.slice(0, 1)\n        : undefined\n      const focusBlock = focusBlockPath\n        ? (Node.descendant(slateEditor, focusBlockPath) as\n            | SlateTextBlock\n            | VoidElement)\n        : undefined\n      const [_, lastNodePath] = Node.last(slateEditor, [])\n      const lastBlockPath = lastNodePath.slice(0, 1)\n      const lastNodeFocused = focusBlockPath\n        ? Path.equals(lastBlockPath, focusBlockPath)\n        : false\n      const lastBlockIsVoid = focusBlock\n        ? !slateEditor.isTextBlock(focusBlock)\n        : false\n      const collapsedSelection =\n        slateEditor.selection && SlateRange.isCollapsed(slateEditor.selection)\n\n      if (collapsedSelection && lastNodeFocused && lastBlockIsVoid) {\n        Transforms.insertNodes(\n          slateEditor,\n          slateEditor.pteCreateTextBlock({decorators: []}),\n        )\n        slateEditor.onChange()\n      }\n    },\n    [onClick, slateEditor],\n  )\n\n  const handleOnBlur: FocusEventHandler<HTMLDivElement> = useCallback(\n    (event) => {\n      if (onBlur) {\n        onBlur(event)\n      }\n      if (!event.isPropagationStopped()) {\n        editorActor.send({type: 'blurred', event})\n      }\n    },\n    [editorActor, onBlur],\n  )\n\n  const handleOnBeforeInput = useCallback(\n    (event: InputEvent) => {\n      if (onBeforeInput) {\n        onBeforeInput(event)\n      }\n    },\n    [onBeforeInput],\n  )\n\n  // This function will handle unexpected DOM changes inside the Editable rendering,\n  // and make sure that we can maintain a stable slateEditor.selection when that happens.\n  //\n  // For example, if this Editable is rendered inside something that might re-render\n  // this component (hidden contexts) while the user is still actively changing the\n  // contentEditable, this could interfere with the intermediate DOM selection,\n  // which again could be picked up by ReactEditor's event listeners.\n  // If that range is invalid at that point, the slate.editorSelection could be\n  // set either wrong, or invalid, to which slateEditor will throw exceptions\n  // that are impossible to recover properly from or result in a wrong selection.\n  //\n  // Also the other way around, when the ReactEditor will try to create a DOM Range\n  // from the current slateEditor.selection, it may throw unrecoverable errors\n  // if the current editor.selection is invalid according to the DOM.\n  // If this is the case, default to selecting the top of the document, if the\n  // user already had a selection.\n  const validateSelection = useCallback(() => {\n    if (!slateEditor.selection) {\n      return\n    }\n    const root = ReactEditor.findDocumentOrShadowRoot(slateEditor)\n    const {activeElement} = root\n    // Return if the editor isn't the active element\n    if (ref.current !== activeElement) {\n      return\n    }\n    const window = ReactEditor.getWindow(slateEditor)\n    const domSelection = window.getSelection()\n    if (!domSelection || domSelection.rangeCount === 0) {\n      return\n    }\n    const existingDOMRange = domSelection.getRangeAt(0)\n    try {\n      const newDOMRange = ReactEditor.toDOMRange(\n        slateEditor,\n        slateEditor.selection,\n      )\n      if (\n        newDOMRange.startOffset !== existingDOMRange.startOffset ||\n        newDOMRange.endOffset !== existingDOMRange.endOffset\n      ) {\n        debug('DOM range out of sync, validating selection')\n        // Remove all ranges temporary\n        domSelection?.removeAllRanges()\n        // Set the correct range\n        domSelection.addRange(newDOMRange)\n      }\n    } catch {\n      debug(`Could not resolve selection, selecting top document`)\n      // Deselect the editor\n      Transforms.deselect(slateEditor)\n      // Select top document if there is a top block to select\n      if (slateEditor.children.length > 0) {\n        Transforms.select(slateEditor, [0, 0])\n      }\n      slateEditor.onChange()\n    }\n  }, [ref, slateEditor])\n\n  // Observe mutations (child list and subtree) to this component's DOM,\n  // and make sure the editor selection is valid when that happens.\n  useEffect(() => {\n    if (editableElement) {\n      const mutationObserver = new MutationObserver(validateSelection)\n      mutationObserver.observe(editableElement, {\n        attributeOldValue: false,\n        attributes: false,\n        characterData: false,\n        childList: true,\n        subtree: true,\n      })\n      return () => {\n        mutationObserver.disconnect()\n      }\n    }\n    return undefined\n  }, [validateSelection, editableElement])\n\n  const handleKeyDown = useCallback(\n    (event: KeyboardEvent<HTMLDivElement>) => {\n      if (props.onKeyDown) {\n        props.onKeyDown(event)\n      }\n      if (!event.isDefaultPrevented()) {\n        slateEditor.pteWithHotKeys(event)\n      }\n      if (!event.isDefaultPrevented()) {\n        editorActor.send({\n          type: 'behavior event',\n          behaviorEvent: {\n            type: 'key.down',\n            keyboardEvent: {\n              key: event.key,\n              code: event.code,\n              altKey: event.altKey,\n              ctrlKey: event.ctrlKey,\n              metaKey: event.metaKey,\n              shiftKey: event.shiftKey,\n            },\n          },\n          editor: slateEditor,\n          nativeEvent: event,\n        })\n      }\n    },\n    [props, editorActor, slateEditor],\n  )\n\n  const handleKeyUp = useCallback(\n    (event: KeyboardEvent<HTMLDivElement>) => {\n      if (props.onKeyUp) {\n        props.onKeyUp(event)\n      }\n      if (!event.isDefaultPrevented()) {\n        editorActor.send({\n          type: 'behavior event',\n          behaviorEvent: {\n            type: 'key.up',\n            keyboardEvent: {\n              key: event.key,\n              code: event.code,\n              altKey: event.altKey,\n              ctrlKey: event.ctrlKey,\n              metaKey: event.metaKey,\n              shiftKey: event.shiftKey,\n            },\n          },\n          editor: slateEditor,\n          nativeEvent: event,\n        })\n      }\n    },\n    [props, editorActor, slateEditor],\n  )\n\n  const scrollSelectionIntoViewToSlate = useMemo(() => {\n    // Use slate-react default scroll into view\n    if (scrollSelectionIntoView === undefined) {\n      return undefined\n    }\n    // Disable scroll into view totally\n    if (scrollSelectionIntoView === null) {\n      return noop\n    }\n    // Translate PortableTextEditor prop fn to Slate plugin fn\n    return (_editor: ReactEditor, domRange: Range) => {\n      scrollSelectionIntoView(portableTextEditor, domRange)\n    }\n  }, [portableTextEditor, scrollSelectionIntoView])\n\n  const decorate: (entry: NodeEntry) => BaseRange[] = useCallback(\n    ([, path]) => {\n      if (isEqualToEmptyEditor(slateEditor.children, schemaTypes)) {\n        return [\n          {\n            anchor: {\n              path: [0, 0],\n              offset: 0,\n            },\n            focus: {\n              path: [0, 0],\n              offset: 0,\n            },\n            placeholder: true,\n          },\n        ]\n      }\n      // Editor node has a path length of 0 (should never be decorated)\n      if (path.length === 0) {\n        return []\n      }\n      const result = rangeDecorationState.filter((item) => {\n        // Special case in order to only return one decoration for collapsed ranges\n        if (SlateRange.isCollapsed(item)) {\n          // Collapsed ranges should only be decorated if they are on a block child level (length 2)\n          if (path.length !== 2) {\n            return false\n          }\n          return (\n            Path.equals(item.focus.path, path) &&\n            Path.equals(item.anchor.path, path)\n          )\n        }\n        // Include decorations that either include or intersects with this path\n        return (\n          SlateRange.intersection(item, {\n            anchor: {path, offset: 0},\n            focus: {path, offset: 0},\n          }) || SlateRange.includes(item, path)\n        )\n      })\n      if (result.length > 0) {\n        return result\n      }\n      return []\n    },\n    [slateEditor, schemaTypes, rangeDecorationState],\n  )\n\n  // Set the forwarded ref to be the Slate editable DOM element\n  // Also set the editable element in a state so that the MutationObserver\n  // is setup when this element is ready.\n  useEffect(() => {\n    ref.current = ReactEditor.toDOMNode(\n      slateEditor,\n      slateEditor,\n    ) as HTMLDivElement | null\n    setEditableElement(ref.current)\n  }, [slateEditor, ref])\n\n  if (!portableTextEditor) {\n    return null\n  }\n  return hasInvalidValue ? null : (\n    <SlateEditable\n      {...restProps}\n      autoFocus={false}\n      className={restProps.className || 'pt-editable'}\n      decorate={decorate}\n      onBlur={handleOnBlur}\n      onCopy={handleCopy}\n      onClick={handleClick}\n      onDOMBeforeInput={handleOnBeforeInput}\n      onFocus={handleOnFocus}\n      onKeyDown={handleKeyDown}\n      onKeyUp={handleKeyUp}\n      onPaste={handlePaste}\n      readOnly={readOnly}\n      // We have implemented our own placeholder logic with decorations.\n      // This 'renderPlaceholder' should not be used.\n      renderPlaceholder={undefined}\n      renderElement={renderElement}\n      renderLeaf={renderLeaf}\n      scrollSelectionIntoView={scrollSelectionIntoViewToSlate}\n    />\n  )\n})\n\nPortableTextEditable.displayName = 'ForwardRef(PortableTextEditable)'\n","import React, {useMemo} from 'react'\nimport {Slate} from 'slate-react'\nimport {Synchronizer} from './components/Synchronizer'\nimport {useCreateEditor, type Editor, type EditorConfig} from './create-editor'\nimport {EditorActorContext} from './editor-actor-context'\nimport {PortableTextEditorContext} from './hooks/usePortableTextEditor'\nimport {PortableTextEditorSelectionProvider} from './hooks/usePortableTextEditorSelection'\nimport {\n  PortableTextEditor,\n  RouteEventsToChanges,\n  type PortableTextEditorProps,\n} from './PortableTextEditor'\n\nconst EditorContext = React.createContext<Editor | undefined>(undefined)\n\n/**\n * @public\n */\nexport type EditorProviderProps = {\n  initialConfig: EditorConfig\n  children?: React.ReactNode\n}\n\n/**\n * @public\n */\nexport function EditorProvider(props: EditorProviderProps) {\n  const editor = useCreateEditor(props.initialConfig)\n  const editorActor = editor._internal.editorActor\n  const slateEditor = editor._internal.slateEditor\n  const portableTextEditor = useMemo(\n    () =>\n      new PortableTextEditor({\n        editor,\n      } as unknown as PortableTextEditorProps),\n    [editor],\n  )\n\n  return (\n    <EditorContext.Provider value={editor}>\n      <RouteEventsToChanges\n        editorActor={editorActor}\n        onChange={(change) => {\n          portableTextEditor.change$.next(change)\n        }}\n      />\n      <Synchronizer\n        editorActor={editorActor}\n        slateEditor={slateEditor.instance}\n      />\n      <EditorActorContext.Provider value={editorActor}>\n        <Slate\n          editor={slateEditor.instance}\n          initialValue={slateEditor.initialValue}\n        >\n          <PortableTextEditorContext.Provider value={portableTextEditor}>\n            <PortableTextEditorSelectionProvider editorActor={editorActor}>\n              {props.children}\n            </PortableTextEditorSelectionProvider>\n          </PortableTextEditorContext.Provider>\n        </Slate>\n      </EditorActorContext.Provider>\n    </EditorContext.Provider>\n  )\n}\n\n/**\n * @public\n */\nexport function useEditor() {\n  const editor = React.useContext(EditorContext)\n\n  if (!editor) {\n    throw new Error('No Editor set. Use EditorProvider to set one.')\n  }\n\n  return editor\n}\n","import {useEffect} from 'react'\nimport {useEffectEvent} from 'use-effect-event'\nimport type {EditorEmittedEvent} from './editor-machine'\nimport {useEditor} from './editor-provider'\n\n/**\n * @public\n */\nexport function EditorEventListener(props: {\n  on: (event: EditorEmittedEvent) => void\n}) {\n  const editor = useEditor()\n  const on = useEffectEvent(props.on)\n\n  useEffect(() => {\n    const subscription = editor.on('*', on)\n\n    return () => {\n      subscription.unsubscribe()\n    }\n  }, [editor, on])\n\n  return null\n}\n"],"names":["createEditorSchema","portableTextType","Error","blockType","of","find","findBlockType","childrenField","fields","field","name","ofType","type","spanType","memberType","inlineObjectTypes","filter","blockObjectTypes","styles","resolveEnabledStyles","decorators","resolveEnabledDecorators","lists","resolveEnabledListItems","block","span","portableText","inlineObjects","blockObjects","annotations","styleField","btField","textStyles","options","list","style","value","length","listField","listItems","defineSchema","definition","compileSchemaDefinition","map","blockObject","defineType","title","inlineObject","portableTextSchema","defineField","marks","decorator","startCase","annotation","schema","SanitySchema","compile","types","get","pteSchema","rootName","debug","debugWithName","namespace","enabled","createKeyedPath","point","blockPath","path","keyedBlockPath","_key","_type","keyedChildPath","childPath","slice","child","Array","isArray","children","toSlatePath","editor","from","Editor","nodes","at","match","n","isKeySegment","undefined","Element","isElement","isVoid","childIndex","findIndex","isEqual","concat","toPortableTextRange","range","anchor","focus","anchorPath","offset","focusPath","backward","Boolean","Range","isRange","isBackward","toSlateRange","selection","moveRangeByOperation","operation","Point","transform","equals","normalizePoint","newPath","newOffset","blockKey","childKey","blk","push","cld","text","normalizeSelection","newAnchor","newFocus","EMPTY_MARKDEFS","VOID_CHILD_KEY","keepObjectEquality","object","keyMap","toSlateValue","schemaTypes","rest","voidChildren","textBlock","hasInlines","hasMissingStyle","hasMissingMarkDefs","markDefs","hasMissingChildren","cType","cKey","cRest","__inline","fromSlateValue","textBlockType","_cType","v","k","t","_i","_c","blockValue","isEqualToEmptyEditor","Text","isText","join","IS_PROCESSING_REMOTE_CHANGES","WeakMap","IS_DRAGGING","IS_DRAGGING_BLOCK_ELEMENT","IS_DRAGGING_ELEMENT_TARGET","IS_DRAGGING_BLOCK_TARGET_POSITION","KEY_TO_SLATE_ELEMENT","KEY_TO_VALUE_ELEMENT","SLATE_TO_PORTABLE_TEXT_RANGE","DefaultObject","props","$","t0","JSON","stringify","t1","jsx","displayName","DefaultBlockObject","styled","div","selected","DefaultListItem","getLeftPositionForListLevel","listLevel","getContentForListLevelAndStyle","listStyle","getCounterIncrementForListLevel","getCounterResetForListLevel","getCounterContentForListLevel","DefaultListItemInner","level","Number","bullets","normalizedLevel","DraggableBlock","element","readOnly","blockRef","useSlateStatic","dragGhostRef","useRef","isDragOver","setIsDragOver","useState","t2","t3","t4","isInline","blockElement","setBlockElement","t5","t6","current","ReactEditor","toDOMNode","useEffect","t7","event","isMyDragOver","preventDefault","dataTransfer","dropEffect","set","elementRect","getBoundingClientRect","top","height","Y","pageY","loc","Math","abs","handleDragOver","t8","Symbol","for","handleDragLeave","t9","event_0","targetBlock","stopPropagation","delete","document","body","removeChild","dragPosition","targetPath","findPath","myPath","isBefore","Path","originalPath","originalPath_0","Transforms","moveNodes","to","onChange","handleDragEnd","t10","event_1","handleDrop","t11","event_2","target","HTMLElement","opacity","handleDrag","t12","event_3","setData","effectAllowed","dragGhost","cloneNode","customGhost","querySelector","setAttribute","position","left","boxSizing","appendChild","rect","x","clientX","y","clientY","width","setDragImage","handleDragStart","t13","isDraggingOverFirstBlock","t14","isDraggingOverLastBlock","dragPosition_0","isDraggingOverTop","isDraggingOverBottom","t15","t16","borderBottom","zIndex","dropIndicator","t17","Fragment","t18","t19","jsxs","EMPTY_ANNOTATIONS","inlineBlockStyle","display","attributes","renderBlock","renderChild","renderListItem","renderStyle","spellCheck","useSelected","inlineBlockObjectRef","focused","isCollapsed","useMemo","renderedBlock","className","node","depth","schemaType","SlateElement","elmPath","debugRenders","ObjectNode","editorElementRef","isListItem","blockStyleType","item","listItem","isListBlock","listType","renderProps","Object","defineProperty","enumerable","warn","propsOrDefaultRendered","renderedBlockFromProps","_props","PortableTextEditorContext","createContext","usePortableTextEditor","useContext","DefaultAnnotation","alert","handleClick","color","compileType","rawType","Schema","FLUSH_PATCHES_THROTTLED_MS","process","env","NODE_ENV","mutationMachine","setup","context","events","input","emitted","actions","emit","patches","pendingPatches","snapshot","slateEditor","assign","patch","guards","slate is normalizing","isNormalizing","createMachine","id","initial","states","on","after","guard","reenter","validateValue","keyGenerator","resolution","valid","validChildTypes","validBlockTypes","unset","description","action","i18n","some","index","isPlainObject","String","values","includes","currentBlockTypeName","key","expectedTypeName","isPortableTextTextBlock","typeName","newSpan","autoResolve","setIfMissing","insert","allUsedMarks","uniq","flatten","unusedMarkDefs","def","markDefKey","m","toString","orphanedMarks","mark","dec","spanChildren","orphaned","cMrk","cIndex","newChild","childType","withRemoteChanges","fn","prev","isChangingRemotely","PATCHING","withoutPatching","isPatching","cloneDiff","diff2","IS_UDOING","IS_REDOING","withUndoing","isUndoing","setIsUndoing","withRedoing","isRedoing","setIsRedoing","debugVerbose","SAVING","REMOTE_PATCHES","UNDO_STEP_LIMIT","isSaving","state","getRemotePatches","createWithUndoRedo","editorActor","blockSchemaType","previousSnapshot","remotePatches","subscriptions","sub","reset","forEach","origin","history","undos","redos","splice","time","Date","unsubscribe","apply","op","getSnapshot","matches","operations","step","lastOp","overwrite","shouldOverwrite","save","merge","shouldMerge","newStep","createSelectOperation","timestamp","shift","shouldClear","undo","otherPatches","transformedOperations","transformOperation","reversedOperations","Operation","inverse","reverse","withoutNormalizing","withoutSaving","normalize","err","deselect","pop","redo","transformedOperation","insertBlockIndex","items","adjustBlockPath","unsetBlockIndex","operationTargetBlock","findOperationTargetBlock","parsePatch","diffPatch","adjustOffsetBy","changedOffset","utf8Start1","diffs","diff","diffType","DIFF_INSERT","DIFF_DELETE","DIFF_EQUAL","every","dType","currentFocus","properties","currentAnchor","newProperties","blockIndex","syncValueCallback","sendBack","streamBlocks","syncValueLogic","fromCallback","syncMachine","initialValueSynced","assertEvent","pendingValue","previousValue","initial value synced","is busy","isProcessingLocalChanges","value changed while syncing","pending value equals previous value","actors","always","entry","idle","busy","syncing","invoke","src","updateValue","isChanged","isValid","hadSelection","childrenLength","_","removeNodes","insertNodes","pteCreateTextBlock","select","slateValueFromProps","Promise","resolve","i","currentBlock","currentBlockIndex","getBlocks","slateValue","blockChanged","blockValid","syncBlock","error","setTimeout","oldBlock","hasChanges","validationValue","validation","console","_updateBlock","_replaceBlock","currentSelection","selectionFocusOnBlock","setNodes","isTextBlock","oldBlockChildrenLength","currentBlockChild","currentBlockChildIndex","oldBlockChild","isChildChanged","isTextChanged","isSpanNode","insertText","voids","Synchronizer","useSelector","_temp","_temp2","syncActorRef","useActorRef","mutationActorRef","subscription","send","subscription_0","s_0","s","createOperationToPatches","textBlockName","insertTextPatch","beforeValue","textChild","isTextSpan","prevBlock","prevChild","prevText","diffMatchPatch","removeTextPatch","beforeBlock","prevTextChild","setNodePatch","setNode","omitBy","isUndefined","keys","keyName","val","indexOf","insertNodePatch","targetKey","splitNodePatch","splitBlock","targetValue","splitSpan","targetSpans","removeNodePatch","spanToRemove","mergeNodePatch","updatedBlock","newBlock","updatedSpan","removedSpan","moveNodePatch","targetChild","childToInsert","createWithEventListeners","maxBlocks","behaviorEvent","placement","addMark","removeMark","deleteBackward","unit","deleteForward","insertBreak","insertSoftBreak","createWithMaxBlocks","rows","createWithObjectKeys","normalizeNode","isEditor","Node","createApplyPatch","changed","insertPatch","unsetPatch","setPatch","findBlockAndChildFromPath","newValue","diffMatchPatchApplyPatches","allowExceedingIndices","cleanupEfficiency","makeDiff","debugState","targetBlockPath","targetChildPath","blocksToInsert","targetBlockIndex","normalizedIdx","childrenToInsert","targetChildIndex","childInsertPath","newText","nextRest","prevChildren","prevRest","c","newVal","applyAll","previousSelection","_child","isKeyedSegment","segment","stateName","findBlockFromPath","isMatch","createWithPatches","patchFunctions","previousChildren","applyPatch","bufferedPatches","handleBufferedRemotePatches","handlePatches","p","editorWasEmpty","editorIsEmpty","createWithPlaceholderBlock","nextPath","next","insertNode","createWithPortableTextBlockStyle","defaultStyle","nodeEntry","SlateText","isPortableTextSpan","isPortableTextBlock","getPreviousSpan","spanPath","previousSpan","getNextSpan","nextSpan","isAfter","createWithPortableTextMarkModel","nextNode","mergeNodes","parent","orphanedAnnotations","markDefKeys","Set","newMarkDefs","markDef","has","add","previousSelectionIsCollapsed","newSelectionIsCollapsed","focusSpan","mode","newFocusSpan","movedToNextSpan","movedToPreviousSpan","_block","previousSpanAnnotations","nextSpanAnnotations","annotationsEnding","atTheEndOfAnnotation","annotationsStarting","atTheStartOfAnnotation","nextSpanDecorators","collapsedSelection","marksWithoutAnnotations","spanHasAnnotations","spanIsEmpty","atTheBeginningOfSpan","atTheEndOfSpan","spanAnnotations","previousSpanHasAnnotations","previousSpanHasSameAnnotations","previousSpanHasSameAnnotation","previousSpanHasSameMarks","nextSpanSharesSomeAnnotations","isExpanded","deletingFromTheEnd","deletingAllText","nextSpanHasSameAnnotation","marksWithoutAnnotationMarks","oldDefs","addDecoratorActionImplementation","split","hanging","splitTextNodes","eMark","lonelyEmptySpan","existingMarks","existingMarksWithoutDecorator","existingMark","removeDecoratorActionImplementation","isDecoratorActive","selectedTextNodes","toggleDecoratorActionImplementation","createWithPortableTextSelections","prevSelection","emitPortableTextSelection","ptRange","existing","createWithSchemaTypes","isPortableTextListBlock","obj","createWithUtils","pteExpandToWord","textNode","focusOffset","charsBefore","charsAfter","isEmpty","str","whiteSpaceBeforeIndex","newStartOffset","whiteSpaceAfterIndex","newEndOffset","isNaN","setSelection","withPlugins","e","operationToPatches","withObjectKeys","withSchemaTypes","withPatches","withMaxBlocks","withUndoRedo","withPortableTextMarkModel","withPortableTextBlockStyle","withPlaceholderBlock","withUtils","withPortableTextSelections","slateEditors","createSlateEditor","config","existingSlateEditor","unsubscriptions","instance","withReact","createEditor","initialValue","toggleListItemActionImplementation","isListItemActive","removeListItemActionImplementation","addListItemActionImplementation","createGuards","selectedBlocks","unsetNodes","toggleStyleActionImplementation","isStyleActive","removeStyleActionImplementation","addStyleActionImplementation","createEditableAPI","blur","toggleMark","toggleList","toggleBlockStyle","isMarkActive","slateSelection","focusBlock","descendant","focusChild","insertChild","focusChildPath","focusNode","move","distance","insertBlock","hasBlockStyle","hasListStyle","findByPath","slatePath","ptBlock","ptChild","findDOMNode","activeAnnotations","spans","isAnnotationActive","annotationType","addAnnotation","paths","addAnnotationActionImplementation","removeAnnotation","getSelection","getValue","isCollapsedSelection","isExpandedSelection","getFragment","isSelectionsOverlapping","selectionA","selectionB","rangeA","rangeB","selectionMarkDefs","reduce","accMarkDefs","markKey","originalSelection","markDefPath","markDefPaths","annotationKey","unshift","existingSameTypeAnnotations","removeAnnotationActionImplementation","potentialAnnotations","selectedChild","selectedChildPath","annotationToRemove","previousSpansWithSameAnnotation","SlatePath","nextSpansWithSameAnnotation","blocks","marksWithoutAnnotation","toggleAnnotationActionImplementation","focusBlockPath","lastBlock","insertBlockObjectActionImplementation","insertBreakActionImplementation","focusDecorators","focusAnnotations","anchorBlockPath","start","end","edges","lastFocusBlockChild","atTheEndOfBlock","atTheStartOfBlock","nextBlockPath","selectionAcrossBlocks","splitNodes","nextNodePath","newMarkDefKeys","Map","prevNodeSpans","prevNodeSpan","newMarks","insertSoftBreakActionImplementation","insertInlineObjectActionImplementation","focusTextBlock","insertSpanActionImplementation","textBlockSetActionImplementation","textBlockUnsetActionImplementation","behaviorActionImplementations","delete.backward","delete.forward","delete.block","delete.text","blockOffsetToSpanSelectionPoint","blockOffset","insert.text","insert.text block","effect","move.block","move.block down","move.block up","hasPrevious","previous","noop","newSelection","select.previous block","previousBlockPath","select.next block","reselect","performAction","performDefaultAction","getActiveDecorators","slateEditorInstance","editorMachine","behaviors","pendingEvents","enqueueActions","enqueue","defaultAction","eventBehaviors","behavior","editorContext","activeDecorators","behaviorOverwritten","eventBehavior","shouldRun","actionIntendSets","actionSet","actionIntends","actionIntend","raise","nativeEvent","coreBehaviors","initialReadOnly","exit","normalizing","mutation","editorActorSnapshot","defaultCompare","a","b","useEditorSelector","selector","compare","_internal","getEditorSnapshot","defaultKeyGenerator","randomKey","getByteHexTable","table","whatwgRNG","rnds8","Uint8Array","getRandomValues","createActor","editorConfigToMachineInput","createEditorFromActor","useCreateEditor","schemaDefinition","hasOwnProperty","editable","listener","EditorActorContext","PortableTextEditorSelectionContext","usePortableTextEditorSelection","PortableTextEditorSelectionProvider","startTransition","PortableTextEditor","Component","change$","Subject","constructor","parseInt","componentDidUpdate","prevProps","editorRef","setEditable","render","legacyPatches","incomingPatches$","patches$","change","Slate","blockStyle","isObjectPath","_editor","isChildObjectEditPath","RoutePatchesObservableToEditorActor","subscribe","payload","RouteEventsToChanges","handleChange","useEffectEvent","bb5","isLoading","EMPTY_MARKS","Leaf","leaf","renderDecorator","renderAnnotation","spanRef","portableTextEditor","blockSelected","setFocused","setSelected","decoratorValues","annotationMarks","shouldTrackSelectionAndFocus","sel","setSelectedFromRange","useCallback","winSelection","window","rangeCount","getRangeAt","intersectsNode","onBlur","onFocus","onSelection","content","returnedChildren","DEFAULT_HOTKEYS","custom","createWithHotkeys","hotkeysFromOptions","reservedHotkeys","activeHotkeys","pteWithHotKeys","cat","hotkey","isHotkey","possibleMark","possibleCommand","command","createWithInsertData","blockTypeName","spanTypeName","whitespaceOnPasteMode","unstable_whitespaceOnPasteMode","toPlainText","setFragmentData","data","originEvent","startVoid","void","endVoid","domRange","toDOMRange","contents","cloneContents","voidNode","r","cloneRange","domNode","setEndAfter","querySelectorAll","zw","isNewline","getAttribute","textContent","elm","removeAttribute","hasAttribute","ownerDocument","createElement","asHTML","innerHTML","fragment","asJSON","asPlainText","clearData","insertPortableTextData","pText","getData","parsed","parse","_regenerateKeys","errorDescription","insertTextOrHTMLData","html","insertedType","htmlToBlocks","normalizeBlock","textToHtml","escapeHtml","line","replace","_insertFragment","insertData","insertFragmentData","insertFragment","entityMap","editorTypes","newNode","NewNodeNoDefs","allowedAnnotations","oldKey","newKey","nodeWithNewKeys","withSyncRangeDecorations","syncRangeDecorations","originalApply","PLACEHOLDER_STYLE","userSelect","pointerEvents","right","PortableTextEditable","forwardRef","forwardedRef","hotkeys","onBeforeInput","onPaste","onCopy","onClick","rangeDecorations","renderPlaceholder","propsSelection","scrollSelectionIntoView","restProps","ref","editableElement","setEditableElement","hasInvalidValue","setHasInvalidValue","rangeDecorationState","setRangeDecorationsState","rangeDecorationsRef","useSlate","withInsertData","withHotKeys","renderElement","eProps","renderLeaf","lProps","rendered","placeholder","decoration","rangeDecoration","component","restoreSelectionFromProps","normalizedSelection","slateRange","o","newSlateRanges","rangeDecorationItem","SlateRange","onMoved","newRange","newRangeSelection","onReady","onInvalidValue","onValueChanged","syncedRangeDecorations","setSyncedRangeDecorations","teardown","handleCopy","clipboardData","handlePaste","onPasteResult","then","result","catch","finally","handleOnFocus","isDefaultPrevented","lastNodePath","last","lastBlockPath","lastNodeFocused","lastBlockIsVoid","handleOnBlur","isPropagationStopped","handleOnBeforeInput","validateSelection","root","findDocumentOrShadowRoot","activeElement","domSelection","getWindow","existingDOMRange","newDOMRange","startOffset","endOffset","removeAllRanges","addRange","mutationObserver","MutationObserver","observe","attributeOldValue","characterData","childList","subtree","disconnect","handleKeyDown","onKeyDown","keyboardEvent","code","altKey","ctrlKey","metaKey","shiftKey","handleKeyUp","onKeyUp","scrollSelectionIntoViewToSlate","decorate","intersection","SlateEditable","EditorContext","React","EditorProvider","initialConfig","useEditor","EditorEventListener"],"mappings":"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","x_google_ignoreList":[19,32]}