import { getSelectedBlocks, createGuards, isSelectionCollapsed } from "../_chunks-es/selector.is-selection-collapsed.js";
import { getFirstBlock, getFocusBlock, getFocusBlockObject, getFocusChild, getFocusListBlock, getFocusSpan, getFocusTextBlock, getLastBlock, getNextBlock, getPreviousBlock, getSelectionEndBlock, getSelectionStartBlock } from "../_chunks-es/selector.is-selection-collapsed.js";
import { isKeySegment, isPortableTextTextBlock, isPortableTextSpan } from "@sanity/types";
import { getBlockTextBefore, getSelectionText } from "../_chunks-es/selector.get-text-before.js";
const getActiveListItem = ({
  context
}) => {
  if (!context.selection)
    return;
  const guards = createGuards(context), selectedTextBlocks = getSelectedBlocks({
    context
  }).map((block) => block.node).filter(guards.isTextBlock), firstTextBlock = selectedTextBlocks.at(0);
  if (!firstTextBlock)
    return;
  const firstListItem = firstTextBlock.listItem;
  if (firstListItem && selectedTextBlocks.every((block) => block.listItem === firstListItem))
    return firstListItem;
}, getActiveStyle = ({
  context
}) => {
  if (!context.selection)
    return;
  const guards = createGuards(context), selectedTextBlocks = getSelectedBlocks({
    context
  }).map((block) => block.node).filter(guards.isTextBlock), firstTextBlock = selectedTextBlocks.at(0);
  if (!firstTextBlock)
    return;
  const firstStyle = firstTextBlock.style;
  if (firstStyle && selectedTextBlocks.every((block) => block.style === firstStyle))
    return firstStyle;
}, getSelectedSpans = ({
  context
}) => {
  if (!context.selection)
    return [];
  const selectedSpans = [], startPoint = context.selection.backward ? context.selection.focus : context.selection.anchor, endPoint = context.selection.backward ? context.selection.anchor : context.selection.focus, startBlockKey = isKeySegment(startPoint.path[0]) ? startPoint.path[0]._key : void 0, endBlockKey = isKeySegment(endPoint.path[0]) ? endPoint.path[0]._key : void 0;
  if (!startBlockKey || !endBlockKey)
    return selectedSpans;
  const startSpanKey = isKeySegment(startPoint.path[2]) ? startPoint.path[2]._key : void 0, endSpanKey = isKeySegment(endPoint.path[2]) ? endPoint.path[2]._key : void 0;
  for (const block of context.value)
    if (isPortableTextTextBlock(block)) {
      if (block._key === startBlockKey) {
        for (const child of block.children)
          if (isPortableTextSpan(child)) {
            if (startSpanKey && child._key === startSpanKey && (selectedSpans.push({
              node: child,
              path: [{
                _key: block._key
              }, "children", {
                _key: child._key
              }]
            }), startBlockKey === endBlockKey))
              break;
            if (endSpanKey && child._key === endSpanKey) {
              selectedSpans.push({
                node: child,
                path: [{
                  _key: block._key
                }, "children", {
                  _key: child._key
                }]
              });
              break;
            }
            selectedSpans.length > 0 && selectedSpans.push({
              node: child,
              path: [{
                _key: block._key
              }, "children", {
                _key: child._key
              }]
            });
          }
        if (startBlockKey === endBlockKey)
          break;
        continue;
      }
      if (block._key === endBlockKey) {
        for (const child of block.children)
          if (isPortableTextSpan(child)) {
            if (endSpanKey && child._key === endSpanKey) {
              selectedSpans.push({
                node: child,
                path: [{
                  _key: block._key
                }, "children", {
                  _key: child._key
                }]
              });
              break;
            }
            selectedSpans.push({
              node: child,
              path: [{
                _key: block._key
              }, "children", {
                _key: child._key
              }]
            });
          }
        break;
      }
      if (selectedSpans.length > 0)
        for (const child of block.children)
          isPortableTextSpan(child) && selectedSpans.push({
            node: child,
            path: [{
              _key: block._key
            }, "children", {
              _key: child._key
            }]
          });
    }
  return selectedSpans;
};
function isActiveAnnotation(annotation) {
  return (snapshot) => {
    if (!snapshot.context.selection)
      return !1;
    const selectedBlocks = getSelectedBlocks(snapshot), selectedSpans = getSelectedSpans(snapshot);
    if (selectedSpans.length === 0 || selectedSpans.some((span) => !span.node.marks || span.node.marks?.length === 0))
      return !1;
    const selectionMarkDefs = selectedBlocks.flatMap((block) => isPortableTextTextBlock(block.node) ? block.node.markDefs ?? [] : []);
    return selectedSpans.every((span) => (span.node.marks?.flatMap((mark) => {
      const markDef = selectionMarkDefs.find((markDef2) => markDef2._key === mark);
      return markDef ? [markDef._type] : [];
    }) ?? []).includes(annotation));
  };
}
const isSelectionExpanded = ({
  context
}) => !isSelectionCollapsed({
  context
});
function isActiveDecorator(decorator) {
  return (snapshot) => {
    if (isSelectionExpanded(snapshot)) {
      const selectedSpans = getSelectedSpans(snapshot);
      return selectedSpans.length > 0 && selectedSpans.every((span) => span.node.marks?.includes(decorator));
    }
    return snapshot.context.activeDecorators.includes(decorator);
  };
}
function isActiveListItem(listItem) {
  return (snapshot) => getActiveListItem(snapshot) === listItem;
}
function isActiveStyle(style) {
  return (snapshot) => getActiveStyle(snapshot) === style;
}
export {
  getActiveListItem,
  getActiveStyle,
  getBlockTextBefore,
  getFirstBlock,
  getFocusBlock,
  getFocusBlockObject,
  getFocusChild,
  getFocusListBlock,
  getFocusSpan,
  getFocusTextBlock,
  getLastBlock,
  getNextBlock,
  getPreviousBlock,
  getSelectedBlocks,
  getSelectedSpans,
  getSelectionEndBlock,
  getSelectionStartBlock,
  getSelectionText,
  isActiveAnnotation,
  isActiveDecorator,
  isActiveListItem,
  isActiveStyle,
  isSelectionCollapsed,
  isSelectionExpanded
};
//# sourceMappingURL=index.js.map
