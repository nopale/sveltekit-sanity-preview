{"version":3,"file":"selector.get-text-before.js","sources":["../../src/editor/utils/utils.is-keyed-segment.ts","../../src/editor/utils/utils.reverse-selection.ts","../../src/selectors/selector.get-selection-text.ts","../../src/editor/utils/utils.get-start-point.ts","../../src/selectors/selector.get-text-before.ts"],"sourcesContent":["import type {KeyedSegment, PathSegment} from '@sanity/types'\n\nexport function isKeyedSegment(segment: PathSegment): segment is KeyedSegment {\n  return typeof segment === 'object' && segment !== null && '_key' in segment\n}\n","import type {EditorSelection} from '../../types/editor'\n\nexport function reverseSelection(\n  selection: NonNullable<EditorSelection>,\n): NonNullable<EditorSelection> {\n  if (selection.backward) {\n    return {\n      anchor: selection.focus,\n      focus: selection.anchor,\n      backward: false,\n    }\n  }\n\n  return {\n    anchor: selection.focus,\n    focus: selection.anchor,\n    backward: true,\n  }\n}\n","import {isPortableTextSpan, isPortableTextTextBlock} from '@sanity/types'\nimport type {EditorSelector} from '../editor/editor-selector'\nimport {isKeyedSegment} from '../editor/utils/utils.is-keyed-segment'\nimport {reverseSelection} from '../editor/utils/utils.reverse-selection'\n\n/**\n * @public\n */\nexport const getSelectionText: EditorSelector<string> = ({context}) => {\n  let text = ''\n\n  const {value, selection} = context\n\n  if (!value || !selection) {\n    return text\n  }\n\n  const forwardSelection = selection.backward\n    ? reverseSelection(selection)\n    : selection\n\n  if (!forwardSelection) {\n    return text\n  }\n\n  for (const block of value) {\n    if (\n      isKeyedSegment(forwardSelection.anchor.path[0]) &&\n      block._key !== forwardSelection.anchor.path[0]._key\n    ) {\n      continue\n    }\n\n    if (!isPortableTextTextBlock(block)) {\n      continue\n    }\n\n    for (const child of block.children) {\n      if (isPortableTextSpan(child)) {\n        if (\n          isKeyedSegment(forwardSelection.anchor.path[2]) &&\n          child._key === forwardSelection.anchor.path[2]._key &&\n          isKeyedSegment(forwardSelection.focus.path[2]) &&\n          child._key === forwardSelection.focus.path[2]._key\n        ) {\n          text =\n            text +\n            child.text.slice(\n              forwardSelection.anchor.offset,\n              forwardSelection.focus.offset,\n            )\n\n          break\n        }\n\n        if (\n          isKeyedSegment(forwardSelection.anchor.path[2]) &&\n          child._key === forwardSelection.anchor.path[2]._key\n        ) {\n          text = text + child.text.slice(forwardSelection.anchor.offset)\n          continue\n        }\n\n        if (\n          isKeyedSegment(forwardSelection.focus.path[2]) &&\n          child._key === forwardSelection.focus.path[2]._key\n        ) {\n          text = text + child.text.slice(0, forwardSelection.focus.offset)\n          break\n        }\n\n        if (text.length > 0) {\n          text + child.text\n        }\n      }\n    }\n\n    if (\n      isKeyedSegment(forwardSelection.focus.path[0]) &&\n      block._key === forwardSelection.focus.path[0]._key\n    ) {\n      break\n    }\n  }\n\n  return text\n}\n","import {\n  isPortableTextTextBlock,\n  type KeyedSegment,\n  type PortableTextBlock,\n} from '@sanity/types'\nimport type {EditorSelectionPoint} from '../../types/editor'\n\nexport function getStartPoint({\n  node,\n  path,\n}: {\n  node: PortableTextBlock\n  path: [KeyedSegment]\n}): EditorSelectionPoint {\n  if (isPortableTextTextBlock(node)) {\n    return {\n      path: [...path, 'children', {_key: node.children[0]._key}],\n      offset: 0,\n    }\n  }\n\n  return {\n    path,\n    offset: 0,\n  }\n}\n","import type {EditorSelector} from '../editor/editor-selector'\nimport {getStartPoint} from '../editor/utils/utils.get-start-point'\nimport {isKeyedSegment} from '../editor/utils/utils.is-keyed-segment'\nimport {reverseSelection} from '../editor/utils/utils.reverse-selection'\nimport {getSelectionText} from './selector.get-selection-text'\n\n/**\n * @public\n */\nexport const getBlockTextBefore: EditorSelector<string> = ({context}) => {\n  if (!context.selection) {\n    return ''\n  }\n\n  const selection = context.selection.backward\n    ? reverseSelection(context.selection)\n    : context.selection\n  const point = selection.anchor\n  const key = isKeyedSegment(point.path[0]) ? point.path[0]._key : undefined\n\n  const block = key\n    ? context.value.find((block) => block._key === key)\n    : undefined\n\n  if (!block) {\n    return ''\n  }\n\n  const startOfBlock = getStartPoint({node: block, path: [{_key: block._key}]})\n\n  return getSelectionText({\n    context: {\n      ...context,\n      value: context.value,\n      selection: {\n        anchor: startOfBlock,\n        focus: point,\n      },\n    },\n  })\n}\n"],"names":["isKeyedSegment","segment","reverseSelection","selection","backward","anchor","focus","getSelectionText","context","text","value","forwardSelection","block","path","_key","isPortableTextTextBlock","child","children","isPortableTextSpan","slice","offset","getStartPoint","node","getBlockTextBefore","point","key","undefined","find","startOfBlock"],"mappings":";AAEO,SAASA,eAAeC,SAA+C;AAC5E,SAAO,OAAOA,WAAY,YAAYA,YAAY,QAAQ,UAAUA;AACtE;ACFO,SAASC,iBACdC,WAC8B;AAC9B,SAAIA,UAAUC,WACL;AAAA,IACLC,QAAQF,UAAUG;AAAAA,IAClBA,OAAOH,UAAUE;AAAAA,IACjBD,UAAU;AAAA,EAAA,IAIP;AAAA,IACLC,QAAQF,UAAUG;AAAAA,IAClBA,OAAOH,UAAUE;AAAAA,IACjBD,UAAU;AAAA,EACZ;AACF;ACVO,MAAMG,mBAA2CA,CAAC;AAAA,EAACC;AAAO,MAAM;AACrE,MAAIC,OAAO;AAEL,QAAA;AAAA,IAACC;AAAAA,IAAOP;AAAAA,EAAAA,IAAaK;AAEvB,MAAA,CAACE,SAAS,CAACP;AACNM,WAAAA;AAGT,QAAME,mBAAmBR,UAAUC,WAC/BF,iBAAiBC,SAAS,IAC1BA;AAEJ,MAAI,CAACQ;AACIF,WAAAA;AAGT,aAAWG,SAASF;AAClB,QACEV,iBAAeW,iBAAiBN,OAAOQ,KAAK,CAAC,CAAC,KAC9CD,MAAME,SAASH,iBAAiBN,OAAOQ,KAAK,CAAC,EAAEC,SAK5CC,wBAAwBH,KAAK,GAIlC;AAAA,iBAAWI,SAASJ,MAAMK;AACpBC,YAAAA,mBAAmBF,KAAK,GAAG;AAC7B,cACEhB,eAAeW,iBAAiBN,OAAOQ,KAAK,CAAC,CAAC,KAC9CG,MAAMF,SAASH,iBAAiBN,OAAOQ,KAAK,CAAC,EAAEC,QAC/Cd,eAAeW,iBAAiBL,MAAMO,KAAK,CAAC,CAAC,KAC7CG,MAAMF,SAASH,iBAAiBL,MAAMO,KAAK,CAAC,EAAEC,MAC9C;AAEEL,mBAAAA,OACAO,MAAMP,KAAKU,MACTR,iBAAiBN,OAAOe,QACxBT,iBAAiBL,MAAMc,MACzB;AAEF;AAAA,UAAA;AAGF,cACEpB,eAAeW,iBAAiBN,OAAOQ,KAAK,CAAC,CAAC,KAC9CG,MAAMF,SAASH,iBAAiBN,OAAOQ,KAAK,CAAC,EAAEC,MAC/C;AACAL,mBAAOA,OAAOO,MAAMP,KAAKU,MAAMR,iBAAiBN,OAAOe,MAAM;AAC7D;AAAA,UAAA;AAGF,cACEpB,eAAeW,iBAAiBL,MAAMO,KAAK,CAAC,CAAC,KAC7CG,MAAMF,SAASH,iBAAiBL,MAAMO,KAAK,CAAC,EAAEC,MAC9C;AACAL,mBAAOA,OAAOO,MAAMP,KAAKU,MAAM,GAAGR,iBAAiBL,MAAMc,MAAM;AAC/D;AAAA,UAAA;AAAA,QAIaX;AAKnB,UACET,eAAeW,iBAAiBL,MAAMO,KAAK,CAAC,CAAC,KAC7CD,MAAME,SAASH,iBAAiBL,MAAMO,KAAK,CAAC,EAAEC;AAE9C;AAAA,IAAA;AAIGL,SAAAA;AACT;AC/EO,SAASY,cAAc;AAAA,EAC5BC;AAAAA,EACAT;AAIF,GAAyB;AACnBE,SAAAA,wBAAwBO,IAAI,IACvB;AAAA,IACLT,MAAM,CAAC,GAAGA,MAAM,YAAY;AAAA,MAACC,MAAMQ,KAAKL,SAAS,CAAC,EAAEH;AAAAA,IAAAA,CAAK;AAAA,IACzDM,QAAQ;AAAA,EAAA,IAIL;AAAA,IACLP;AAAAA,IACAO,QAAQ;AAAA,EACV;AACF;AChBO,MAAMG,qBAA6CA,CAAC;AAAA,EAACf;AAAO,MAAM;AACvE,MAAI,CAACA,QAAQL;AACJ,WAAA;AAMT,QAAMqB,SAHYhB,QAAQL,UAAUC,WAChCF,iBAAiBM,QAAQL,SAAS,IAClCK,QAAQL,WACYE,QAClBoB,MAAMzB,eAAewB,MAAMX,KAAK,CAAC,CAAC,IAAIW,MAAMX,KAAK,CAAC,EAAEC,OAAOY,QAE3Dd,QAAQa,MACVjB,QAAQE,MAAMiB,KAAMf,CAAAA,WAAUA,OAAME,SAASW,GAAG,IAChDC;AAEJ,MAAI,CAACd;AACI,WAAA;AAGT,QAAMgB,eAAeP,cAAc;AAAA,IAACC,MAAMV;AAAAA,IAAOC,MAAM,CAAC;AAAA,MAACC,MAAMF,MAAME;AAAAA,IAAK,CAAA;AAAA,EAAA,CAAE;AAE5E,SAAOP,iBAAiB;AAAA,IACtBC,SAAS;AAAA,MACP,GAAGA;AAAAA,MACHE,OAAOF,QAAQE;AAAAA,MACfP,WAAW;AAAA,QACTE,QAAQuB;AAAAA,QACRtB,OAAOkB;AAAAA,MAAAA;AAAAA,IACT;AAAA,EACF,CACD;AACH;"}