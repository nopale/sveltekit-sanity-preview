import { isPortableTextListBlock, isPortableTextTextBlock, isKeySegment, isPortableTextSpan } from "@sanity/types";
function createGuards({
  schema
}) {
  function isListBlock(block) {
    return isPortableTextListBlock(block) && block._type === schema.block.name;
  }
  function isTextBlock(block) {
    return isPortableTextTextBlock(block) && block._type === schema.block.name;
  }
  return {
    isListBlock,
    isTextBlock
  };
}
const getFocusBlock = ({
  context
}) => {
  const key = context.selection && isKeySegment(context.selection.focus.path[0]) ? context.selection.focus.path[0]._key : void 0, node = key ? context.value.find((block) => block._key === key) : void 0;
  return node && key ? {
    node,
    path: [{
      _key: key
    }]
  } : void 0;
}, getFocusListBlock = ({
  context
}) => {
  const guards = createGuards(context), focusBlock = getFocusBlock({
    context
  });
  return focusBlock && guards.isListBlock(focusBlock.node) ? {
    node: focusBlock.node,
    path: focusBlock.path
  } : void 0;
}, getFocusTextBlock = ({
  context
}) => {
  const focusBlock = getFocusBlock({
    context
  });
  return focusBlock && isPortableTextTextBlock(focusBlock.node) ? {
    node: focusBlock.node,
    path: focusBlock.path
  } : void 0;
}, getFocusBlockObject = ({
  context
}) => {
  const focusBlock = getFocusBlock({
    context
  });
  return focusBlock && !isPortableTextTextBlock(focusBlock.node) ? {
    node: focusBlock.node,
    path: focusBlock.path
  } : void 0;
}, getFocusChild = ({
  context
}) => {
  const focusBlock = getFocusTextBlock({
    context
  });
  if (!focusBlock)
    return;
  const key = context.selection && isKeySegment(context.selection.focus.path[2]) ? context.selection.focus.path[2]._key : void 0, node = key ? focusBlock.node.children.find((span) => span._key === key) : void 0;
  return node && key ? {
    node,
    path: [...focusBlock.path, "children", {
      _key: key
    }]
  } : void 0;
}, getFocusSpan = ({
  context
}) => {
  const focusChild = getFocusChild({
    context
  });
  return focusChild && isPortableTextSpan(focusChild.node) ? {
    node: focusChild.node,
    path: focusChild.path
  } : void 0;
}, getFirstBlock = ({
  context
}) => {
  const node = context.value[0];
  return node ? {
    node,
    path: [{
      _key: node._key
    }]
  } : void 0;
}, getLastBlock = ({
  context
}) => {
  const node = context.value[context.value.length - 1] ? context.value[context.value.length - 1] : void 0;
  return node ? {
    node,
    path: [{
      _key: node._key
    }]
  } : void 0;
}, getSelectedBlocks = ({
  context
}) => {
  if (!context.selection)
    return [];
  const selectedBlocks = [], startKey = context.selection.backward ? isKeySegment(context.selection.focus.path[0]) ? context.selection.focus.path[0]._key : void 0 : isKeySegment(context.selection.anchor.path[0]) ? context.selection.anchor.path[0]._key : void 0, endKey = context.selection.backward ? isKeySegment(context.selection.anchor.path[0]) ? context.selection.anchor.path[0]._key : void 0 : isKeySegment(context.selection.focus.path[0]) ? context.selection.focus.path[0]._key : void 0;
  if (!startKey || !endKey)
    return selectedBlocks;
  for (const block of context.value) {
    if (block._key === startKey) {
      if (selectedBlocks.push({
        node: block,
        path: [{
          _key: block._key
        }]
      }), startKey === endKey)
        break;
      continue;
    }
    if (block._key === endKey) {
      selectedBlocks.push({
        node: block,
        path: [{
          _key: block._key
        }]
      });
      break;
    }
    selectedBlocks.length > 0 && selectedBlocks.push({
      node: block,
      path: [{
        _key: block._key
      }]
    });
  }
  return selectedBlocks;
}, getSelectionStartBlock = ({
  context
}) => {
  if (!context.selection)
    return;
  const key = context.selection.backward ? isKeySegment(context.selection.focus.path[0]) ? context.selection.focus.path[0]._key : void 0 : isKeySegment(context.selection.anchor.path[0]) ? context.selection.anchor.path[0]._key : void 0, node = key ? context.value.find((block) => block._key === key) : void 0;
  return node && key ? {
    node,
    path: [{
      _key: key
    }]
  } : void 0;
}, getSelectionEndBlock = ({
  context
}) => {
  if (!context.selection)
    return;
  const key = context.selection.backward ? isKeySegment(context.selection.anchor.path[0]) ? context.selection.anchor.path[0]._key : void 0 : isKeySegment(context.selection.focus.path[0]) ? context.selection.focus.path[0]._key : void 0, node = key ? context.value.find((block) => block._key === key) : void 0;
  return node && key ? {
    node,
    path: [{
      _key: key
    }]
  } : void 0;
}, getPreviousBlock = ({
  context
}) => {
  let previousBlock;
  const selectionStartBlock = getSelectionStartBlock({
    context
  });
  if (!selectionStartBlock)
    return;
  let foundSelectionStartBlock = !1;
  for (const block of context.value) {
    if (block._key === selectionStartBlock.node._key) {
      foundSelectionStartBlock = !0;
      break;
    }
    previousBlock = {
      node: block,
      path: [{
        _key: block._key
      }]
    };
  }
  if (foundSelectionStartBlock && previousBlock)
    return previousBlock;
}, getNextBlock = ({
  context
}) => {
  let nextBlock;
  const selectionEndBlock = getSelectionEndBlock({
    context
  });
  if (!selectionEndBlock)
    return;
  let foundSelectionEndBlock = !1;
  for (const block of context.value) {
    if (block._key === selectionEndBlock.node._key) {
      foundSelectionEndBlock = !0;
      continue;
    }
    if (foundSelectionEndBlock) {
      nextBlock = {
        node: block,
        path: [{
          _key: block._key
        }]
      };
      break;
    }
  }
  if (foundSelectionEndBlock && nextBlock)
    return nextBlock;
}, isSelectionCollapsed = ({
  context
}) => JSON.stringify(context.selection?.anchor.path) === JSON.stringify(context.selection?.focus.path) && context.selection?.anchor.offset === context.selection?.focus.offset;
export {
  createGuards,
  getFirstBlock,
  getFocusBlock,
  getFocusBlockObject,
  getFocusChild,
  getFocusListBlock,
  getFocusSpan,
  getFocusTextBlock,
  getLastBlock,
  getNextBlock,
  getPreviousBlock,
  getSelectedBlocks,
  getSelectionEndBlock,
  getSelectionStartBlock,
  isSelectionCollapsed
};
//# sourceMappingURL=selector.is-selection-collapsed.js.map
