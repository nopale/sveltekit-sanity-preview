{"version":3,"file":"index.js","sources":["../src/editor/create-editor-schema.ts","../src/editor/define-schema.ts","../src/utils/debug.ts","../src/utils/paths.ts","../src/utils/ranges.ts","../src/utils/selection.ts","../src/utils/values.ts","../src/utils/weakMaps.ts","../src/editor/nodes/DefaultObject.tsx","../src/editor/nodes/index.ts","../src/editor/components/DraggableBlock.tsx","../src/editor/components/Element.tsx","../src/editor/hooks/usePortableTextEditor.ts","../src/editor/nodes/DefaultAnnotation.tsx","../src/utils/schema.ts","../src/editor/mutation-machine.ts","../src/utils/validateValue.ts","../src/utils/withChanges.ts","../src/utils/withoutPatching.ts","../../../node_modules/.pnpm/@sanity+diff-match-patch@3.1.2/node_modules/@sanity/diff-match-patch/dist/index.js","../src/utils/withUndoRedo.ts","../src/editor/plugins/createWithUndoRedo.ts","../src/editor/sync-machine.ts","../src/editor/components/Synchronizer.tsx","../src/utils/operationToPatches.ts","../src/editor/plugins/create-with-event-listeners.ts","../src/editor/plugins/createWithMaxBlocks.ts","../src/editor/plugins/createWithObjectKeys.ts","../src/utils/applyPatch.ts","../src/editor/plugins/createWithPatches.ts","../src/editor/plugins/createWithPlaceholderBlock.ts","../src/editor/plugins/createWithPortableTextBlockStyle.ts","../../../node_modules/.pnpm/@portabletext+toolkit@2.0.16/node_modules/@portabletext/toolkit/dist/index.js","../src/utils/sibling-utils.ts","../src/editor/plugins/createWithPortableTextMarkModel.ts","../src/editor/plugins/createWithPortableTextSelections.ts","../src/editor/plugins/createWithSchemaTypes.ts","../src/editor/plugins/createWithUtils.ts","../src/editor/plugins/with-plugins.ts","../src/editor/create-slate-editor.tsx","../src/behavior-actions/behavior.action.list-item.ts","../src/behavior-actions/behavior.action.style.ts","../src/editor/plugins/createWithEditableAPI.ts","../src/behavior-actions/behavior.action-utils.insert-block.ts","../src/behavior-actions/behavior.action.insert-block-object.ts","../src/behavior-actions/behavior.action.insert-break.ts","../src/behavior-actions/behavior.action.insert-inline-object.ts","../src/behavior-actions/behavior.action.insert-span.ts","../src/behavior-actions/behavior.action.text-block.set.ts","../src/behavior-actions/behavior.action.text-block.unset.ts","../src/behavior-actions/behavior.actions.ts","../src/editor/get-active-decorators.ts","../src/editor/editor-machine.ts","../src/editor/get-value.ts","../src/editor/editor-selector.ts","../src/editor/key-generator.ts","../src/editor/create-editor.ts","../src/editor/editor-actor-context.ts","../src/editor/hooks/usePortableTextEditorSelection.tsx","../src/editor/PortableTextEditor.tsx","../src/editor/components/Leaf.tsx","../src/editor/plugins/createWithHotKeys.ts","../src/editor/plugins/createWithInsertData.ts","../src/editor/withSyncRangeDecorations.ts","../src/editor/Editable.tsx","../src/editor/editor-provider.tsx","../src/editor/editor-event-listener.tsx"],"sourcesContent":["import type {\n  ArraySchemaType,\n  BlockSchemaType,\n  ObjectSchemaType,\n  PortableTextBlock,\n  SchemaType,\n  SpanSchemaType,\n} from '@sanity/types'\nimport type {EditorSchema} from './define-schema'\n\nexport function createEditorSchema(\n  portableTextType: ArraySchemaType<PortableTextBlock>,\n): EditorSchema {\n  if (!portableTextType) {\n    throw new Error(\"Parameter 'portabletextType' missing (required)\")\n  }\n  const blockType = portableTextType.of?.find(findBlockType) as\n    | BlockSchemaType\n    | undefined\n  if (!blockType) {\n    throw new Error('Block type is not defined in this schema (required)')\n  }\n  const childrenField = blockType.fields?.find(\n    (field) => field.name === 'children',\n  ) as {type: ArraySchemaType} | undefined\n  if (!childrenField) {\n    throw new Error('Children field for block type found in schema (required)')\n  }\n  const ofType = childrenField.type.of\n  if (!ofType) {\n    throw new Error(\n      'Valid types for block children not found in schema (required)',\n    )\n  }\n  const spanType = ofType.find((memberType) => memberType.name === 'span') as\n    | ObjectSchemaType\n    | undefined\n  if (!spanType) {\n    throw new Error('Span type not found in schema (required)')\n  }\n  const inlineObjectTypes = (ofType.filter(\n    (memberType) => memberType.name !== 'span',\n  ) || []) as ObjectSchemaType[]\n  const blockObjectTypes = (portableTextType.of?.filter(\n    (field) => field.name !== blockType.name,\n  ) || []) as ObjectSchemaType[]\n  return {\n    styles: resolveEnabledStyles(blockType),\n    decorators: resolveEnabledDecorators(spanType),\n    lists: resolveEnabledListItems(blockType),\n    block: blockType,\n    span: spanType,\n    portableText: portableTextType,\n    inlineObjects: inlineObjectTypes,\n    blockObjects: blockObjectTypes,\n    annotations: (spanType as SpanSchemaType).annotations,\n  }\n}\n\nfunction resolveEnabledStyles(blockType: ObjectSchemaType) {\n  const styleField = blockType.fields?.find(\n    (btField) => btField.name === 'style',\n  )\n  if (!styleField) {\n    throw new Error(\n      \"A field with name 'style' is not defined in the block type (required).\",\n    )\n  }\n  const textStyles =\n    styleField.type.options?.list &&\n    styleField.type.options.list?.filter(\n      (style: {value: string}) => style.value,\n    )\n  if (!textStyles || textStyles.length === 0) {\n    throw new Error(\n      'The style fields need at least one style ' +\n        \"defined. I.e: {title: 'Normal', value: 'normal'}.\",\n    )\n  }\n  return textStyles\n}\n\nfunction resolveEnabledDecorators(spanType: ObjectSchemaType) {\n  return (spanType as any).decorators\n}\n\nfunction resolveEnabledListItems(blockType: ObjectSchemaType) {\n  const listField = blockType.fields?.find(\n    (btField) => btField.name === 'listItem',\n  )\n  if (!listField) {\n    throw new Error(\n      \"A field with name 'listItem' is not defined in the block type (required).\",\n    )\n  }\n  const listItems =\n    listField.type.options?.list &&\n    listField.type.options.list.filter((list: {value: string}) => list.value)\n  if (!listItems) {\n    throw new Error('The list field need at least to be an empty array')\n  }\n  return listItems\n}\n\nfunction findBlockType(type: SchemaType): BlockSchemaType | null {\n  if (type.type) {\n    return findBlockType(type.type)\n  }\n\n  if (type.name === 'block') {\n    return type as BlockSchemaType\n  }\n\n  return null\n}\n","import {Schema as SanitySchema} from '@sanity/schema'\nimport {defineField, defineType, type ObjectSchemaType} from '@sanity/types'\nimport startCase from 'lodash.startcase'\nimport type {PortableTextMemberSchemaTypes} from '../types/editor'\nimport {createEditorSchema} from './create-editor-schema'\n\n/**\n * @public\n */\nexport type BaseDefinition = {\n  name: string\n  title?: string\n}\n\n/**\n * @public\n */\nexport type SchemaDefinition<\n  TBaseDefinition extends BaseDefinition = BaseDefinition,\n> = {\n  decorators?: ReadonlyArray<TBaseDefinition>\n  blockObjects?: ReadonlyArray<TBaseDefinition>\n  inlineObjects?: ReadonlyArray<TBaseDefinition>\n  annotations?: ReadonlyArray<TBaseDefinition>\n  lists?: ReadonlyArray<TBaseDefinition>\n  styles?: ReadonlyArray<TBaseDefinition>\n}\n\n/**\n * @public\n */\nexport function defineSchema<const TSchemaDefinition extends SchemaDefinition>(\n  definition: TSchemaDefinition,\n): TSchemaDefinition {\n  return definition\n}\n\n/**\n * @public\n */\nexport type EditorSchema = PortableTextMemberSchemaTypes\n\nexport function compileSchemaDefinition<\n  TSchemaDefinition extends SchemaDefinition,\n>(definition?: TSchemaDefinition) {\n  const blockObjects =\n    definition?.blockObjects?.map((blockObject) =>\n      defineType({\n        type: 'object',\n        // Very naive way to work around `SanitySchema.compile` adding default\n        // fields to objects with the name `image`\n        name: blockObject.name === 'image' ? 'tmp-image' : blockObject.name,\n        title: blockObject.title,\n        fields: [],\n      }),\n    ) ?? []\n  const inlineObjects =\n    definition?.inlineObjects?.map((inlineObject) =>\n      defineType({\n        type: 'object',\n        name: inlineObject.name,\n        title: inlineObject.title,\n        fields: [],\n      }),\n    ) ?? []\n\n  const portableTextSchema = defineField({\n    type: 'array',\n    name: 'portable-text',\n    of: [\n      ...blockObjects.map((blockObject) => ({type: blockObject.name})),\n      {\n        type: 'block',\n        name: 'block',\n        of: inlineObjects.map((inlineObject) => ({type: inlineObject.name})),\n        marks: {\n          decorators:\n            definition?.decorators?.map((decorator) => ({\n              title: decorator.title ?? startCase(decorator.name),\n              value: decorator.name,\n            })) ?? [],\n          annotations:\n            definition?.annotations?.map((annotation) => ({\n              name: annotation.name,\n              type: 'object',\n              title: annotation.title,\n            })) ?? [],\n        },\n        lists:\n          definition?.lists?.map((list) => ({\n            value: list.name,\n            title: list.title ?? startCase(list.name),\n          })) ?? [],\n        styles:\n          definition?.styles?.map((style) => ({\n            value: style.name,\n            title: style.title ?? startCase(style.name),\n          })) ?? [],\n      },\n    ],\n  })\n\n  const schema = SanitySchema.compile({\n    types: [portableTextSchema, ...blockObjects, ...inlineObjects],\n  }).get('portable-text')\n\n  const pteSchema = createEditorSchema(schema)\n\n  return {\n    ...pteSchema,\n    blockObjects: pteSchema.blockObjects.map((blockObject) =>\n      blockObject.name === 'tmp-image'\n        ? ({\n            ...blockObject,\n            name: 'image',\n            type: {\n              ...blockObject.type,\n              name: 'image',\n            },\n          } as ObjectSchemaType)\n        : blockObject,\n    ),\n  } satisfies EditorSchema\n}\n","import debug from 'debug'\n\nconst rootName = 'sanity-pte:'\n\nexport default debug(rootName)\nexport function debugWithName(name: string): debug.Debugger {\n  const namespace = `${rootName}${name}`\n  if (debug && debug.enabled(namespace)) {\n    return debug(namespace)\n  }\n  return debug(rootName)\n}\n","import {isKeySegment, type Path} from '@sanity/types'\nimport {isEqual} from 'lodash'\nimport {\n  Editor,\n  Element,\n  type Descendant,\n  type Point,\n  type Path as SlatePath,\n} from 'slate'\nimport type {PortableTextMemberSchemaTypes} from '../types/editor'\nimport type {ObjectWithKeyAndType} from './ranges'\n\nexport function createKeyedPath(\n  point: Point,\n  value: ObjectWithKeyAndType[] | undefined,\n  types: PortableTextMemberSchemaTypes,\n): Path | null {\n  const blockPath = [point.path[0]]\n  if (!value) {\n    return null\n  }\n  const block = value[blockPath[0]]\n  if (!block) {\n    return null\n  }\n  const keyedBlockPath = [{_key: block._key}]\n  if (block._type !== types.block.name) {\n    return keyedBlockPath as Path\n  }\n  let keyedChildPath: Path | undefined\n  const childPath = point.path.slice(0, 2)\n  const child = Array.isArray(block.children) && block.children[childPath[1]]\n  if (child) {\n    keyedChildPath = ['children', {_key: child._key}]\n  }\n  return (\n    keyedChildPath ? [...keyedBlockPath, ...keyedChildPath] : keyedBlockPath\n  ) as Path\n}\n\nexport function toSlatePath(path: Path, editor: Editor): SlatePath {\n  if (!editor) {\n    return []\n  }\n  const [block, blockPath] = Array.from(\n    Editor.nodes(editor, {\n      at: [],\n      match: (n) =>\n        isKeySegment(path[0]) && (n as Descendant)._key === path[0]._key,\n    }),\n  )[0] || [undefined, undefined]\n\n  if (!block || !Element.isElement(block)) {\n    return []\n  }\n\n  if (editor.isVoid(block)) {\n    return [blockPath[0], 0]\n  }\n\n  const childPath = [path[2]]\n  const childIndex = block.children.findIndex((child) =>\n    isEqual([{_key: child._key}], childPath),\n  )\n\n  if (childIndex >= 0 && block.children[childIndex]) {\n    const child = block.children[childIndex]\n    if (Element.isElement(child) && editor.isVoid(child)) {\n      return blockPath.concat(childIndex).concat(0)\n    }\n    return blockPath.concat(childIndex)\n  }\n\n  return [blockPath[0], 0]\n}\n","import {Point, Range, type BaseRange, type Editor, type Operation} from 'slate'\nimport type {\n  EditorSelection,\n  EditorSelectionPoint,\n  PortableTextMemberSchemaTypes,\n} from '../types/editor'\nimport {createKeyedPath, toSlatePath} from './paths'\n\nexport interface ObjectWithKeyAndType {\n  _key: string\n  _type: string\n  children?: ObjectWithKeyAndType[]\n}\n\nexport function toPortableTextRange(\n  value: ObjectWithKeyAndType[] | undefined,\n  range: BaseRange | Partial<BaseRange> | null,\n  types: PortableTextMemberSchemaTypes,\n): EditorSelection {\n  if (!range) {\n    return null\n  }\n  let anchor: EditorSelectionPoint | null = null\n  let focus: EditorSelectionPoint | null = null\n  const anchorPath = range.anchor && createKeyedPath(range.anchor, value, types)\n  if (anchorPath && range.anchor) {\n    anchor = {\n      path: anchorPath,\n      offset: range.anchor.offset,\n    }\n  }\n  const focusPath = range.focus && createKeyedPath(range.focus, value, types)\n  if (focusPath && range.focus) {\n    focus = {\n      path: focusPath,\n      offset: range.focus.offset,\n    }\n  }\n  const backward = Boolean(\n    Range.isRange(range) ? Range.isBackward(range) : undefined,\n  )\n  return anchor && focus ? {anchor, focus, backward} : null\n}\n\nexport function toSlateRange(\n  selection: EditorSelection,\n  editor: Editor,\n): Range | null {\n  if (!selection || !editor) {\n    return null\n  }\n  const anchor = {\n    path: toSlatePath(selection.anchor.path, editor),\n    offset: selection.anchor.offset,\n  }\n  const focus = {\n    path: toSlatePath(selection.focus.path, editor),\n    offset: selection.focus.offset,\n  }\n  if (focus.path.length === 0 || anchor.path.length === 0) {\n    return null\n  }\n  const range = anchor && focus ? {anchor, focus} : null\n  return range\n}\n\nexport function moveRangeByOperation(\n  range: Range,\n  operation: Operation,\n): Range | null {\n  const anchor = Point.transform(range.anchor, operation)\n  const focus = Point.transform(range.focus, operation)\n\n  if (anchor === null || focus === null) {\n    return null\n  }\n\n  if (Point.equals(anchor, range.anchor) && Point.equals(focus, range.focus)) {\n    return range\n  }\n\n  return {anchor, focus}\n}\n","import type {Path, PortableTextBlock} from '@sanity/types'\nimport {isEqual} from 'lodash'\nimport type {EditorSelection, EditorSelectionPoint} from '../types/editor'\n\nexport function normalizePoint(\n  point: EditorSelectionPoint,\n  value: PortableTextBlock[],\n): EditorSelectionPoint | null {\n  if (!point || !value) {\n    return null\n  }\n  const newPath: Path = []\n  let newOffset: number = point.offset || 0\n  const blockKey =\n    typeof point.path[0] === 'object' &&\n    '_key' in point.path[0] &&\n    point.path[0]._key\n  const childKey =\n    typeof point.path[2] === 'object' &&\n    '_key' in point.path[2] &&\n    point.path[2]._key\n  const block: PortableTextBlock | undefined = value.find(\n    (blk) => blk._key === blockKey,\n  )\n  if (block) {\n    newPath.push({_key: block._key})\n  } else {\n    return null\n  }\n  if (block && point.path[1] === 'children') {\n    if (\n      !block.children ||\n      (Array.isArray(block.children) && block.children.length === 0)\n    ) {\n      return null\n    }\n    const child =\n      Array.isArray(block.children) &&\n      block.children.find((cld) => cld._key === childKey)\n    if (child) {\n      newPath.push('children')\n      newPath.push({_key: child._key})\n      newOffset =\n        child.text && child.text.length >= point.offset\n          ? point.offset\n          : (child.text && child.text.length) || 0\n    } else {\n      return null\n    }\n  }\n  return {path: newPath, offset: newOffset}\n}\n\nexport function normalizeSelection(\n  selection: EditorSelection,\n  value: PortableTextBlock[] | undefined,\n): EditorSelection | null {\n  if (!selection || !value || value.length === 0) {\n    return null\n  }\n  let newAnchor: EditorSelectionPoint | null = null\n  let newFocus: EditorSelectionPoint | null = null\n  const {anchor, focus} = selection\n  if (\n    anchor &&\n    value.find((blk) => isEqual({_key: blk._key}, anchor.path[0]))\n  ) {\n    newAnchor = normalizePoint(anchor, value)\n  }\n  if (focus && value.find((blk) => isEqual({_key: blk._key}, focus.path[0]))) {\n    newFocus = normalizePoint(focus, value)\n  }\n  if (newAnchor && newFocus) {\n    return {anchor: newAnchor, focus: newFocus, backward: selection.backward}\n  }\n  return null\n}\n","import type {\n  PathSegment,\n  PortableTextBlock,\n  PortableTextChild,\n  PortableTextObject,\n  PortableTextTextBlock,\n} from '@sanity/types'\nimport {isEqual} from 'lodash'\nimport {Element, Text, type Descendant, type Node} from 'slate'\nimport type {PortableTextMemberSchemaTypes} from '../types/editor'\n\nexport const EMPTY_MARKDEFS: PortableTextObject[] = []\n\nexport const VOID_CHILD_KEY = 'void-child'\n\ntype Partial<T> = {\n  [P in keyof T]?: T[P]\n}\n\nfunction keepObjectEquality(\n  object: PortableTextBlock | PortableTextChild,\n  keyMap: Record<string, PortableTextBlock | PortableTextChild>,\n) {\n  const value = keyMap[object._key]\n  if (value && isEqual(object, value)) {\n    return value\n  }\n  keyMap[object._key] = object\n  return object\n}\n\nexport function toSlateValue(\n  value: PortableTextBlock[] | undefined,\n  {schemaTypes}: {schemaTypes: PortableTextMemberSchemaTypes},\n  keyMap: Record<string, any> = {},\n): Descendant[] {\n  if (value && Array.isArray(value)) {\n    return value.map((block) => {\n      const {_type, _key, ...rest} = block\n      const voidChildren = [\n        {_key: VOID_CHILD_KEY, _type: 'span', text: '', marks: []},\n      ]\n      const isPortableText = block && block._type === schemaTypes.block.name\n      if (isPortableText) {\n        const textBlock = block as PortableTextTextBlock\n        let hasInlines = false\n        const hasMissingStyle = typeof textBlock.style === 'undefined'\n        const hasMissingMarkDefs = typeof textBlock.markDefs === 'undefined'\n        const hasMissingChildren = typeof textBlock.children === 'undefined'\n\n        const children = (textBlock.children || []).map((child) => {\n          const {_type: cType, _key: cKey, ...cRest} = child\n          // Return 'slate' version of inline object where the actual\n          // value is stored in the `value` property.\n          // In slate, inline objects are represented as regular\n          // children with actual text node in order to be able to\n          // be selected the same way as the rest of the (text) content.\n          if (cType !== 'span') {\n            hasInlines = true\n            return keepObjectEquality(\n              {\n                _type: cType,\n                _key: cKey,\n                children: voidChildren,\n                value: cRest,\n                __inline: true,\n              },\n              keyMap,\n            )\n          }\n          // Original child object (span)\n          return child\n        })\n        // Return original block\n        if (\n          !hasMissingStyle &&\n          !hasMissingMarkDefs &&\n          !hasMissingChildren &&\n          !hasInlines &&\n          Element.isElement(block)\n        ) {\n          // Original object\n          return block\n        }\n        // TODO: remove this when we have a better way to handle missing style\n        if (hasMissingStyle) {\n          rest.style = schemaTypes.styles[0].value\n        }\n        return keepObjectEquality({_type, _key, ...rest, children}, keyMap)\n      }\n      return keepObjectEquality(\n        {\n          _type,\n          _key,\n          children: voidChildren,\n          value: rest,\n        },\n        keyMap,\n      )\n    }) as Descendant[]\n  }\n  return []\n}\n\nexport function fromSlateValue(\n  value: Descendant[],\n  textBlockType: string,\n  keyMap: Record<string, PortableTextBlock | PortableTextChild> = {},\n): PortableTextBlock[] {\n  return value.map((block) => {\n    const {_key, _type} = block\n    if (!_key || !_type) {\n      throw new Error('Not a valid block')\n    }\n    if (\n      _type === textBlockType &&\n      'children' in block &&\n      Array.isArray(block.children) &&\n      _key\n    ) {\n      let hasInlines = false\n      const children = block.children.map((child) => {\n        const {_type: _cType} = child\n        if ('value' in child && _cType !== 'span') {\n          hasInlines = true\n          const {\n            value: v,\n            _key: k,\n            _type: t,\n            __inline: _i,\n            children: _c,\n            ...rest\n          } = child\n          return keepObjectEquality(\n            {...rest, ...v, _key: k as string, _type: t as string},\n            keyMap,\n          )\n        }\n        return child\n      })\n      if (!hasInlines) {\n        return block as PortableTextBlock // Original object\n      }\n      return keepObjectEquality(\n        {...block, children, _key, _type},\n        keyMap,\n      ) as PortableTextBlock\n    }\n    const blockValue = 'value' in block && block.value\n    return keepObjectEquality(\n      {_key, _type, ...(typeof blockValue === 'object' ? blockValue : {})},\n      keyMap,\n    ) as PortableTextBlock\n  })\n}\n\nexport function isEqualToEmptyEditor(\n  children: Descendant[] | PortableTextBlock[],\n  schemaTypes: PortableTextMemberSchemaTypes,\n): boolean {\n  return (\n    children === undefined ||\n    (children && Array.isArray(children) && children.length === 0) ||\n    (children &&\n      Array.isArray(children) &&\n      children.length === 1 &&\n      Element.isElement(children[0]) &&\n      children[0]._type === schemaTypes.block.name &&\n      'style' in children[0] &&\n      children[0].style === schemaTypes.styles[0].value &&\n      !('listItem' in children[0]) &&\n      Array.isArray(children[0].children) &&\n      children[0].children.length === 1 &&\n      Text.isText(children[0].children[0]) &&\n      children[0].children[0]._type === 'span' &&\n      !children[0].children[0].marks?.join('') &&\n      children[0].children[0].text === '')\n  )\n}\n\nexport function findBlockAndIndexFromPath(\n  firstPathSegment: PathSegment,\n  children: (Node | Partial<Node>)[],\n): [Element | undefined, number | undefined] {\n  let blockIndex = -1\n  const isNumber = Number.isInteger(Number(firstPathSegment))\n  if (isNumber) {\n    blockIndex = Number(firstPathSegment)\n  } else if (children) {\n    blockIndex = children.findIndex(\n      (blk) =>\n        Element.isElement(blk) && isEqual({_key: blk._key}, firstPathSegment),\n    )\n  }\n  if (blockIndex > -1) {\n    return [children[blockIndex] as Element, blockIndex]\n  }\n  return [undefined, -1]\n}\n\nexport function findChildAndIndexFromPath(\n  secondPathSegment: PathSegment,\n  block: Element,\n): [Element | Text | undefined, number] {\n  let childIndex = -1\n  const isNumber = Number.isInteger(Number(secondPathSegment))\n  if (isNumber) {\n    childIndex = Number(secondPathSegment)\n  } else {\n    childIndex = block.children.findIndex((child) =>\n      isEqual({_key: child._key}, secondPathSegment),\n    )\n  }\n  if (childIndex > -1) {\n    return [block.children[childIndex] as Element | Text, childIndex]\n  }\n  return [undefined, -1]\n}\n\nexport function getValueOrInitialValue(\n  value: unknown,\n  initialValue: PortableTextBlock[],\n): PortableTextBlock[] | undefined {\n  if (value && Array.isArray(value) && value.length > 0) {\n    return value\n  }\n  return initialValue\n}\n","import type {Editor, Element, Range} from 'slate'\nimport type {EditorSelection} from '..'\n\n// Is the editor currently receiving remote changes that are being applied to the content?\nexport const IS_PROCESSING_REMOTE_CHANGES: WeakMap<Editor, boolean> =\n  new WeakMap()\n\n// Is the editor dragging something?\nexport const IS_DRAGGING: WeakMap<Editor, boolean> = new WeakMap()\n// Is the editor dragging a element?\nexport const IS_DRAGGING_BLOCK_ELEMENT: WeakMap<Editor, Element> = new WeakMap()\n\n// When dragging elements, this will be the target element\nexport const IS_DRAGGING_ELEMENT_TARGET: WeakMap<Editor, Element> =\n  new WeakMap()\n// Target position for dragging over a block\nexport const IS_DRAGGING_BLOCK_TARGET_POSITION: WeakMap<\n  Editor,\n  'top' | 'bottom'\n> = new WeakMap()\n\nexport const KEY_TO_SLATE_ELEMENT: WeakMap<Editor, any | undefined> =\n  new WeakMap()\nexport const KEY_TO_VALUE_ELEMENT: WeakMap<Editor, any | undefined> =\n  new WeakMap()\n\n// Keep object relation to slate range in the portable-text-range\nexport const SLATE_TO_PORTABLE_TEXT_RANGE = new WeakMap<\n  Range,\n  EditorSelection\n>()\n","import type {PortableTextBlock, PortableTextChild} from '@sanity/types'\nimport type {JSX} from 'react'\n\ntype Props = {\n  value: PortableTextBlock | PortableTextChild\n}\n\nconst DefaultObject = (props: Props): JSX.Element => {\n  return (\n    <div>\n      <pre>{JSON.stringify(props.value, null, 2)}</pre>\n    </div>\n  )\n}\n\nDefaultObject.displayName = 'DefaultObject'\n\nexport default DefaultObject\n","import {styled} from 'styled-components'\n\nexport const DefaultBlockObject = styled.div<{selected: boolean}>`\n  user-select: none;\n  border: ${(props) => {\n    if (props.selected) {\n      return '1px solid blue'\n    }\n    return '1px solid transparent'\n  }};\n`\n\nexport const DefaultInlineObject = styled.span<{selected: boolean}>`\n  background: #999;\n  border: ${(props) => {\n    if (props.selected) {\n      return '1px solid blue'\n    }\n    return '1px solid transparent'\n  }};\n`\n\ntype ListItemProps = {listLevel: number; listStyle: string}\n\nexport const DefaultListItem = styled.div<ListItemProps>`\n  &.pt-list-item {\n    width: fit-content;\n    position: relative;\n    display: block;\n\n    /* Important 'transform' in order to force refresh the ::before and ::after rules\n      in Webkit: https://stackoverflow.com/a/21947628/831480\n    */\n    transform: translateZ(0);\n    margin-left: ${(props: ListItemProps) => getLeftPositionForListLevel(props.listLevel)};\n  }\n  &.pt-list-item > .pt-list-item-inner {\n    display: flex;\n    margin: 0;\n    padding: 0;\n    &:before {\n      justify-content: flex-start;\n      vertical-align: top;\n    }\n  }\n  &.pt-list-item-bullet > .pt-list-item-inner:before {\n      content: '${(props: ListItemProps) =>\n        getContentForListLevelAndStyle(props.listLevel, props.listStyle)}';\n      font-size: 0.4375rem; /* 7px */\n      line-height: 1.5rem; /* Same as body text */\n      /* Optical alignment */\n      position: relative;\n    }\n  }\n  &.pt-list-item-bullet > .pt-list-item-inner {\n    &:before {\n      min-width: 1.5rem; /* Make sure space between bullet and text never shrinks */\n    }\n  }\n  &.pt-list-item-number {\n    counter-increment: ${(props: {listLevel: number}) =>\n      getCounterIncrementForListLevel(props.listLevel)};\n    counter-reset: ${(props: {listLevel: number}) => getCounterResetForListLevel(props.listLevel)};\n  }\n  & + :not(.pt-list-item-number) {\n    counter-reset: listItemNumber;\n  }\n  &.pt-list-item-number > .pt-list-item-inner:before {\n    content: ${(props) => getCounterContentForListLevel(props.listLevel)};\n    min-width: 1.5rem; /* Make sure space between number and text never shrinks */\n    /* Optical alignment */\n    position: relative;\n    top: 1px;\n  }\n`\n\nexport const DefaultListItemInner = styled.div``\n\nfunction getLeftPositionForListLevel(level: number) {\n  switch (Number(level)) {\n    case 1:\n      return '1.5em'\n    case 2:\n      return '3em'\n    case 3:\n      return '4.5em'\n    case 4:\n      return '6em'\n    case 5:\n      return '7.5em'\n    case 6:\n      return '9em'\n    case 7:\n      return '10.5em'\n    case 8:\n      return '12em'\n    case 9:\n      return '13.5em'\n    case 10:\n      return '15em'\n    default:\n      return '0em'\n  }\n}\n\nconst bullets = ['●', '○', '■']\n\nfunction getContentForListLevelAndStyle(level: number, style: string) {\n  const normalizedLevel = (level - 1) % 3\n  if (style === 'bullet') {\n    return bullets[normalizedLevel]\n  }\n  return '*'\n}\n\nfunction getCounterIncrementForListLevel(level: number) {\n  switch (level) {\n    case 1:\n      return 'listItemNumber'\n    case 2:\n      return 'listItemAlpha'\n    case 3:\n      return 'listItemRoman'\n    case 4:\n      return 'listItemNumberNext'\n    case 5:\n      return 'listItemLetterNext'\n    case 6:\n      return 'listItemRomanNext'\n    case 7:\n      return 'listItemNumberNextNext'\n    case 8:\n      return 'listItemAlphaNextNext'\n    case 9:\n      return 'listItemRomanNextNext'\n    default:\n      return 'listItemNumberNextNextNext'\n  }\n}\n\nfunction getCounterResetForListLevel(level: number) {\n  switch (level) {\n    case 1:\n      return 'listItemAlpha'\n    case 2:\n      return 'listItemRoman'\n    case 3:\n      return 'listItemNumberNext'\n    case 4:\n      return 'listItemLetterNext'\n    case 5:\n      return 'listItemRomanNext'\n    case 6:\n      return 'listItemNumberNextNext'\n    case 7:\n      return 'listItemAlphaNextNext'\n    case 8:\n      return 'listItemRomanNextNext'\n    case 9:\n      return 'listItemNumberNextNextNext'\n    default:\n      return 'listItemNumberNextNextNext'\n  }\n}\n\nfunction getCounterContentForListLevel(level: number) {\n  switch (level) {\n    case 1:\n      return `counter(listItemNumber) '. '`\n    case 2:\n      return `counter(listItemAlpha, lower-alpha) '. '`\n    case 3:\n      return `counter(listItemRoman, lower-roman) '. '`\n    case 4:\n      return `counter(listItemNumberNext) '. '`\n    case 5:\n      return `counter(listItemLetterNext, lower-alpha) '. '`\n    case 6:\n      return `counter(listItemRomanNext, lower-roman) '. '`\n    case 7:\n      return `counter(listItemNumberNextNext) '. '`\n    case 8:\n      return `counter(listItemAlphaNextNext, lower-alpha) '. '`\n    case 9:\n      return `counter(listItemRomanNextNext, lower-roman) '. '`\n    default:\n      return `counter(listItemNumberNextNextNext) '. '`\n  }\n}\n","import {\n  useCallback,\n  useEffect,\n  useMemo,\n  useRef,\n  useState,\n  type DragEvent,\n  type MutableRefObject,\n  type ReactNode,\n} from 'react'\nimport {Editor, Path, Transforms, type Element as SlateElement} from 'slate'\nimport {ReactEditor, useSlateStatic} from 'slate-react'\nimport {debugWithName} from '../../utils/debug'\nimport {\n  IS_DRAGGING,\n  IS_DRAGGING_BLOCK_ELEMENT,\n  IS_DRAGGING_BLOCK_TARGET_POSITION,\n  IS_DRAGGING_ELEMENT_TARGET,\n} from '../../utils/weakMaps'\n\nconst debug = debugWithName('components:DraggableBlock')\nconst debugRenders = false\n\n/**\n * @internal\n */\nexport interface DraggableBlockProps {\n  children: ReactNode\n  element: SlateElement\n  readOnly: boolean\n  blockRef: MutableRefObject<HTMLDivElement | null>\n}\n\n/**\n * Implements drag and drop functionality on editor block nodes\n * @internal\n */\nexport const DraggableBlock = ({\n  children,\n  element,\n  readOnly,\n  blockRef,\n}: DraggableBlockProps) => {\n  const editor = useSlateStatic()\n  const dragGhostRef = useRef<HTMLElement>(undefined)\n  const [isDragOver, setIsDragOver] = useState(false)\n  const isVoid = useMemo(\n    () => Editor.isVoid(editor, element),\n    [editor, element],\n  )\n  const isInline = useMemo(\n    () => Editor.isInline(editor, element),\n    [editor, element],\n  )\n\n  const [blockElement, setBlockElement] = useState<HTMLElement | null>(null)\n\n  useEffect(\n    () =>\n      setBlockElement(\n        blockRef ? blockRef.current : ReactEditor.toDOMNode(editor, element),\n      ),\n    [editor, element, blockRef],\n  )\n\n  // Note: this is called not for the dragging block, but for the targets when the block is dragged over them\n  const handleDragOver = useCallback(\n    (event: DragEvent) => {\n      const isMyDragOver = IS_DRAGGING_BLOCK_ELEMENT.get(editor)\n      // debug('Drag over', blockElement)\n      if (!isMyDragOver || !blockElement) {\n        return\n      }\n      event.preventDefault()\n      event.dataTransfer.dropEffect = 'move'\n      IS_DRAGGING_ELEMENT_TARGET.set(editor, element)\n      const elementRect = blockElement.getBoundingClientRect()\n      const offset = elementRect.top\n      const height = elementRect.height\n      const Y = event.pageY\n      const loc = Math.abs(offset - Y)\n      let position: 'top' | 'bottom' = 'bottom'\n      if (element === editor.children[0]) {\n        position = 'top'\n      } else if (loc < height / 2) {\n        position = 'top'\n        IS_DRAGGING_BLOCK_TARGET_POSITION.set(editor, position)\n      } else {\n        position = 'bottom'\n        IS_DRAGGING_BLOCK_TARGET_POSITION.set(editor, position)\n      }\n      if (isMyDragOver === element) {\n        event.dataTransfer.dropEffect = 'none'\n        return\n      }\n      setIsDragOver(true)\n    },\n    [blockElement, editor, element],\n  )\n\n  // Note: this is called not for the dragging block, but for the targets when the block is dragged over them\n  const handleDragLeave = useCallback(() => {\n    setIsDragOver(false)\n  }, [])\n\n  // Note: this is called for the dragging block\n  const handleDragEnd = useCallback(\n    (event: DragEvent) => {\n      const targetBlock = IS_DRAGGING_ELEMENT_TARGET.get(editor)\n      if (targetBlock) {\n        IS_DRAGGING.set(editor, false)\n        event.preventDefault()\n        event.stopPropagation()\n        IS_DRAGGING_ELEMENT_TARGET.delete(editor)\n        if (dragGhostRef.current) {\n          debug('Removing drag ghost')\n          document.body.removeChild(dragGhostRef.current)\n        }\n        const dragPosition = IS_DRAGGING_BLOCK_TARGET_POSITION.get(editor)\n        IS_DRAGGING_BLOCK_TARGET_POSITION.delete(editor)\n        let targetPath = ReactEditor.findPath(editor, targetBlock)\n        const myPath = ReactEditor.findPath(editor, element)\n        const isBefore = Path.isBefore(myPath, targetPath)\n        if (dragPosition === 'bottom' && !isBefore) {\n          // If it is already at the bottom, don't do anything.\n          if (targetPath[0] >= editor.children.length - 1) {\n            debug('target is already at the bottom, not moving')\n            return\n          }\n          const originalPath = targetPath\n          targetPath = Path.next(targetPath)\n          debug(\n            `Adjusting targetPath from ${JSON.stringify(originalPath)} to ${JSON.stringify(\n              targetPath,\n            )}`,\n          )\n        }\n        if (\n          dragPosition === 'top' &&\n          isBefore &&\n          targetPath[0] !== editor.children.length - 1\n        ) {\n          const originalPath = targetPath\n          targetPath = Path.previous(targetPath)\n          debug(\n            `Adjusting targetPath from ${JSON.stringify(originalPath)} to ${JSON.stringify(\n              targetPath,\n            )}`,\n          )\n        }\n        if (Path.equals(targetPath, myPath)) {\n          event.preventDefault()\n          debug('targetPath and myPath is the same, not moving')\n          return\n        }\n        debug(\n          `Moving element ${element._key} from path ${JSON.stringify(myPath)} to ${JSON.stringify(\n            targetPath,\n          )} (${dragPosition})`,\n        )\n        Transforms.moveNodes(editor, {at: myPath, to: targetPath})\n        editor.onChange()\n        return\n      }\n      debug('No target element, not doing anything')\n    },\n    [editor, element],\n  )\n  // Note: this is called not for the dragging block, but for the drop target\n  const handleDrop = useCallback(\n    (event: DragEvent) => {\n      if (IS_DRAGGING_BLOCK_ELEMENT.get(editor)) {\n        debug('On drop (prevented)', element)\n        event.preventDefault()\n        event.stopPropagation()\n        setIsDragOver(false)\n      }\n    },\n    [editor, element],\n  )\n  // Note: this is called for the dragging block\n  const handleDrag = useCallback(\n    (event: DragEvent) => {\n      if (!isVoid) {\n        IS_DRAGGING_BLOCK_ELEMENT.delete(editor)\n        return\n      }\n      IS_DRAGGING.set(editor, true)\n      IS_DRAGGING_BLOCK_ELEMENT.set(editor, element)\n      event.stopPropagation() // Stop propagation so that leafs don't get this and take focus/selection!\n\n      const target = event.target\n\n      if (target instanceof HTMLElement) {\n        target.style.opacity = '1'\n      }\n    },\n    [editor, element, isVoid],\n  )\n\n  // Note: this is called for the dragging block\n  const handleDragStart = useCallback(\n    (event: DragEvent) => {\n      if (!isVoid || isInline) {\n        debug('Not dragging block')\n        IS_DRAGGING_BLOCK_ELEMENT.delete(editor)\n        IS_DRAGGING.set(editor, false)\n        return\n      }\n      debug('Drag start')\n      IS_DRAGGING.set(editor, true)\n      if (event.dataTransfer) {\n        event.dataTransfer.setData('application/portable-text', 'something')\n        event.dataTransfer.effectAllowed = 'move'\n      }\n      // Clone blockElement so that it will not be visually clipped by scroll-containers etc.\n      // The application that uses the portable-text-editor may indicate the element used as\n      // drag ghost by adding a truthy data attribute 'data-pt-drag-ghost-element' to a HTML element.\n      if (blockElement && blockElement instanceof HTMLElement) {\n        let dragGhost = blockElement.cloneNode(true) as HTMLElement\n        const customGhost = dragGhost.querySelector(\n          '[data-pt-drag-ghost-element]',\n        )\n        if (customGhost) {\n          dragGhost = customGhost as HTMLElement\n        }\n\n        // Set the `data-dragged` attribute so the consumer can style the element while it’s dragged\n        dragGhost.setAttribute('data-dragged', '')\n\n        if (document.body) {\n          dragGhostRef.current = dragGhost\n          dragGhost.style.position = 'absolute'\n          dragGhost.style.left = '-99999px'\n          dragGhost.style.boxSizing = 'border-box'\n          document.body.appendChild(dragGhost)\n          const rect = blockElement.getBoundingClientRect()\n          const x = event.clientX - rect.left\n          const y = event.clientY - rect.top\n          dragGhost.style.width = `${rect.width}px`\n          dragGhost.style.height = `${rect.height}px`\n          event.dataTransfer.setDragImage(dragGhost, x, y)\n        }\n      }\n      handleDrag(event)\n    },\n    [blockElement, editor, handleDrag, isInline, isVoid],\n  )\n\n  const isDraggingOverFirstBlock =\n    isDragOver && editor.children[0] === IS_DRAGGING_ELEMENT_TARGET.get(editor)\n  const isDraggingOverLastBlock =\n    isDragOver &&\n    editor.children[editor.children.length - 1] ===\n      IS_DRAGGING_ELEMENT_TARGET.get(editor)\n  const dragPosition = IS_DRAGGING_BLOCK_TARGET_POSITION.get(editor)\n\n  const isDraggingOverTop =\n    isDraggingOverFirstBlock ||\n    (isDragOver &&\n      !isDraggingOverFirstBlock &&\n      !isDraggingOverLastBlock &&\n      dragPosition === 'top')\n  const isDraggingOverBottom =\n    isDraggingOverLastBlock ||\n    (isDragOver &&\n      !isDraggingOverFirstBlock &&\n      !isDraggingOverLastBlock &&\n      dragPosition === 'bottom')\n\n  const dropIndicator = useMemo(\n    () => (\n      <div\n        className=\"pt-drop-indicator\"\n        style={{\n          position: 'absolute',\n          width: '100%',\n          height: 1,\n          borderBottom: '1px solid currentColor',\n          zIndex: 5,\n        }}\n      />\n    ),\n    [],\n  )\n\n  if (readOnly) {\n    return <>{children}</>\n  }\n\n  if (debugRenders) {\n    debug('render')\n  }\n\n  return (\n    <div\n      draggable={isVoid}\n      onDragStart={handleDragStart}\n      onDrag={handleDrag}\n      onDragOver={handleDragOver}\n      onDragLeave={handleDragLeave}\n      onDragEnd={handleDragEnd}\n      onDrop={handleDrop}\n    >\n      {isDraggingOverTop && dropIndicator}\n      {children}\n      {isDraggingOverBottom && dropIndicator}\n    </div>\n  )\n}\n\nDraggableBlock.displayName = 'DraggableBlock'\n","import type {\n  Path,\n  PortableTextChild,\n  PortableTextObject,\n  PortableTextTextBlock,\n} from '@sanity/types'\nimport {\n  useMemo,\n  useRef,\n  type FunctionComponent,\n  type JSX,\n  type ReactElement,\n} from 'react'\nimport {Editor, Range, Element as SlateElement} from 'slate'\nimport {\n  ReactEditor,\n  useSelected,\n  useSlateStatic,\n  type RenderElementProps,\n} from 'slate-react'\nimport type {\n  BlockRenderProps,\n  PortableTextMemberSchemaTypes,\n  RenderBlockFunction,\n  RenderChildFunction,\n  RenderListItemFunction,\n  RenderStyleFunction,\n} from '../../types/editor'\nimport {debugWithName} from '../../utils/debug'\nimport {fromSlateValue} from '../../utils/values'\nimport {KEY_TO_VALUE_ELEMENT} from '../../utils/weakMaps'\nimport ObjectNode from '../nodes/DefaultObject'\nimport {\n  DefaultBlockObject,\n  DefaultListItem,\n  DefaultListItemInner,\n} from '../nodes/index'\nimport {DraggableBlock} from './DraggableBlock'\n\nconst debug = debugWithName('components:Element')\nconst debugRenders = false\nconst EMPTY_ANNOTATIONS: PortableTextObject[] = []\n\n/**\n * @internal\n */\nexport interface ElementProps {\n  attributes: RenderElementProps['attributes']\n  children: ReactElement<any>\n  element: SlateElement\n  schemaTypes: PortableTextMemberSchemaTypes\n  readOnly: boolean\n  renderBlock?: RenderBlockFunction\n  renderChild?: RenderChildFunction\n  renderListItem?: RenderListItemFunction\n  renderStyle?: RenderStyleFunction\n  spellCheck?: boolean\n}\n\nconst inlineBlockStyle = {display: 'inline-block'}\n\n/**\n * Renders Portable Text block and inline object nodes in Slate\n * @internal\n */\nexport const Element: FunctionComponent<ElementProps> = ({\n  attributes,\n  children,\n  element,\n  schemaTypes,\n  readOnly,\n  renderBlock,\n  renderChild,\n  renderListItem,\n  renderStyle,\n  spellCheck,\n}) => {\n  const editor = useSlateStatic()\n  const selected = useSelected()\n  const blockRef = useRef<HTMLDivElement | null>(null)\n  const inlineBlockObjectRef = useRef(null)\n  const focused =\n    (selected && editor.selection && Range.isCollapsed(editor.selection)) ||\n    false\n\n  const value = useMemo(\n    () =>\n      fromSlateValue(\n        [element],\n        schemaTypes.block.name,\n        KEY_TO_VALUE_ELEMENT.get(editor),\n      )[0],\n    [editor, element, schemaTypes.block.name],\n  )\n\n  let renderedBlock = children\n\n  let className: string | undefined\n\n  const blockPath: Path = useMemo(() => [{_key: element._key}], [element])\n\n  if (typeof element._type !== 'string') {\n    throw new Error(`Expected element to have a _type property`)\n  }\n\n  if (typeof element._key !== 'string') {\n    throw new Error(`Expected element to have a _key property`)\n  }\n\n  // Test for inline objects first\n  if (editor.isInline(element)) {\n    const path = ReactEditor.findPath(editor, element)\n    const [block] = Editor.node(editor, path, {depth: 1})\n    const schemaType = schemaTypes.inlineObjects.find(\n      (_type) => _type.name === element._type,\n    )\n    if (!schemaType) {\n      throw new Error('Could not find type for inline block element')\n    }\n    if (SlateElement.isElement(block)) {\n      const elmPath: Path = [\n        {_key: block._key},\n        'children',\n        {_key: element._key},\n      ]\n      if (debugRenders) {\n        debug(`Render ${element._key} (inline object)`)\n      }\n      return (\n        <span {...attributes}>\n          {/* Note that children must follow immediately or cut and selections will not work properly in Chrome. */}\n          {children}\n          <span\n            draggable={!readOnly}\n            className=\"pt-inline-object\"\n            data-testid=\"pt-inline-object\"\n            ref={inlineBlockObjectRef}\n            key={element._key}\n            style={inlineBlockStyle}\n            contentEditable={false}\n          >\n            {renderChild &&\n              renderChild({\n                annotations: EMPTY_ANNOTATIONS, // These inline objects currently doesn't support annotations. This is a limitation of the current PT spec/model.\n                children: <ObjectNode value={value} />,\n                editorElementRef: inlineBlockObjectRef,\n                focused,\n                path: elmPath,\n                schemaType,\n                selected,\n                type: schemaType,\n                value: value as PortableTextChild,\n              })}\n            {!renderChild && <ObjectNode value={value} />}\n          </span>\n        </span>\n      )\n    }\n    throw new Error('Block not found!')\n  }\n\n  // If not inline, it's either a block (text) or a block object (non-text)\n  // NOTE: text blocks aren't draggable with DraggableBlock (yet?)\n  if (element._type === schemaTypes.block.name) {\n    className = `pt-block pt-text-block`\n    const isListItem = 'listItem' in element\n    if (debugRenders) {\n      debug(`Render ${element._key} (text block)`)\n    }\n    const style = ('style' in element && element.style) || 'normal'\n    className = `pt-block pt-text-block pt-text-block-style-${style}`\n    const blockStyleType = schemaTypes.styles.find(\n      (item) => item.value === style,\n    )\n    if (renderStyle && blockStyleType) {\n      renderedBlock = renderStyle({\n        block: element as PortableTextTextBlock,\n        children,\n        focused,\n        selected,\n        value: style,\n        path: blockPath,\n        schemaType: blockStyleType,\n        editorElementRef: blockRef,\n      })\n    }\n    let level: number | undefined\n    if (isListItem) {\n      if (typeof element.level === 'number') {\n        level = element.level\n      }\n      className += ` pt-list-item pt-list-item-${element.listItem} pt-list-item-level-${level || 1}`\n    }\n    if (editor.isListBlock(value) && isListItem && element.listItem) {\n      const listType = schemaTypes.lists.find(\n        (item) => item.value === element.listItem,\n      )\n      if (renderListItem && listType) {\n        renderedBlock = renderListItem({\n          block: value,\n          children: renderedBlock,\n          focused,\n          selected,\n          value: element.listItem,\n          path: blockPath,\n          schemaType: listType,\n          level: value.level || 1,\n          editorElementRef: blockRef,\n        })\n      } else {\n        renderedBlock = (\n          <DefaultListItem\n            listStyle={value.listItem || schemaTypes.lists[0].value}\n            listLevel={value.level || 1}\n          >\n            <DefaultListItemInner>{renderedBlock}</DefaultListItemInner>\n          </DefaultListItem>\n        )\n      }\n    }\n    const renderProps: Omit<BlockRenderProps, 'type'> = Object.defineProperty(\n      {\n        children: renderedBlock,\n        editorElementRef: blockRef,\n        focused,\n        level,\n        listItem: isListItem ? element.listItem : undefined,\n        path: blockPath,\n        selected,\n        style,\n        schemaType: schemaTypes.block,\n        value,\n      },\n      'type',\n      {\n        enumerable: false,\n        get() {\n          console.warn(\n            \"Property 'type' is deprecated, use 'schemaType' instead.\",\n          )\n          return schemaTypes.block\n        },\n      },\n    )\n\n    const propsOrDefaultRendered = renderBlock\n      ? renderBlock(renderProps as BlockRenderProps)\n      : children\n    return (\n      <div\n        key={element._key}\n        {...attributes}\n        className={className}\n        spellCheck={spellCheck}\n      >\n        <DraggableBlock\n          element={element}\n          readOnly={readOnly}\n          blockRef={blockRef}\n        >\n          <div ref={blockRef}>{propsOrDefaultRendered}</div>\n        </DraggableBlock>\n      </div>\n    )\n  }\n  const schemaType = schemaTypes.blockObjects.find(\n    (_type) => _type.name === element._type,\n  )\n  if (!schemaType) {\n    throw new Error(\n      `Could not find schema type for block element of _type ${element._type}`,\n    )\n  }\n  if (debugRenders) {\n    debug(`Render ${element._key} (object block)`)\n  }\n  className = 'pt-block pt-object-block'\n  const block = fromSlateValue(\n    [element],\n    schemaTypes.block.name,\n    KEY_TO_VALUE_ELEMENT.get(editor),\n  )[0]\n  let renderedBlockFromProps: JSX.Element | undefined\n  if (renderBlock) {\n    const _props: Omit<BlockRenderProps, 'type'> = Object.defineProperty(\n      {\n        children: <ObjectNode value={value} />,\n        editorElementRef: blockRef,\n        focused,\n        path: blockPath,\n        schemaType,\n        selected,\n        value: block,\n      },\n      'type',\n      {\n        enumerable: false,\n        get() {\n          console.warn(\n            \"Property 'type' is deprecated, use 'schemaType' instead.\",\n          )\n          return schemaType\n        },\n      },\n    )\n    renderedBlockFromProps = renderBlock(_props as BlockRenderProps)\n  }\n  return (\n    <div key={element._key} {...attributes} className={className}>\n      {children}\n      <DraggableBlock element={element} readOnly={readOnly} blockRef={blockRef}>\n        {renderedBlockFromProps && (\n          <div ref={blockRef} contentEditable={false}>\n            {renderedBlockFromProps}\n          </div>\n        )}\n        {!renderedBlockFromProps && (\n          <DefaultBlockObject selected={selected}>\n            <ObjectNode value={value} />\n          </DefaultBlockObject>\n        )}\n      </DraggableBlock>\n    </div>\n  )\n}\n\nElement.displayName = 'Element'\n","import {createContext, useContext} from 'react'\nimport type {PortableTextEditor} from '../PortableTextEditor'\n\n/**\n * A React context for sharing the editor object.\n */\nexport const PortableTextEditorContext =\n  createContext<PortableTextEditor | null>(null)\n\n/**\n * @deprecated Use `useEditor` to get the current editor instance.\n * @public\n * Get the current editor object from the React context.\n */\nexport const usePortableTextEditor = (): PortableTextEditor => {\n  const editor = useContext(PortableTextEditorContext)\n\n  if (!editor) {\n    throw new Error(\n      `The \\`usePortableTextEditor\\` hook must be used inside the <PortableTextEditor> component's context.`,\n    )\n  }\n\n  return editor\n}\n","import type {PortableTextObject} from '@sanity/types'\nimport {useCallback, type ReactNode} from 'react'\n\ntype Props = {\n  annotation: PortableTextObject\n  children: ReactNode\n}\nexport function DefaultAnnotation(props: Props) {\n  const handleClick = useCallback(\n    () => alert(JSON.stringify(props.annotation)),\n    [props.annotation],\n  )\n  return (\n    <span style={{color: 'blue'}} onClick={handleClick}>\n      {props.children}\n    </span>\n  )\n}\n\nDefaultAnnotation.displayName = 'DefaultAnnotation'\n","import {Schema} from '@sanity/schema'\n\nexport function compileType(rawType: any) {\n  return Schema.compile({\n    name: 'blockTypeSchema',\n    types: [rawType],\n  }).get(rawType.name)\n}\n","import type {Patch} from '@portabletext/patches'\nimport type {PortableTextBlock} from '@sanity/types'\nimport {Editor} from 'slate'\nimport {assign, emit, setup} from 'xstate'\nimport type {PortableTextSlateEditor} from '../types/editor'\nimport {fromSlateValue} from '../utils/values'\nimport {KEY_TO_VALUE_ELEMENT} from '../utils/weakMaps'\nimport type {EditorSchema} from './define-schema'\n\nconst FLUSH_PATCHES_THROTTLED_MS = process.env.NODE_ENV === 'test' ? 500 : 1000\n\n/**\n * Makes sure editor mutation events are debounced\n */\nexport const mutationMachine = setup({\n  types: {\n    context: {} as {\n      pendingPatches: Array<Patch>\n      schema: EditorSchema\n      slateEditor: PortableTextSlateEditor\n    },\n    events: {} as {type: 'patch'; patch: Patch},\n    input: {} as {\n      schema: EditorSchema\n      slateEditor: PortableTextSlateEditor\n    },\n    emitted: {} as\n      | {\n          type: 'has pending patches'\n        }\n      | {\n          type: 'mutation'\n          patches: Array<Patch>\n          snapshot: Array<PortableTextBlock> | undefined\n        },\n  },\n  actions: {\n    'emit has pending patches': emit({type: 'has pending patches'}),\n    'emit mutation': emit(({context}) => ({\n      type: 'mutation' as const,\n      patches: context.pendingPatches,\n      snapshot: fromSlateValue(\n        context.slateEditor.children,\n        context.schema.block.name,\n        KEY_TO_VALUE_ELEMENT.get(context.slateEditor),\n      ),\n    })),\n    'clear pending patches': assign({\n      pendingPatches: [],\n    }),\n    'defer patch': assign({\n      pendingPatches: ({context, event}) => [\n        ...context.pendingPatches,\n        event.patch,\n      ],\n    }),\n  },\n  guards: {\n    'slate is normalizing': ({context}) =>\n      Editor.isNormalizing(context.slateEditor),\n  },\n}).createMachine({\n  id: 'mutation',\n  context: ({input}) => ({\n    pendingPatches: [],\n    schema: input.schema,\n    slateEditor: input.slateEditor,\n  }),\n  initial: 'idle',\n  states: {\n    'idle': {\n      on: {\n        patch: {\n          actions: ['defer patch', 'emit has pending patches'],\n          target: 'has pending patches',\n        },\n      },\n    },\n    'has pending patches': {\n      after: {\n        [FLUSH_PATCHES_THROTTLED_MS]: [\n          {\n            guard: 'slate is normalizing',\n            target: 'idle',\n            actions: ['emit mutation', 'clear pending patches'],\n          },\n          {\n            reenter: true,\n          },\n        ],\n      },\n      on: {\n        patch: {\n          actions: ['defer patch'],\n          reenter: true,\n        },\n      },\n    },\n  },\n})\n","import {insert, set, setIfMissing, unset} from '@portabletext/patches'\nimport {\n  isPortableTextTextBlock,\n  type PortableTextBlock,\n  type PortableTextSpan,\n  type PortableTextTextBlock,\n} from '@sanity/types'\nimport {flatten, isPlainObject, uniq} from 'lodash'\nimport type {\n  InvalidValueResolution,\n  PortableTextMemberSchemaTypes,\n} from '../types/editor'\n\nexport interface Validation {\n  valid: boolean\n  resolution: InvalidValueResolution | null\n  value: PortableTextBlock[] | undefined\n}\n\nexport function validateValue(\n  value: PortableTextBlock[] | undefined,\n  types: PortableTextMemberSchemaTypes,\n  keyGenerator: () => string,\n): Validation {\n  let resolution: InvalidValueResolution | null = null\n  let valid = true\n  const validChildTypes = [\n    types.span.name,\n    ...types.inlineObjects.map((t) => t.name),\n  ]\n  const validBlockTypes = [\n    types.block.name,\n    ...types.blockObjects.map((t) => t.name),\n  ]\n\n  // Undefined is allowed\n  if (value === undefined) {\n    return {valid: true, resolution: null, value}\n  }\n  // Only lengthy arrays are allowed in the editor.\n  if (!Array.isArray(value) || value.length === 0) {\n    return {\n      valid: false,\n      resolution: {\n        patches: [unset([])],\n        description:\n          'Editor value must be an array of Portable Text blocks, or undefined.',\n        action: 'Unset the value',\n        item: value,\n\n        i18n: {\n          description:\n            'inputs.portable-text.invalid-value.not-an-array.description',\n          action: 'inputs.portable-text.invalid-value.not-an-array.action',\n        },\n      },\n      value,\n    }\n  }\n  if (\n    value.some((blk: PortableTextBlock, index: number): boolean => {\n      // Is the block an object?\n      if (!isPlainObject(blk)) {\n        resolution = {\n          patches: [unset([index])],\n          description: `Block must be an object, got ${String(blk)}`,\n          action: `Unset invalid item`,\n          item: blk,\n\n          i18n: {\n            description:\n              'inputs.portable-text.invalid-value.not-an-object.description',\n            action: 'inputs.portable-text.invalid-value.not-an-object.action',\n            values: {index},\n          },\n        }\n        return true\n      }\n      // Test that every block has a _key prop\n      if (!blk._key || typeof blk._key !== 'string') {\n        resolution = {\n          patches: [set({...blk, _key: keyGenerator()}, [index])],\n          description: `Block at index ${index} is missing required _key.`,\n          action: 'Set the block with a random _key value',\n          item: blk,\n\n          i18n: {\n            description:\n              'inputs.portable-text.invalid-value.missing-key.description',\n            action: 'inputs.portable-text.invalid-value.missing-key.action',\n            values: {index},\n          },\n        }\n        return true\n      }\n      // Test that every block has valid _type\n      if (!blk._type || !validBlockTypes.includes(blk._type)) {\n        // Special case where block type is set to default 'block', but the block type is named something else according to the schema.\n        if (blk._type === 'block') {\n          const currentBlockTypeName = types.block.name\n          resolution = {\n            patches: [\n              set({...blk, _type: currentBlockTypeName}, [{_key: blk._key}]),\n            ],\n            description: `Block with _key '${blk._key}' has invalid type name '${blk._type}'. According to the schema, the block type name is '${currentBlockTypeName}'`,\n            action: `Use type '${currentBlockTypeName}'`,\n            item: blk,\n\n            i18n: {\n              description:\n                'inputs.portable-text.invalid-value.incorrect-block-type.description',\n              action:\n                'inputs.portable-text.invalid-value.incorrect-block-type.action',\n              values: {key: blk._key, expectedTypeName: currentBlockTypeName},\n            },\n          }\n          return true\n        }\n\n        // If the block has no `_type`, but aside from that is a valid Portable Text block\n        if (\n          !blk._type &&\n          isPortableTextTextBlock({...blk, _type: types.block.name})\n        ) {\n          resolution = {\n            patches: [\n              set({...blk, _type: types.block.name}, [{_key: blk._key}]),\n            ],\n            description: `Block with _key '${blk._key}' is missing a type name. According to the schema, the block type name is '${types.block.name}'`,\n            action: `Use type '${types.block.name}'`,\n            item: blk,\n\n            i18n: {\n              description:\n                'inputs.portable-text.invalid-value.missing-block-type.description',\n              action:\n                'inputs.portable-text.invalid-value.missing-block-type.action',\n              values: {key: blk._key, expectedTypeName: types.block.name},\n            },\n          }\n          return true\n        }\n\n        if (!blk._type) {\n          resolution = {\n            patches: [unset([{_key: blk._key}])],\n            description: `Block with _key '${blk._key}' is missing an _type property`,\n            action: 'Remove the block',\n            item: blk,\n\n            i18n: {\n              description:\n                'inputs.portable-text.invalid-value.missing-type.description',\n              action: 'inputs.portable-text.invalid-value.missing-type.action',\n              values: {key: blk._key},\n            },\n          }\n          return true\n        }\n\n        resolution = {\n          patches: [unset([{_key: blk._key}])],\n          description: `Block with _key '${blk._key}' has invalid _type '${blk._type}'`,\n          action: 'Remove the block',\n          item: blk,\n\n          i18n: {\n            description:\n              'inputs.portable-text.invalid-value.disallowed-type.description',\n            action: 'inputs.portable-text.invalid-value.disallowed-type.action',\n            values: {key: blk._key, typeName: blk._type},\n          },\n        }\n        return true\n      }\n\n      // Test regular text blocks\n      if (blk._type === types.block.name) {\n        const textBlock = blk as PortableTextTextBlock\n        // Test that it has a valid children property (array)\n        if (textBlock.children && !Array.isArray(textBlock.children)) {\n          resolution = {\n            patches: [set({children: []}, [{_key: textBlock._key}])],\n            description: `Text block with _key '${textBlock._key}' has a invalid required property 'children'.`,\n            action: 'Reset the children property',\n            item: textBlock,\n\n            i18n: {\n              description:\n                'inputs.portable-text.invalid-value.missing-or-invalid-children.description',\n              action:\n                'inputs.portable-text.invalid-value.missing-or-invalid-children.action',\n              values: {key: textBlock._key},\n            },\n          }\n          return true\n        }\n        // Test that children is set and lengthy\n        if (\n          textBlock.children === undefined ||\n          (Array.isArray(textBlock.children) && textBlock.children.length === 0)\n        ) {\n          const newSpan = {\n            _type: types.span.name,\n            _key: keyGenerator(),\n            text: '',\n            marks: [],\n          }\n          resolution = {\n            autoResolve: true,\n            patches: [\n              setIfMissing([], [{_key: blk._key}, 'children']),\n              insert([newSpan], 'after', [{_key: blk._key}, 'children', 0]),\n            ],\n            description: `Children for text block with _key '${blk._key}' is empty.`,\n            action: 'Insert an empty text',\n            item: blk,\n\n            i18n: {\n              description:\n                'inputs.portable-text.invalid-value.empty-children.description',\n              action:\n                'inputs.portable-text.invalid-value.empty-children.action',\n              values: {key: blk._key},\n            },\n          }\n          return true\n        }\n\n        const allUsedMarks = uniq(\n          flatten(\n            textBlock.children\n              .filter((cld) => cld._type === types.span.name)\n              .map((cld) => cld.marks || []),\n          ) as string[],\n        )\n\n        // Test that all markDefs are in use (remove orphaned markDefs)\n        if (Array.isArray(blk.markDefs) && blk.markDefs.length > 0) {\n          const unusedMarkDefs: string[] = uniq(\n            blk.markDefs\n              .map((def) => def._key)\n              .filter((key) => !allUsedMarks.includes(key)),\n          )\n          if (unusedMarkDefs.length > 0) {\n            resolution = {\n              autoResolve: true,\n              patches: unusedMarkDefs.map((markDefKey) =>\n                unset([{_key: blk._key}, 'markDefs', {_key: markDefKey}]),\n              ),\n              description: `Block contains orphaned data (unused mark definitions): ${unusedMarkDefs.join(\n                ', ',\n              )}.`,\n              action: 'Remove unused mark definition item',\n              item: blk,\n              i18n: {\n                description:\n                  'inputs.portable-text.invalid-value.orphaned-mark-defs.description',\n                action:\n                  'inputs.portable-text.invalid-value.orphaned-mark-defs.action',\n                values: {\n                  key: blk._key,\n                  unusedMarkDefs: unusedMarkDefs.map((m) => m.toString()),\n                },\n              },\n            }\n            return true\n          }\n        }\n\n        // Test that every annotation mark used has a definition\n        const annotationMarks = allUsedMarks.filter(\n          (mark) => !types.decorators.map((dec) => dec.value).includes(mark),\n        )\n        const orphanedMarks = annotationMarks.filter(\n          (mark) =>\n            textBlock.markDefs === undefined ||\n            !textBlock.markDefs.find((def) => def._key === mark),\n        )\n        if (orphanedMarks.length > 0) {\n          const spanChildren = textBlock.children.filter(\n            (cld) =>\n              cld._type === types.span.name &&\n              Array.isArray(cld.marks) &&\n              cld.marks.some((mark) => orphanedMarks.includes(mark)),\n          ) as PortableTextSpan[]\n          if (spanChildren) {\n            const orphaned = orphanedMarks.join(', ')\n            resolution = {\n              autoResolve: true,\n              patches: spanChildren.map((child) => {\n                return set(\n                  (child.marks || []).filter(\n                    (cMrk) => !orphanedMarks.includes(cMrk),\n                  ),\n                  [{_key: blk._key}, 'children', {_key: child._key}, 'marks'],\n                )\n              }),\n              description: `Block with _key '${blk._key}' contains marks (${orphaned}) not supported by the current content model.`,\n              action: 'Remove invalid marks',\n              item: blk,\n\n              i18n: {\n                description:\n                  'inputs.portable-text.invalid-value.orphaned-marks.description',\n                action:\n                  'inputs.portable-text.invalid-value.orphaned-marks.action',\n                values: {\n                  key: blk._key,\n                  orphanedMarks: orphanedMarks.map((m) => m.toString()),\n                },\n              },\n            }\n            return true\n          }\n        }\n\n        // Test every child\n        if (\n          textBlock.children.some((child, cIndex: number) => {\n            if (!isPlainObject(child)) {\n              resolution = {\n                patches: [unset([{_key: blk._key}, 'children', cIndex])],\n                description: `Child at index '${cIndex}' in block with key '${blk._key}' is not an object.`,\n                action: 'Remove the item',\n                item: blk,\n\n                i18n: {\n                  description:\n                    'inputs.portable-text.invalid-value.non-object-child.description',\n                  action:\n                    'inputs.portable-text.invalid-value.non-object-child.action',\n                  values: {key: blk._key, index: cIndex},\n                },\n              }\n              return true\n            }\n\n            if (!child._key || typeof child._key !== 'string') {\n              const newChild = {...child, _key: keyGenerator()}\n              resolution = {\n                autoResolve: true,\n                patches: [\n                  set(newChild, [{_key: blk._key}, 'children', cIndex]),\n                ],\n                description: `Child at index ${cIndex} is missing required _key in block with _key ${blk._key}.`,\n                action: 'Set a new random _key on the object',\n                item: blk,\n\n                i18n: {\n                  description:\n                    'inputs.portable-text.invalid-value.missing-child-key.description',\n                  action:\n                    'inputs.portable-text.invalid-value.missing-child-key.action',\n                  values: {key: blk._key, index: cIndex},\n                },\n              }\n              return true\n            }\n\n            // Verify that children have valid types\n            if (!child._type) {\n              resolution = {\n                patches: [\n                  unset([{_key: blk._key}, 'children', {_key: child._key}]),\n                ],\n                description: `Child with _key '${child._key}' in block with key '${blk._key}' is missing '_type' property.`,\n                action: 'Remove the object',\n                item: blk,\n\n                i18n: {\n                  description:\n                    'inputs.portable-text.invalid-value.missing-child-type.description',\n                  action:\n                    'inputs.portable-text.invalid-value.missing-child-type.action',\n                  values: {key: blk._key, childKey: child._key},\n                },\n              }\n              return true\n            }\n\n            if (!validChildTypes.includes(child._type)) {\n              resolution = {\n                patches: [\n                  unset([{_key: blk._key}, 'children', {_key: child._key}]),\n                ],\n                description: `Child with _key '${child._key}' in block with key '${blk._key}' has invalid '_type' property (${child._type}).`,\n                action: 'Remove the object',\n                item: blk,\n\n                i18n: {\n                  description:\n                    'inputs.portable-text.invalid-value.disallowed-child-type.description',\n                  action:\n                    'inputs.portable-text.invalid-value.disallowed-child-type.action',\n                  values: {\n                    key: blk._key,\n                    childKey: child._key,\n                    childType: child._type,\n                  },\n                },\n              }\n              return true\n            }\n\n            // Verify that spans have .text property that is a string\n            if (\n              child._type === types.span.name &&\n              typeof child.text !== 'string'\n            ) {\n              resolution = {\n                patches: [\n                  set({...child, text: ''}, [\n                    {_key: blk._key},\n                    'children',\n                    {_key: child._key},\n                  ]),\n                ],\n                description: `Child with _key '${child._key}' in block with key '${blk._key}' has missing or invalid text property!`,\n                action: `Write an empty text property to the object`,\n                item: blk,\n\n                i18n: {\n                  description:\n                    'inputs.portable-text.invalid-value.invalid-span-text.description',\n                  action:\n                    'inputs.portable-text.invalid-value.invalid-span-text.action',\n                  values: {key: blk._key, childKey: child._key},\n                },\n              }\n              return true\n            }\n            return false\n          })\n        ) {\n          valid = false\n        }\n      }\n      return false\n    })\n  ) {\n    valid = false\n  }\n  return {valid, resolution, value}\n}\n","import type {Editor} from 'slate'\nimport {IS_PROCESSING_REMOTE_CHANGES} from './weakMaps'\n\nexport function withRemoteChanges(editor: Editor, fn: () => void): void {\n  const prev = isChangingRemotely(editor) || false\n  IS_PROCESSING_REMOTE_CHANGES.set(editor, true)\n  fn()\n  IS_PROCESSING_REMOTE_CHANGES.set(editor, prev)\n}\n\nexport function isChangingRemotely(editor: Editor): boolean | undefined {\n  return IS_PROCESSING_REMOTE_CHANGES.get(editor)\n}\n","import type {Editor} from 'slate'\n\nexport const PATCHING: WeakMap<Editor, boolean | undefined> = new WeakMap()\n\nexport function withoutPatching(editor: Editor, fn: () => void): void {\n  const prev = isPatching(editor)\n  PATCHING.set(editor, false)\n  fn()\n  PATCHING.set(editor, prev)\n}\n\nexport function isPatching(editor: Editor): boolean | undefined {\n  return PATCHING.get(editor)\n}\n","function cloneDiff(diff2) {\n  const [type, patch] = diff2;\n  return [type, patch];\n}\nfunction getCommonOverlap(textA, textB) {\n  let text1 = textA, text2 = textB;\n  const text1Length = text1.length, text2Length = text2.length;\n  if (text1Length === 0 || text2Length === 0)\n    return 0;\n  text1Length > text2Length ? text1 = text1.substring(text1Length - text2Length) : text1Length < text2Length && (text2 = text2.substring(0, text1Length));\n  const textLength = Math.min(text1Length, text2Length);\n  if (text1 === text2)\n    return textLength;\n  let best = 0, length = 1;\n  for (let found = 0; found !== -1; ) {\n    const pattern = text1.substring(textLength - length);\n    if (found = text2.indexOf(pattern), found === -1)\n      return best;\n    length += found, (found === 0 || text1.substring(textLength - length) === text2.substring(0, length)) && (best = length, length++);\n  }\n  return best;\n}\nfunction getCommonPrefix(text1, text2) {\n  if (!text1 || !text2 || text1[0] !== text2[0])\n    return 0;\n  let pointerMin = 0, pointerMax = Math.min(text1.length, text2.length), pointerMid = pointerMax, pointerStart = 0;\n  for (; pointerMin < pointerMid; )\n    text1.substring(pointerStart, pointerMid) === text2.substring(pointerStart, pointerMid) ? (pointerMin = pointerMid, pointerStart = pointerMin) : pointerMax = pointerMid, pointerMid = Math.floor((pointerMax - pointerMin) / 2 + pointerMin);\n  return pointerMid;\n}\nfunction getCommonSuffix(text1, text2) {\n  if (!text1 || !text2 || text1[text1.length - 1] !== text2[text2.length - 1])\n    return 0;\n  let pointerMin = 0, pointerMax = Math.min(text1.length, text2.length), pointerMid = pointerMax, pointerEnd = 0;\n  for (; pointerMin < pointerMid; )\n    text1.substring(text1.length - pointerMid, text1.length - pointerEnd) === text2.substring(text2.length - pointerMid, text2.length - pointerEnd) ? (pointerMin = pointerMid, pointerEnd = pointerMin) : pointerMax = pointerMid, pointerMid = Math.floor((pointerMax - pointerMin) / 2 + pointerMin);\n  return pointerMid;\n}\nfunction isHighSurrogate(char) {\n  const charCode = char.charCodeAt(0);\n  return charCode >= 55296 && charCode <= 56319;\n}\nfunction isLowSurrogate(char) {\n  const charCode = char.charCodeAt(0);\n  return charCode >= 56320 && charCode <= 57343;\n}\nfunction bisect(text1, text2, deadline) {\n  const text1Length = text1.length, text2Length = text2.length, maxD = Math.ceil((text1Length + text2Length) / 2), vOffset = maxD, vLength = 2 * maxD, v1 = new Array(vLength), v2 = new Array(vLength);\n  for (let x = 0; x < vLength; x++)\n    v1[x] = -1, v2[x] = -1;\n  v1[vOffset + 1] = 0, v2[vOffset + 1] = 0;\n  const delta = text1Length - text2Length, front = delta % 2 !== 0;\n  let k1start = 0, k1end = 0, k2start = 0, k2end = 0;\n  for (let d = 0; d < maxD && !(Date.now() > deadline); d++) {\n    for (let k1 = -d + k1start; k1 <= d - k1end; k1 += 2) {\n      const k1Offset = vOffset + k1;\n      let x1;\n      k1 === -d || k1 !== d && v1[k1Offset - 1] < v1[k1Offset + 1] ? x1 = v1[k1Offset + 1] : x1 = v1[k1Offset - 1] + 1;\n      let y1 = x1 - k1;\n      for (; x1 < text1Length && y1 < text2Length && text1.charAt(x1) === text2.charAt(y1); )\n        x1++, y1++;\n      if (v1[k1Offset] = x1, x1 > text1Length)\n        k1end += 2;\n      else if (y1 > text2Length)\n        k1start += 2;\n      else if (front) {\n        const k2Offset = vOffset + delta - k1;\n        if (k2Offset >= 0 && k2Offset < vLength && v2[k2Offset] !== -1) {\n          const x2 = text1Length - v2[k2Offset];\n          if (x1 >= x2)\n            return bisectSplit(text1, text2, x1, y1, deadline);\n        }\n      }\n    }\n    for (let k2 = -d + k2start; k2 <= d - k2end; k2 += 2) {\n      const k2Offset = vOffset + k2;\n      let x2;\n      k2 === -d || k2 !== d && v2[k2Offset - 1] < v2[k2Offset + 1] ? x2 = v2[k2Offset + 1] : x2 = v2[k2Offset - 1] + 1;\n      let y2 = x2 - k2;\n      for (; x2 < text1Length && y2 < text2Length && text1.charAt(text1Length - x2 - 1) === text2.charAt(text2Length - y2 - 1); )\n        x2++, y2++;\n      if (v2[k2Offset] = x2, x2 > text1Length)\n        k2end += 2;\n      else if (y2 > text2Length)\n        k2start += 2;\n      else if (!front) {\n        const k1Offset = vOffset + delta - k2;\n        if (k1Offset >= 0 && k1Offset < vLength && v1[k1Offset] !== -1) {\n          const x1 = v1[k1Offset], y1 = vOffset + x1 - k1Offset;\n          if (x2 = text1Length - x2, x1 >= x2)\n            return bisectSplit(text1, text2, x1, y1, deadline);\n        }\n      }\n    }\n  }\n  return [\n    [DIFF_DELETE, text1],\n    [DIFF_INSERT, text2]\n  ];\n}\nfunction bisectSplit(text1, text2, x, y, deadline) {\n  const text1a = text1.substring(0, x), text2a = text2.substring(0, y), text1b = text1.substring(x), text2b = text2.substring(y), diffs = doDiff(text1a, text2a, { checkLines: !1, deadline }), diffsb = doDiff(text1b, text2b, { checkLines: !1, deadline });\n  return diffs.concat(diffsb);\n}\nfunction findHalfMatch(text1, text2, timeout = 1) {\n  if (timeout <= 0)\n    return null;\n  const longText = text1.length > text2.length ? text1 : text2, shortText = text1.length > text2.length ? text2 : text1;\n  if (longText.length < 4 || shortText.length * 2 < longText.length)\n    return null;\n  const halfMatch1 = halfMatchI(longText, shortText, Math.ceil(longText.length / 4)), halfMatch2 = halfMatchI(longText, shortText, Math.ceil(longText.length / 2));\n  let halfMatch;\n  if (halfMatch1 && halfMatch2)\n    halfMatch = halfMatch1[4].length > halfMatch2[4].length ? halfMatch1 : halfMatch2;\n  else {\n    if (!halfMatch1 && !halfMatch2)\n      return null;\n    halfMatch2 ? halfMatch1 || (halfMatch = halfMatch2) : halfMatch = halfMatch1;\n  }\n  if (!halfMatch)\n    throw new Error(\"Unable to find a half match.\");\n  let text1A, text1B, text2A, text2B;\n  text1.length > text2.length ? (text1A = halfMatch[0], text1B = halfMatch[1], text2A = halfMatch[2], text2B = halfMatch[3]) : (text2A = halfMatch[0], text2B = halfMatch[1], text1A = halfMatch[2], text1B = halfMatch[3]);\n  const midCommon = halfMatch[4];\n  return [text1A, text1B, text2A, text2B, midCommon];\n}\nfunction halfMatchI(longText, shortText, i) {\n  const seed = longText.slice(i, i + Math.floor(longText.length / 4));\n  let j = -1, bestCommon = \"\", bestLongTextA, bestLongTextB, bestShortTextA, bestShortTextB;\n  for (; (j = shortText.indexOf(seed, j + 1)) !== -1; ) {\n    const prefixLength = getCommonPrefix(longText.slice(i), shortText.slice(j)), suffixLength = getCommonSuffix(longText.slice(0, i), shortText.slice(0, j));\n    bestCommon.length < suffixLength + prefixLength && (bestCommon = shortText.slice(j - suffixLength, j) + shortText.slice(j, j + prefixLength), bestLongTextA = longText.slice(0, i - suffixLength), bestLongTextB = longText.slice(i + prefixLength), bestShortTextA = shortText.slice(0, j - suffixLength), bestShortTextB = shortText.slice(j + prefixLength));\n  }\n  return bestCommon.length * 2 >= longText.length ? [\n    bestLongTextA || \"\",\n    bestLongTextB || \"\",\n    bestShortTextA || \"\",\n    bestShortTextB || \"\",\n    bestCommon || \"\"\n  ] : null;\n}\nfunction charsToLines(diffs, lineArray) {\n  for (let x = 0; x < diffs.length; x++) {\n    const chars = diffs[x][1], text = [];\n    for (let y = 0; y < chars.length; y++)\n      text[y] = lineArray[chars.charCodeAt(y)];\n    diffs[x][1] = text.join(\"\");\n  }\n}\nfunction linesToChars(textA, textB) {\n  const lineArray = [], lineHash = {};\n  lineArray[0] = \"\";\n  function diffLinesToMunge(text) {\n    let chars = \"\", lineStart = 0, lineEnd = -1, lineArrayLength = lineArray.length;\n    for (; lineEnd < text.length - 1; ) {\n      lineEnd = text.indexOf(`\n`, lineStart), lineEnd === -1 && (lineEnd = text.length - 1);\n      let line = text.slice(lineStart, lineEnd + 1);\n      (lineHash.hasOwnProperty ? lineHash.hasOwnProperty(line) : lineHash[line] !== void 0) ? chars += String.fromCharCode(lineHash[line]) : (lineArrayLength === maxLines && (line = text.slice(lineStart), lineEnd = text.length), chars += String.fromCharCode(lineArrayLength), lineHash[line] = lineArrayLength, lineArray[lineArrayLength++] = line), lineStart = lineEnd + 1;\n    }\n    return chars;\n  }\n  let maxLines = 4e4;\n  const chars1 = diffLinesToMunge(textA);\n  maxLines = 65535;\n  const chars2 = diffLinesToMunge(textB);\n  return { chars1, chars2, lineArray };\n}\nfunction doLineModeDiff(textA, textB, opts) {\n  let text1 = textA, text2 = textB;\n  const a = linesToChars(text1, text2);\n  text1 = a.chars1, text2 = a.chars2;\n  const linearray = a.lineArray;\n  let diffs = doDiff(text1, text2, {\n    checkLines: !1,\n    deadline: opts.deadline\n  });\n  charsToLines(diffs, linearray), diffs = cleanupSemantic(diffs), diffs.push([DIFF_EQUAL, \"\"]);\n  let pointer = 0, countDelete = 0, countInsert = 0, textDelete = \"\", textInsert = \"\";\n  for (; pointer < diffs.length; ) {\n    switch (diffs[pointer][0]) {\n      case DIFF_INSERT:\n        countInsert++, textInsert += diffs[pointer][1];\n        break;\n      case DIFF_DELETE:\n        countDelete++, textDelete += diffs[pointer][1];\n        break;\n      case DIFF_EQUAL:\n        if (countDelete >= 1 && countInsert >= 1) {\n          diffs.splice(pointer - countDelete - countInsert, countDelete + countInsert), pointer = pointer - countDelete - countInsert;\n          const aa = doDiff(textDelete, textInsert, {\n            checkLines: !1,\n            deadline: opts.deadline\n          });\n          for (let j = aa.length - 1; j >= 0; j--)\n            diffs.splice(pointer, 0, aa[j]);\n          pointer += aa.length;\n        }\n        countInsert = 0, countDelete = 0, textDelete = \"\", textInsert = \"\";\n        break;\n      default:\n        throw new Error(\"Unknown diff operation.\");\n    }\n    pointer++;\n  }\n  return diffs.pop(), diffs;\n}\nfunction computeDiff(text1, text2, opts) {\n  let diffs;\n  if (!text1)\n    return [[DIFF_INSERT, text2]];\n  if (!text2)\n    return [[DIFF_DELETE, text1]];\n  const longtext = text1.length > text2.length ? text1 : text2, shorttext = text1.length > text2.length ? text2 : text1, i = longtext.indexOf(shorttext);\n  if (i !== -1)\n    return diffs = [\n      [DIFF_INSERT, longtext.substring(0, i)],\n      [DIFF_EQUAL, shorttext],\n      [DIFF_INSERT, longtext.substring(i + shorttext.length)]\n    ], text1.length > text2.length && (diffs[0][0] = DIFF_DELETE, diffs[2][0] = DIFF_DELETE), diffs;\n  if (shorttext.length === 1)\n    return [\n      [DIFF_DELETE, text1],\n      [DIFF_INSERT, text2]\n    ];\n  const halfMatch = findHalfMatch(text1, text2);\n  if (halfMatch) {\n    const text1A = halfMatch[0], text1B = halfMatch[1], text2A = halfMatch[2], text2B = halfMatch[3], midCommon = halfMatch[4], diffsA = doDiff(text1A, text2A, opts), diffsB = doDiff(text1B, text2B, opts);\n    return diffsA.concat([[DIFF_EQUAL, midCommon]], diffsB);\n  }\n  return opts.checkLines && text1.length > 100 && text2.length > 100 ? doLineModeDiff(text1, text2, opts) : bisect(text1, text2, opts.deadline);\n}\nvar __defProp$2 = Object.defineProperty, __getOwnPropSymbols$2 = Object.getOwnPropertySymbols, __hasOwnProp$2 = Object.prototype.hasOwnProperty, __propIsEnum$2 = Object.prototype.propertyIsEnumerable, __defNormalProp$2 = (obj, key, value) => key in obj ? __defProp$2(obj, key, { enumerable: !0, configurable: !0, writable: !0, value }) : obj[key] = value, __spreadValues$2 = (a, b) => {\n  for (var prop in b || (b = {}))\n    __hasOwnProp$2.call(b, prop) && __defNormalProp$2(a, prop, b[prop]);\n  if (__getOwnPropSymbols$2)\n    for (var prop of __getOwnPropSymbols$2(b))\n      __propIsEnum$2.call(b, prop) && __defNormalProp$2(a, prop, b[prop]);\n  return a;\n};\nconst DIFF_DELETE = -1, DIFF_INSERT = 1, DIFF_EQUAL = 0;\nfunction diff(textA, textB, opts) {\n  if (textA === null || textB === null)\n    throw new Error(\"Null input. (diff)\");\n  const diffs = doDiff(textA, textB, createInternalOpts(opts || {}));\n  return adjustDiffForSurrogatePairs(diffs), diffs;\n}\nfunction doDiff(textA, textB, options) {\n  let text1 = textA, text2 = textB;\n  if (text1 === text2)\n    return text1 ? [[DIFF_EQUAL, text1]] : [];\n  let commonlength = getCommonPrefix(text1, text2);\n  const commonprefix = text1.substring(0, commonlength);\n  text1 = text1.substring(commonlength), text2 = text2.substring(commonlength), commonlength = getCommonSuffix(text1, text2);\n  const commonsuffix = text1.substring(text1.length - commonlength);\n  text1 = text1.substring(0, text1.length - commonlength), text2 = text2.substring(0, text2.length - commonlength);\n  let diffs = computeDiff(text1, text2, options);\n  return commonprefix && diffs.unshift([DIFF_EQUAL, commonprefix]), commonsuffix && diffs.push([DIFF_EQUAL, commonsuffix]), diffs = cleanupMerge(diffs), diffs;\n}\nfunction createDeadLine(timeout) {\n  let t = 1;\n  return typeof timeout < \"u\" && (t = timeout <= 0 ? Number.MAX_VALUE : timeout), Date.now() + t * 1e3;\n}\nfunction createInternalOpts(opts) {\n  return __spreadValues$2({\n    checkLines: !0,\n    deadline: createDeadLine(opts.timeout || 1)\n  }, opts);\n}\nfunction combineChar(data, char, dir) {\n  return dir === 1 ? data + char : char + data;\n}\nfunction splitChar(data, dir) {\n  return dir === 1 ? [data.substring(0, data.length - 1), data[data.length - 1]] : [data.substring(1), data[0]];\n}\nfunction hasSharedChar(diffs, i, j, dir) {\n  return dir === 1 ? diffs[i][1][diffs[i][1].length - 1] === diffs[j][1][diffs[j][1].length - 1] : diffs[i][1][0] === diffs[j][1][0];\n}\nfunction deisolateChar(diffs, i, dir) {\n  const inv = dir === 1 ? -1 : 1;\n  let insertIdx = null, deleteIdx = null, j = i + dir;\n  for (; j >= 0 && j < diffs.length && (insertIdx === null || deleteIdx === null); j += dir) {\n    const [op, text2] = diffs[j];\n    if (text2.length !== 0) {\n      if (op === DIFF_INSERT) {\n        insertIdx === null && (insertIdx = j);\n        continue;\n      } else if (op === DIFF_DELETE) {\n        deleteIdx === null && (deleteIdx = j);\n        continue;\n      } else if (op === DIFF_EQUAL) {\n        if (insertIdx === null && deleteIdx === null) {\n          const [rest, char2] = splitChar(diffs[i][1], dir);\n          diffs[i][1] = rest, diffs[j][1] = combineChar(diffs[j][1], char2, inv);\n          return;\n        }\n        break;\n      }\n    }\n  }\n  if (insertIdx !== null && deleteIdx !== null && hasSharedChar(diffs, insertIdx, deleteIdx, dir)) {\n    const [insertText, insertChar] = splitChar(diffs[insertIdx][1], inv), [deleteText] = splitChar(diffs[deleteIdx][1], inv);\n    diffs[insertIdx][1] = insertText, diffs[deleteIdx][1] = deleteText, diffs[i][1] = combineChar(diffs[i][1], insertChar, dir);\n    return;\n  }\n  const [text, char] = splitChar(diffs[i][1], dir);\n  diffs[i][1] = text, insertIdx === null ? (diffs.splice(j, 0, [DIFF_INSERT, char]), deleteIdx !== null && deleteIdx >= j && deleteIdx++) : diffs[insertIdx][1] = combineChar(diffs[insertIdx][1], char, inv), deleteIdx === null ? diffs.splice(j, 0, [DIFF_DELETE, char]) : diffs[deleteIdx][1] = combineChar(diffs[deleteIdx][1], char, inv);\n}\nfunction adjustDiffForSurrogatePairs(diffs) {\n  for (let i = 0; i < diffs.length; i++) {\n    const [diffType, diffText] = diffs[i];\n    if (diffText.length === 0) continue;\n    const firstChar = diffText[0], lastChar = diffText[diffText.length - 1];\n    isHighSurrogate(lastChar) && diffType === DIFF_EQUAL && deisolateChar(diffs, i, 1), isLowSurrogate(firstChar) && diffType === DIFF_EQUAL && deisolateChar(diffs, i, -1);\n  }\n  for (let i = 0; i < diffs.length; i++)\n    diffs[i][1].length === 0 && diffs.splice(i, 1);\n}\nfunction cleanupSemantic(rawDiffs) {\n  let diffs = rawDiffs.map((diff2) => cloneDiff(diff2)), hasChanges = !1;\n  const equalities = [];\n  let equalitiesLength = 0, lastEquality = null, pointer = 0, lengthInsertions1 = 0, lengthDeletions1 = 0, lengthInsertions2 = 0, lengthDeletions2 = 0;\n  for (; pointer < diffs.length; )\n    diffs[pointer][0] === DIFF_EQUAL ? (equalities[equalitiesLength++] = pointer, lengthInsertions1 = lengthInsertions2, lengthDeletions1 = lengthDeletions2, lengthInsertions2 = 0, lengthDeletions2 = 0, lastEquality = diffs[pointer][1]) : (diffs[pointer][0] === DIFF_INSERT ? lengthInsertions2 += diffs[pointer][1].length : lengthDeletions2 += diffs[pointer][1].length, lastEquality && lastEquality.length <= Math.max(lengthInsertions1, lengthDeletions1) && lastEquality.length <= Math.max(lengthInsertions2, lengthDeletions2) && (diffs.splice(equalities[equalitiesLength - 1], 0, [DIFF_DELETE, lastEquality]), diffs[equalities[equalitiesLength - 1] + 1][0] = DIFF_INSERT, equalitiesLength--, equalitiesLength--, pointer = equalitiesLength > 0 ? equalities[equalitiesLength - 1] : -1, lengthInsertions1 = 0, lengthDeletions1 = 0, lengthInsertions2 = 0, lengthDeletions2 = 0, lastEquality = null, hasChanges = !0)), pointer++;\n  for (hasChanges && (diffs = cleanupMerge(diffs)), diffs = cleanupSemanticLossless(diffs), pointer = 1; pointer < diffs.length; ) {\n    if (diffs[pointer - 1][0] === DIFF_DELETE && diffs[pointer][0] === DIFF_INSERT) {\n      const deletion = diffs[pointer - 1][1], insertion = diffs[pointer][1], overlapLength1 = getCommonOverlap(deletion, insertion), overlapLength2 = getCommonOverlap(insertion, deletion);\n      overlapLength1 >= overlapLength2 ? (overlapLength1 >= deletion.length / 2 || overlapLength1 >= insertion.length / 2) && (diffs.splice(pointer, 0, [DIFF_EQUAL, insertion.substring(0, overlapLength1)]), diffs[pointer - 1][1] = deletion.substring(0, deletion.length - overlapLength1), diffs[pointer + 1][1] = insertion.substring(overlapLength1), pointer++) : (overlapLength2 >= deletion.length / 2 || overlapLength2 >= insertion.length / 2) && (diffs.splice(pointer, 0, [DIFF_EQUAL, deletion.substring(0, overlapLength2)]), diffs[pointer - 1][0] = DIFF_INSERT, diffs[pointer - 1][1] = insertion.substring(0, insertion.length - overlapLength2), diffs[pointer + 1][0] = DIFF_DELETE, diffs[pointer + 1][1] = deletion.substring(overlapLength2), pointer++), pointer++;\n    }\n    pointer++;\n  }\n  return diffs;\n}\nconst nonAlphaNumericRegex = /[^a-zA-Z0-9]/, whitespaceRegex = /\\s/, linebreakRegex = /[\\r\\n]/, blanklineEndRegex = /\\n\\r?\\n$/, blanklineStartRegex = /^\\r?\\n\\r?\\n/;\nfunction cleanupSemanticLossless(rawDiffs) {\n  const diffs = rawDiffs.map((diff2) => cloneDiff(diff2));\n  function diffCleanupSemanticScore(one, two) {\n    if (!one || !two)\n      return 6;\n    const char1 = one.charAt(one.length - 1), char2 = two.charAt(0), nonAlphaNumeric1 = char1.match(nonAlphaNumericRegex), nonAlphaNumeric2 = char2.match(nonAlphaNumericRegex), whitespace1 = nonAlphaNumeric1 && char1.match(whitespaceRegex), whitespace2 = nonAlphaNumeric2 && char2.match(whitespaceRegex), lineBreak1 = whitespace1 && char1.match(linebreakRegex), lineBreak2 = whitespace2 && char2.match(linebreakRegex), blankLine1 = lineBreak1 && one.match(blanklineEndRegex), blankLine2 = lineBreak2 && two.match(blanklineStartRegex);\n    return blankLine1 || blankLine2 ? 5 : lineBreak1 || lineBreak2 ? 4 : nonAlphaNumeric1 && !whitespace1 && whitespace2 ? 3 : whitespace1 || whitespace2 ? 2 : nonAlphaNumeric1 || nonAlphaNumeric2 ? 1 : 0;\n  }\n  let pointer = 1;\n  for (; pointer < diffs.length - 1; ) {\n    if (diffs[pointer - 1][0] === DIFF_EQUAL && diffs[pointer + 1][0] === DIFF_EQUAL) {\n      let equality1 = diffs[pointer - 1][1], edit = diffs[pointer][1], equality2 = diffs[pointer + 1][1];\n      const commonOffset = getCommonSuffix(equality1, edit);\n      if (commonOffset) {\n        const commonString = edit.substring(edit.length - commonOffset);\n        equality1 = equality1.substring(0, equality1.length - commonOffset), edit = commonString + edit.substring(0, edit.length - commonOffset), equality2 = commonString + equality2;\n      }\n      let bestEquality1 = equality1, bestEdit = edit, bestEquality2 = equality2, bestScore = diffCleanupSemanticScore(equality1, edit) + diffCleanupSemanticScore(edit, equality2);\n      for (; edit.charAt(0) === equality2.charAt(0); ) {\n        equality1 += edit.charAt(0), edit = edit.substring(1) + equality2.charAt(0), equality2 = equality2.substring(1);\n        const score = diffCleanupSemanticScore(equality1, edit) + diffCleanupSemanticScore(edit, equality2);\n        score >= bestScore && (bestScore = score, bestEquality1 = equality1, bestEdit = edit, bestEquality2 = equality2);\n      }\n      diffs[pointer - 1][1] !== bestEquality1 && (bestEquality1 ? diffs[pointer - 1][1] = bestEquality1 : (diffs.splice(pointer - 1, 1), pointer--), diffs[pointer][1] = bestEdit, bestEquality2 ? diffs[pointer + 1][1] = bestEquality2 : (diffs.splice(pointer + 1, 1), pointer--));\n    }\n    pointer++;\n  }\n  return diffs;\n}\nfunction cleanupMerge(rawDiffs) {\n  let diffs = rawDiffs.map((diff2) => cloneDiff(diff2));\n  diffs.push([DIFF_EQUAL, \"\"]);\n  let pointer = 0, countDelete = 0, countInsert = 0, textDelete = \"\", textInsert = \"\", commonlength;\n  for (; pointer < diffs.length; )\n    switch (diffs[pointer][0]) {\n      case DIFF_INSERT:\n        countInsert++, textInsert += diffs[pointer][1], pointer++;\n        break;\n      case DIFF_DELETE:\n        countDelete++, textDelete += diffs[pointer][1], pointer++;\n        break;\n      case DIFF_EQUAL:\n        countDelete + countInsert > 1 ? (countDelete !== 0 && countInsert !== 0 && (commonlength = getCommonPrefix(textInsert, textDelete), commonlength !== 0 && (pointer - countDelete - countInsert > 0 && diffs[pointer - countDelete - countInsert - 1][0] === DIFF_EQUAL ? diffs[pointer - countDelete - countInsert - 1][1] += textInsert.substring(\n          0,\n          commonlength\n        ) : (diffs.splice(0, 0, [DIFF_EQUAL, textInsert.substring(0, commonlength)]), pointer++), textInsert = textInsert.substring(commonlength), textDelete = textDelete.substring(commonlength)), commonlength = getCommonSuffix(textInsert, textDelete), commonlength !== 0 && (diffs[pointer][1] = textInsert.substring(textInsert.length - commonlength) + diffs[pointer][1], textInsert = textInsert.substring(0, textInsert.length - commonlength), textDelete = textDelete.substring(0, textDelete.length - commonlength))), pointer -= countDelete + countInsert, diffs.splice(pointer, countDelete + countInsert), textDelete.length && (diffs.splice(pointer, 0, [DIFF_DELETE, textDelete]), pointer++), textInsert.length && (diffs.splice(pointer, 0, [DIFF_INSERT, textInsert]), pointer++), pointer++) : pointer !== 0 && diffs[pointer - 1][0] === DIFF_EQUAL ? (diffs[pointer - 1][1] += diffs[pointer][1], diffs.splice(pointer, 1)) : pointer++, countInsert = 0, countDelete = 0, textDelete = \"\", textInsert = \"\";\n        break;\n      default:\n        throw new Error(\"Unknown diff operation\");\n    }\n  diffs[diffs.length - 1][1] === \"\" && diffs.pop();\n  let hasChanges = !1;\n  for (pointer = 1; pointer < diffs.length - 1; )\n    diffs[pointer - 1][0] === DIFF_EQUAL && diffs[pointer + 1][0] === DIFF_EQUAL && (diffs[pointer][1].substring(diffs[pointer][1].length - diffs[pointer - 1][1].length) === diffs[pointer - 1][1] ? (diffs[pointer][1] = diffs[pointer - 1][1] + diffs[pointer][1].substring(0, diffs[pointer][1].length - diffs[pointer - 1][1].length), diffs[pointer + 1][1] = diffs[pointer - 1][1] + diffs[pointer + 1][1], diffs.splice(pointer - 1, 1), hasChanges = !0) : diffs[pointer][1].substring(0, diffs[pointer + 1][1].length) === diffs[pointer + 1][1] && (diffs[pointer - 1][1] += diffs[pointer + 1][1], diffs[pointer][1] = diffs[pointer][1].substring(diffs[pointer + 1][1].length) + diffs[pointer + 1][1], diffs.splice(pointer + 1, 1), hasChanges = !0)), pointer++;\n  return hasChanges && (diffs = cleanupMerge(diffs)), diffs;\n}\nfunction trueCount(...args) {\n  return args.reduce((n, bool) => n + (bool ? 1 : 0), 0);\n}\nfunction cleanupEfficiency(rawDiffs, editCost = 4) {\n  let diffs = rawDiffs.map((diff2) => cloneDiff(diff2)), hasChanges = !1;\n  const equalities = [];\n  let equalitiesLength = 0, lastEquality = null, pointer = 0, preIns = !1, preDel = !1, postIns = !1, postDel = !1;\n  for (; pointer < diffs.length; )\n    diffs[pointer][0] === DIFF_EQUAL ? (diffs[pointer][1].length < editCost && (postIns || postDel) ? (equalities[equalitiesLength++] = pointer, preIns = postIns, preDel = postDel, lastEquality = diffs[pointer][1]) : (equalitiesLength = 0, lastEquality = null), postIns = !1, postDel = !1) : (diffs[pointer][0] === DIFF_DELETE ? postDel = !0 : postIns = !0, lastEquality && (preIns && preDel && postIns && postDel || lastEquality.length < editCost / 2 && trueCount(preIns, preDel, postIns, postDel) === 3) && (diffs.splice(equalities[equalitiesLength - 1], 0, [DIFF_DELETE, lastEquality]), diffs[equalities[equalitiesLength - 1] + 1][0] = DIFF_INSERT, equalitiesLength--, lastEquality = null, preIns && preDel ? (postIns = !0, postDel = !0, equalitiesLength = 0) : (equalitiesLength--, pointer = equalitiesLength > 0 ? equalities[equalitiesLength - 1] : -1, postIns = !1, postDel = !1), hasChanges = !0)), pointer++;\n  return hasChanges && (diffs = cleanupMerge(diffs)), diffs;\n}\nvar __defProp$1 = Object.defineProperty, __getOwnPropSymbols$1 = Object.getOwnPropertySymbols, __hasOwnProp$1 = Object.prototype.hasOwnProperty, __propIsEnum$1 = Object.prototype.propertyIsEnumerable, __defNormalProp$1 = (obj, key, value) => key in obj ? __defProp$1(obj, key, { enumerable: !0, configurable: !0, writable: !0, value }) : obj[key] = value, __spreadValues$1 = (a, b) => {\n  for (var prop in b || (b = {}))\n    __hasOwnProp$1.call(b, prop) && __defNormalProp$1(a, prop, b[prop]);\n  if (__getOwnPropSymbols$1)\n    for (var prop of __getOwnPropSymbols$1(b))\n      __propIsEnum$1.call(b, prop) && __defNormalProp$1(a, prop, b[prop]);\n  return a;\n};\nconst DEFAULT_OPTIONS = {\n  /**\n   * At what point is no match declared (0.0 = perfection, 1.0 = very loose).\n   */\n  threshold: 0.5,\n  /**\n   * How far to search for a match (0 = exact location, 1000+ = broad match).\n   * A match this many characters away from the expected location will add\n   * 1.0 to the score (0.0 is a perfect match).\n   */\n  distance: 1e3\n};\nfunction applyDefaults(options) {\n  return __spreadValues$1(__spreadValues$1({}, DEFAULT_OPTIONS), options);\n}\nconst MAX_BITS$1 = 32;\nfunction bitap(text, pattern, loc, opts = {}) {\n  if (pattern.length > MAX_BITS$1)\n    throw new Error(\"Pattern too long for this browser.\");\n  const options = applyDefaults(opts), s = getAlphabetFromPattern(pattern);\n  function getBitapScore(e, x) {\n    const accuracy = e / pattern.length, proximity = Math.abs(loc - x);\n    return options.distance ? accuracy + proximity / options.distance : proximity ? 1 : accuracy;\n  }\n  let scoreThreshold = options.threshold, bestLoc = text.indexOf(pattern, loc);\n  bestLoc !== -1 && (scoreThreshold = Math.min(getBitapScore(0, bestLoc), scoreThreshold), bestLoc = text.lastIndexOf(pattern, loc + pattern.length), bestLoc !== -1 && (scoreThreshold = Math.min(getBitapScore(0, bestLoc), scoreThreshold)));\n  const matchmask = 1 << pattern.length - 1;\n  bestLoc = -1;\n  let binMin, binMid, binMax = pattern.length + text.length, lastRd = [];\n  for (let d = 0; d < pattern.length; d++) {\n    for (binMin = 0, binMid = binMax; binMin < binMid; )\n      getBitapScore(d, loc + binMid) <= scoreThreshold ? binMin = binMid : binMax = binMid, binMid = Math.floor((binMax - binMin) / 2 + binMin);\n    binMax = binMid;\n    let start = Math.max(1, loc - binMid + 1);\n    const finish = Math.min(loc + binMid, text.length) + pattern.length, rd = new Array(finish + 2);\n    rd[finish + 1] = (1 << d) - 1;\n    for (let j = finish; j >= start; j--) {\n      const charMatch = s[text.charAt(j - 1)];\n      if (d === 0 ? rd[j] = (rd[j + 1] << 1 | 1) & charMatch : rd[j] = (rd[j + 1] << 1 | 1) & charMatch | ((lastRd[j + 1] | lastRd[j]) << 1 | 1) | lastRd[j + 1], rd[j] & matchmask) {\n        const score = getBitapScore(d, j - 1);\n        if (score <= scoreThreshold)\n          if (scoreThreshold = score, bestLoc = j - 1, bestLoc > loc)\n            start = Math.max(1, 2 * loc - bestLoc);\n          else\n            break;\n      }\n    }\n    if (getBitapScore(d + 1, loc) > scoreThreshold)\n      break;\n    lastRd = rd;\n  }\n  return bestLoc;\n}\nfunction getAlphabetFromPattern(pattern) {\n  const s = {};\n  for (let i = 0; i < pattern.length; i++)\n    s[pattern.charAt(i)] = 0;\n  for (let i = 0; i < pattern.length; i++)\n    s[pattern.charAt(i)] |= 1 << pattern.length - i - 1;\n  return s;\n}\nfunction match(text, pattern, searchLocation) {\n  if (text === null || pattern === null || searchLocation === null)\n    throw new Error(\"Null input. (match())\");\n  const loc = Math.max(0, Math.min(searchLocation, text.length));\n  if (text === pattern)\n    return 0;\n  if (text.length) {\n    if (text.substring(loc, loc + pattern.length) === pattern)\n      return loc;\n  } else return -1;\n  return bitap(text, pattern, loc);\n}\nfunction diffText1(diffs) {\n  const text = [];\n  for (let x = 0; x < diffs.length; x++)\n    diffs[x][0] !== DIFF_INSERT && (text[x] = diffs[x][1]);\n  return text.join(\"\");\n}\nfunction diffText2(diffs) {\n  const text = [];\n  for (let x = 0; x < diffs.length; x++)\n    diffs[x][0] !== DIFF_DELETE && (text[x] = diffs[x][1]);\n  return text.join(\"\");\n}\nfunction levenshtein(diffs) {\n  let leven = 0, insertions = 0, deletions = 0;\n  for (let x = 0; x < diffs.length; x++) {\n    const op = diffs[x][0], data = diffs[x][1];\n    switch (op) {\n      case DIFF_INSERT:\n        insertions += data.length;\n        break;\n      case DIFF_DELETE:\n        deletions += data.length;\n        break;\n      case DIFF_EQUAL:\n        leven += Math.max(insertions, deletions), insertions = 0, deletions = 0;\n        break;\n      default:\n        throw new Error(\"Unknown diff operation.\");\n    }\n  }\n  return leven += Math.max(insertions, deletions), leven;\n}\nfunction xIndex(diffs, loc) {\n  let chars1 = 0, chars2 = 0, lastChars1 = 0, lastChars2 = 0, x;\n  for (x = 0; x < diffs.length && (diffs[x][0] !== DIFF_INSERT && (chars1 += diffs[x][1].length), diffs[x][0] !== DIFF_DELETE && (chars2 += diffs[x][1].length), !(chars1 > loc)); x++)\n    lastChars1 = chars1, lastChars2 = chars2;\n  return diffs.length !== x && diffs[x][0] === DIFF_DELETE ? lastChars2 : lastChars2 + (loc - lastChars1);\n}\nfunction countUtf8Bytes(str) {\n  let bytes = 0;\n  for (let i = 0; i < str.length; i++) {\n    const codePoint = str.codePointAt(i);\n    if (typeof codePoint > \"u\")\n      throw new Error(\"Failed to get codepoint\");\n    bytes += utf8len(codePoint);\n  }\n  return bytes;\n}\nfunction adjustIndiciesToUcs2(patches, base, options = {}) {\n  let byteOffset = 0, idx = 0;\n  function advanceTo(target) {\n    for (; byteOffset < target; ) {\n      const codePoint = base.codePointAt(idx);\n      if (typeof codePoint > \"u\")\n        return idx;\n      byteOffset += utf8len(codePoint), codePoint > 65535 ? idx += 2 : idx += 1;\n    }\n    if (!options.allowExceedingIndices && byteOffset !== target)\n      throw new Error(\"Failed to determine byte offset\");\n    return idx;\n  }\n  const adjusted = [];\n  for (const patch of patches)\n    adjusted.push({\n      diffs: patch.diffs.map((diff2) => cloneDiff(diff2)),\n      start1: advanceTo(patch.start1),\n      start2: advanceTo(patch.start2),\n      utf8Start1: patch.utf8Start1,\n      utf8Start2: patch.utf8Start2,\n      length1: patch.length1,\n      length2: patch.length2,\n      utf8Length1: patch.utf8Length1,\n      utf8Length2: patch.utf8Length2\n    });\n  return adjusted;\n}\nfunction utf8len(codePoint) {\n  return codePoint <= 127 ? 1 : codePoint <= 2047 ? 2 : codePoint <= 65535 ? 3 : 4;\n}\nconst MAX_BITS = 32, DEFAULT_MARGIN = 4;\nfunction addPadding(patches, margin = DEFAULT_MARGIN) {\n  const paddingLength = margin;\n  let nullPadding = \"\";\n  for (let x = 1; x <= paddingLength; x++)\n    nullPadding += String.fromCharCode(x);\n  for (const p of patches)\n    p.start1 += paddingLength, p.start2 += paddingLength, p.utf8Start1 += paddingLength, p.utf8Start2 += paddingLength;\n  let patch = patches[0], diffs = patch.diffs;\n  if (diffs.length === 0 || diffs[0][0] !== DIFF_EQUAL)\n    diffs.unshift([DIFF_EQUAL, nullPadding]), patch.start1 -= paddingLength, patch.start2 -= paddingLength, patch.utf8Start1 -= paddingLength, patch.utf8Start2 -= paddingLength, patch.length1 += paddingLength, patch.length2 += paddingLength, patch.utf8Length1 += paddingLength, patch.utf8Length2 += paddingLength;\n  else if (paddingLength > diffs[0][1].length) {\n    const firstDiffLength = diffs[0][1].length, extraLength = paddingLength - firstDiffLength;\n    diffs[0][1] = nullPadding.substring(firstDiffLength) + diffs[0][1], patch.start1 -= extraLength, patch.start2 -= extraLength, patch.utf8Start1 -= extraLength, patch.utf8Start2 -= extraLength, patch.length1 += extraLength, patch.length2 += extraLength, patch.utf8Length1 += extraLength, patch.utf8Length2 += extraLength;\n  }\n  if (patch = patches[patches.length - 1], diffs = patch.diffs, diffs.length === 0 || diffs[diffs.length - 1][0] !== DIFF_EQUAL)\n    diffs.push([DIFF_EQUAL, nullPadding]), patch.length1 += paddingLength, patch.length2 += paddingLength, patch.utf8Length1 += paddingLength, patch.utf8Length2 += paddingLength;\n  else if (paddingLength > diffs[diffs.length - 1][1].length) {\n    const extraLength = paddingLength - diffs[diffs.length - 1][1].length;\n    diffs[diffs.length - 1][1] += nullPadding.substring(0, extraLength), patch.length1 += extraLength, patch.length2 += extraLength, patch.utf8Length1 += extraLength, patch.utf8Length2 += extraLength;\n  }\n  return nullPadding;\n}\nfunction createPatchObject(start1, start2) {\n  return {\n    diffs: [],\n    start1,\n    start2,\n    utf8Start1: start1,\n    utf8Start2: start2,\n    length1: 0,\n    length2: 0,\n    utf8Length1: 0,\n    utf8Length2: 0\n  };\n}\nfunction splitMax(patches, margin = DEFAULT_MARGIN) {\n  const patchSize = MAX_BITS;\n  for (let x = 0; x < patches.length; x++) {\n    if (patches[x].length1 <= patchSize)\n      continue;\n    const bigpatch = patches[x];\n    patches.splice(x--, 1);\n    let start1 = bigpatch.start1, start2 = bigpatch.start2, preContext = \"\";\n    for (; bigpatch.diffs.length !== 0; ) {\n      const patch = createPatchObject(start1 - preContext.length, start2 - preContext.length);\n      let empty = !0;\n      if (preContext !== \"\") {\n        const precontextByteCount = countUtf8Bytes(preContext);\n        patch.length1 = preContext.length, patch.utf8Length1 = precontextByteCount, patch.length2 = preContext.length, patch.utf8Length2 = precontextByteCount, patch.diffs.push([DIFF_EQUAL, preContext]);\n      }\n      for (; bigpatch.diffs.length !== 0 && patch.length1 < patchSize - margin; ) {\n        const diffType = bigpatch.diffs[0][0];\n        let diffText = bigpatch.diffs[0][1], diffTextByteCount = countUtf8Bytes(diffText);\n        if (diffType === DIFF_INSERT) {\n          patch.length2 += diffText.length, patch.utf8Length2 += diffTextByteCount, start2 += diffText.length;\n          const diff2 = bigpatch.diffs.shift();\n          diff2 && patch.diffs.push(diff2), empty = !1;\n        } else diffType === DIFF_DELETE && patch.diffs.length === 1 && patch.diffs[0][0] === DIFF_EQUAL && diffText.length > 2 * patchSize ? (patch.length1 += diffText.length, patch.utf8Length1 += diffTextByteCount, start1 += diffText.length, empty = !1, patch.diffs.push([diffType, diffText]), bigpatch.diffs.shift()) : (diffText = diffText.substring(0, patchSize - patch.length1 - margin), diffTextByteCount = countUtf8Bytes(diffText), patch.length1 += diffText.length, patch.utf8Length1 += diffTextByteCount, start1 += diffText.length, diffType === DIFF_EQUAL ? (patch.length2 += diffText.length, patch.utf8Length2 += diffTextByteCount, start2 += diffText.length) : empty = !1, patch.diffs.push([diffType, diffText]), diffText === bigpatch.diffs[0][1] ? bigpatch.diffs.shift() : bigpatch.diffs[0][1] = bigpatch.diffs[0][1].substring(diffText.length));\n      }\n      preContext = diffText2(patch.diffs), preContext = preContext.substring(preContext.length - margin);\n      const postContext = diffText1(bigpatch.diffs).substring(0, margin), postContextByteCount = countUtf8Bytes(postContext);\n      postContext !== \"\" && (patch.length1 += postContext.length, patch.length2 += postContext.length, patch.utf8Length1 += postContextByteCount, patch.utf8Length2 += postContextByteCount, patch.diffs.length !== 0 && patch.diffs[patch.diffs.length - 1][0] === DIFF_EQUAL ? patch.diffs[patch.diffs.length - 1][1] += postContext : patch.diffs.push([DIFF_EQUAL, postContext])), empty || patches.splice(++x, 0, patch);\n    }\n  }\n}\nfunction apply(patches, originalText, opts = {}) {\n  if (typeof patches == \"string\")\n    throw new Error(\"Patches must be an array - pass the patch to `parsePatch()` first\");\n  let text = originalText;\n  if (patches.length === 0)\n    return [text, []];\n  const parsed = adjustIndiciesToUcs2(patches, text, {\n    allowExceedingIndices: opts.allowExceedingIndices\n  }), margin = opts.margin || DEFAULT_MARGIN, deleteThreshold = opts.deleteThreshold || 0.4, nullPadding = addPadding(parsed, margin);\n  text = nullPadding + text + nullPadding, splitMax(parsed, margin);\n  let delta = 0;\n  const results = [];\n  for (let x = 0; x < parsed.length; x++) {\n    const expectedLoc = parsed[x].start2 + delta, text1 = diffText1(parsed[x].diffs);\n    let startLoc, endLoc = -1;\n    if (text1.length > MAX_BITS ? (startLoc = match(text, text1.substring(0, MAX_BITS), expectedLoc), startLoc !== -1 && (endLoc = match(\n      text,\n      text1.substring(text1.length - MAX_BITS),\n      expectedLoc + text1.length - MAX_BITS\n    ), (endLoc === -1 || startLoc >= endLoc) && (startLoc = -1))) : startLoc = match(text, text1, expectedLoc), startLoc === -1)\n      results[x] = !1, delta -= parsed[x].length2 - parsed[x].length1;\n    else {\n      results[x] = !0, delta = startLoc - expectedLoc;\n      let text2;\n      if (endLoc === -1 ? text2 = text.substring(startLoc, startLoc + text1.length) : text2 = text.substring(startLoc, endLoc + MAX_BITS), text1 === text2)\n        text = text.substring(0, startLoc) + diffText2(parsed[x].diffs) + text.substring(startLoc + text1.length);\n      else {\n        let diffs = diff(text1, text2, { checkLines: !1 });\n        if (text1.length > MAX_BITS && levenshtein(diffs) / text1.length > deleteThreshold)\n          results[x] = !1;\n        else {\n          diffs = cleanupSemanticLossless(diffs);\n          let index1 = 0, index2 = 0;\n          for (let y = 0; y < parsed[x].diffs.length; y++) {\n            const mod = parsed[x].diffs[y];\n            mod[0] !== DIFF_EQUAL && (index2 = xIndex(diffs, index1)), mod[0] === DIFF_INSERT ? text = text.substring(0, startLoc + index2) + mod[1] + text.substring(startLoc + index2) : mod[0] === DIFF_DELETE && (text = text.substring(0, startLoc + index2) + text.substring(startLoc + xIndex(diffs, index1 + mod[1].length))), mod[0] !== DIFF_DELETE && (index1 += mod[1].length);\n          }\n        }\n      }\n    }\n  }\n  return text = text.substring(nullPadding.length, text.length - nullPadding.length), [text, results];\n}\nvar __defProp = Object.defineProperty, __getOwnPropSymbols = Object.getOwnPropertySymbols, __hasOwnProp = Object.prototype.hasOwnProperty, __propIsEnum = Object.prototype.propertyIsEnumerable, __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: !0, configurable: !0, writable: !0, value }) : obj[key] = value, __spreadValues = (a, b) => {\n  for (var prop in b || (b = {}))\n    __hasOwnProp.call(b, prop) && __defNormalProp(a, prop, b[prop]);\n  if (__getOwnPropSymbols)\n    for (var prop of __getOwnPropSymbols(b))\n      __propIsEnum.call(b, prop) && __defNormalProp(a, prop, b[prop]);\n  return a;\n};\nconst DEFAULT_OPTS = {\n  margin: 4\n};\nfunction getDefaultOpts(opts = {}) {\n  return __spreadValues(__spreadValues({}, DEFAULT_OPTS), opts);\n}\nfunction make(a, b, options) {\n  if (typeof a == \"string\" && typeof b == \"string\") {\n    let diffs = diff(a, b, { checkLines: !0 });\n    return diffs.length > 2 && (diffs = cleanupSemantic(diffs), diffs = cleanupEfficiency(diffs)), _make(a, diffs, getDefaultOpts(options));\n  }\n  if (a && Array.isArray(a) && typeof b > \"u\")\n    return _make(diffText1(a), a, getDefaultOpts(options));\n  if (typeof a == \"string\" && b && Array.isArray(b))\n    return _make(a, b, getDefaultOpts(options));\n  throw new Error(\"Unknown call format to make()\");\n}\nfunction _make(textA, diffs, options) {\n  if (diffs.length === 0)\n    return [];\n  const patches = [];\n  let patch = createPatchObject(0, 0), patchDiffLength = 0, charCount1 = 0, charCount2 = 0, utf8Count1 = 0, utf8Count2 = 0, prepatchText = textA, postpatchText = textA;\n  for (let x = 0; x < diffs.length; x++) {\n    const currentDiff = diffs[x], [diffType, diffText] = currentDiff, diffTextLength = diffText.length, diffByteLength = countUtf8Bytes(diffText);\n    switch (!patchDiffLength && diffType !== DIFF_EQUAL && (patch.start1 = charCount1, patch.start2 = charCount2, patch.utf8Start1 = utf8Count1, patch.utf8Start2 = utf8Count2), diffType) {\n      case DIFF_INSERT:\n        patch.diffs[patchDiffLength++] = currentDiff, patch.length2 += diffTextLength, patch.utf8Length2 += diffByteLength, postpatchText = postpatchText.substring(0, charCount2) + diffText + postpatchText.substring(charCount2);\n        break;\n      case DIFF_DELETE:\n        patch.length1 += diffTextLength, patch.utf8Length1 += diffByteLength, patch.diffs[patchDiffLength++] = currentDiff, postpatchText = postpatchText.substring(0, charCount2) + postpatchText.substring(charCount2 + diffTextLength);\n        break;\n      case DIFF_EQUAL:\n        diffTextLength <= 2 * options.margin && patchDiffLength && diffs.length !== x + 1 ? (patch.diffs[patchDiffLength++] = currentDiff, patch.length1 += diffTextLength, patch.length2 += diffTextLength, patch.utf8Length1 += diffByteLength, patch.utf8Length2 += diffByteLength) : diffTextLength >= 2 * options.margin && patchDiffLength && (addContext(patch, prepatchText, options), patches.push(patch), patch = createPatchObject(-1, -1), patchDiffLength = 0, prepatchText = postpatchText, charCount1 = charCount2, utf8Count1 = utf8Count2);\n        break;\n      default:\n        throw new Error(\"Unknown diff type\");\n    }\n    diffType !== DIFF_INSERT && (charCount1 += diffTextLength, utf8Count1 += diffByteLength), diffType !== DIFF_DELETE && (charCount2 += diffTextLength, utf8Count2 += diffByteLength);\n  }\n  return patchDiffLength && (addContext(patch, prepatchText, options), patches.push(patch)), patches;\n}\nfunction addContext(patch, text, opts) {\n  if (text.length === 0)\n    return;\n  let pattern = text.substring(patch.start2, patch.start2 + patch.length1), padding = 0;\n  for (; text.indexOf(pattern) !== text.lastIndexOf(pattern) && pattern.length < MAX_BITS - opts.margin - opts.margin; )\n    padding += opts.margin, pattern = text.substring(patch.start2 - padding, patch.start2 + patch.length1 + padding);\n  padding += opts.margin;\n  let prefixStart = patch.start2 - padding;\n  prefixStart >= 1 && isLowSurrogate(text[prefixStart]) && prefixStart--;\n  const prefix = text.substring(prefixStart, patch.start2);\n  prefix && patch.diffs.unshift([DIFF_EQUAL, prefix]);\n  const prefixLength = prefix.length, prefixUtf8Length = countUtf8Bytes(prefix);\n  let suffixEnd = patch.start2 + patch.length1 + padding;\n  suffixEnd < text.length && isLowSurrogate(text[suffixEnd]) && suffixEnd++;\n  const suffix = text.substring(patch.start2 + patch.length1, suffixEnd);\n  suffix && patch.diffs.push([DIFF_EQUAL, suffix]);\n  const suffixLength = suffix.length, suffixUtf8Length = countUtf8Bytes(suffix);\n  patch.start1 -= prefixLength, patch.start2 -= prefixLength, patch.utf8Start1 -= prefixUtf8Length, patch.utf8Start2 -= prefixUtf8Length, patch.length1 += prefixLength + suffixLength, patch.length2 += prefixLength + suffixLength, patch.utf8Length1 += prefixUtf8Length + suffixUtf8Length, patch.utf8Length2 += prefixUtf8Length + suffixUtf8Length;\n}\nconst patchHeader = /^@@ -(\\d+),?(\\d*) \\+(\\d+),?(\\d*) @@$/;\nfunction parse(textline) {\n  if (!textline)\n    return [];\n  const patches = [], lines = textline.split(`\n`);\n  let textPointer = 0;\n  for (; textPointer < lines.length; ) {\n    const m = lines[textPointer].match(patchHeader);\n    if (!m)\n      throw new Error(`Invalid patch string: ${lines[textPointer]}`);\n    const patch = createPatchObject(toInt(m[1]), toInt(m[3]));\n    for (patches.push(patch), m[2] === \"\" ? (patch.start1--, patch.utf8Start1--, patch.length1 = 1, patch.utf8Length1 = 1) : m[2] === \"0\" ? (patch.length1 = 0, patch.utf8Length1 = 0) : (patch.start1--, patch.utf8Start1--, patch.utf8Length1 = toInt(m[2]), patch.length1 = patch.utf8Length1), m[4] === \"\" ? (patch.start2--, patch.utf8Start2--, patch.length2 = 1, patch.utf8Length2 = 1) : m[4] === \"0\" ? (patch.length2 = 0, patch.utf8Length2 = 0) : (patch.start2--, patch.utf8Start2--, patch.utf8Length2 = toInt(m[4]), patch.length2 = patch.utf8Length2), textPointer++; textPointer < lines.length; ) {\n      const currentLine = lines[textPointer], sign = currentLine.charAt(0);\n      if (sign === \"@\")\n        break;\n      if (sign === \"\") {\n        textPointer++;\n        continue;\n      }\n      let line;\n      try {\n        line = decodeURI(currentLine.slice(1));\n      } catch (ex) {\n        throw new Error(`Illegal escape in parse: ${currentLine}`);\n      }\n      const utf8Diff = countUtf8Bytes(line) - line.length;\n      if (sign === \"-\")\n        patch.diffs.push([DIFF_DELETE, line]), patch.length1 -= utf8Diff;\n      else if (sign === \"+\")\n        patch.diffs.push([DIFF_INSERT, line]), patch.length2 -= utf8Diff;\n      else if (sign === \" \")\n        patch.diffs.push([DIFF_EQUAL, line]), patch.length1 -= utf8Diff, patch.length2 -= utf8Diff;\n      else\n        throw new Error(`Invalid patch mode \"${sign}\" in: ${line}`);\n      textPointer++;\n    }\n  }\n  return patches;\n}\nfunction toInt(num) {\n  return parseInt(num, 10);\n}\nfunction stringify(patches) {\n  return patches.map(stringifyPatch).join(\"\");\n}\nfunction stringifyPatch(patch) {\n  const { utf8Length1, utf8Length2, utf8Start1, utf8Start2, diffs } = patch;\n  let coords1;\n  utf8Length1 === 0 ? coords1 = `${utf8Start1},0` : utf8Length1 === 1 ? coords1 = `${utf8Start1 + 1}` : coords1 = `${utf8Start1 + 1},${utf8Length1}`;\n  let coords2;\n  utf8Length2 === 0 ? coords2 = `${utf8Start2},0` : utf8Length2 === 1 ? coords2 = `${utf8Start2 + 1}` : coords2 = `${utf8Start2 + 1},${utf8Length2}`;\n  const text = [`@@ -${coords1} +${coords2} @@\n`];\n  let op;\n  for (let x = 0; x < diffs.length; x++) {\n    switch (diffs[x][0]) {\n      case DIFF_INSERT:\n        op = \"+\";\n        break;\n      case DIFF_DELETE:\n        op = \"-\";\n        break;\n      case DIFF_EQUAL:\n        op = \" \";\n        break;\n      default:\n        throw new Error(\"Unknown patch operation.\");\n    }\n    text[x + 1] = `${op + encodeURI(diffs[x][1])}\n`;\n  }\n  return text.join(\"\").replace(/%20/g, \" \");\n}\nexport {\n  DIFF_DELETE,\n  DIFF_EQUAL,\n  DIFF_INSERT,\n  adjustIndiciesToUcs2,\n  apply as applyPatches,\n  cleanupEfficiency,\n  cleanupSemantic,\n  diff as makeDiff,\n  make as makePatches,\n  match,\n  parse as parsePatch,\n  stringifyPatch,\n  stringify as stringifyPatches\n};\n//# sourceMappingURL=index.js.map\n","import type {Editor} from 'slate'\n\nconst IS_UDOING: WeakMap<Editor, boolean | undefined> = new WeakMap()\nconst IS_REDOING: WeakMap<Editor, boolean | undefined> = new WeakMap()\n\nexport function withUndoing(editor: Editor, fn: () => void) {\n  const prev = isUndoing(editor)\n  IS_UDOING.set(editor, true)\n  fn()\n  IS_UDOING.set(editor, prev)\n}\n\nexport function isUndoing(editor: Editor) {\n  return IS_UDOING.get(editor) ?? false\n}\n\nexport function setIsUndoing(editor: Editor, isUndoing: boolean) {\n  IS_UDOING.set(editor, isUndoing)\n}\n\nexport function withRedoing(editor: Editor, fn: () => void) {\n  const prev = isRedoing(editor)\n  IS_REDOING.set(editor, true)\n  fn()\n  IS_REDOING.set(editor, prev)\n}\n\nexport function isRedoing(editor: Editor) {\n  return IS_REDOING.get(editor) ?? false\n}\n\nexport function setIsRedoing(editor: Editor, isRedoing: boolean) {\n  IS_REDOING.set(editor, isRedoing)\n}\n","/**\n * This plugin will make the editor support undo/redo on the local state only.\n * The undo/redo steps are rebased against incoming patches since the step occurred.\n */\n\nimport type {Patch} from '@portabletext/patches'\nimport {\n  DIFF_DELETE,\n  DIFF_EQUAL,\n  DIFF_INSERT,\n  parsePatch,\n} from '@sanity/diff-match-patch'\nimport type {ObjectSchemaType, PortableTextBlock} from '@sanity/types'\nimport {flatten, isEqual} from 'lodash'\nimport {\n  Editor,\n  Operation,\n  Path,\n  Transforms,\n  type Descendant,\n  type SelectionOperation,\n} from 'slate'\nimport type {PortableTextSlateEditor} from '../../types/editor'\nimport {debugWithName} from '../../utils/debug'\nimport {fromSlateValue} from '../../utils/values'\nimport {isChangingRemotely} from '../../utils/withChanges'\nimport {\n  isRedoing,\n  isUndoing,\n  setIsRedoing,\n  setIsUndoing,\n  withRedoing,\n  withUndoing,\n} from '../../utils/withUndoRedo'\nimport type {EditorActor} from '../editor-machine'\n\nconst debug = debugWithName('plugin:withUndoRedo')\nconst debugVerbose = debug.enabled && false\n\nconst SAVING = new WeakMap<Editor, boolean | undefined>()\nconst REMOTE_PATCHES = new WeakMap<\n  Editor,\n  {\n    patch: Patch\n    time: Date\n    snapshot: PortableTextBlock[] | undefined\n    previousSnapshot: PortableTextBlock[] | undefined\n  }[]\n>()\nconst UNDO_STEP_LIMIT = 1000\n\nconst isSaving = (editor: Editor): boolean | undefined => {\n  const state = SAVING.get(editor)\n  return state === undefined ? true : state\n}\n\nexport interface Options {\n  editorActor: EditorActor\n  blockSchemaType: ObjectSchemaType\n  subscriptions: Array<() => () => void>\n}\n\nconst getRemotePatches = (editor: Editor) => {\n  if (!REMOTE_PATCHES.get(editor)) {\n    REMOTE_PATCHES.set(editor, [])\n  }\n  return REMOTE_PATCHES.get(editor) || []\n}\n\nexport function createWithUndoRedo(\n  options: Options,\n): (editor: PortableTextSlateEditor) => PortableTextSlateEditor {\n  const {editorActor, blockSchemaType} = options\n\n  return (editor: PortableTextSlateEditor) => {\n    let previousSnapshot: PortableTextBlock[] | undefined = fromSlateValue(\n      editor.children,\n      blockSchemaType.name,\n    )\n    const remotePatches = getRemotePatches(editor)\n\n    options.subscriptions.push(() => {\n      debug('Subscribing to patches')\n      const sub = editorActor.on('patches', ({patches, snapshot}) => {\n        let reset = false\n        patches.forEach((patch) => {\n          if (!reset && patch.origin !== 'local' && remotePatches) {\n            if (patch.type === 'unset' && patch.path.length === 0) {\n              debug(\n                'Someone else cleared the content, resetting undo/redo history',\n              )\n              editor.history = {undos: [], redos: []}\n              remotePatches.splice(0, remotePatches.length)\n              SAVING.set(editor, true)\n              reset = true\n              return\n            }\n            remotePatches.push({\n              patch,\n              time: new Date(),\n              snapshot,\n              previousSnapshot,\n            })\n          }\n        })\n        previousSnapshot = snapshot\n      })\n      return () => {\n        debug('Unsubscribing to patches')\n        sub.unsubscribe()\n      }\n    })\n\n    editor.history = {undos: [], redos: []}\n    const {apply} = editor\n    editor.apply = (op: Operation) => {\n      if (editorActor.getSnapshot().matches({'edit mode': 'read only'})) {\n        apply(op)\n        return\n      }\n\n      /**\n       * We don't want to run any side effects when the editor is processing\n       * remote changes.\n       */\n      if (isChangingRemotely(editor)) {\n        apply(op)\n        return\n      }\n\n      /**\n       * We don't want to run any side effects when the editor is undoing or\n       * redoing operations.\n       */\n      if (isUndoing(editor) || isRedoing(editor)) {\n        apply(op)\n        return\n      }\n\n      const {operations, history} = editor\n      const {undos} = history\n      const step = undos[undos.length - 1]\n      const lastOp =\n        step && step.operations && step.operations[step.operations.length - 1]\n      const overwrite = shouldOverwrite(op, lastOp)\n      const save = isSaving(editor)\n\n      let merge = true\n      if (save) {\n        if (!step) {\n          merge = false\n        } else if (operations.length === 0) {\n          merge = shouldMerge(op, lastOp) || overwrite\n        }\n\n        if (step && merge) {\n          step.operations.push(op)\n        } else {\n          const newStep = {\n            operations: [\n              ...(editor.selection === null\n                ? []\n                : [createSelectOperation(editor)]),\n              op,\n            ],\n            timestamp: new Date(),\n          }\n          undos.push(newStep)\n          debug('Created new undo step', step)\n        }\n\n        while (undos.length > UNDO_STEP_LIMIT) {\n          undos.shift()\n        }\n\n        if (shouldClear(op)) {\n          history.redos = []\n        }\n      }\n      apply(op)\n    }\n\n    editor.undo = () => {\n      if (editorActor.getSnapshot().matches({'edit mode': 'read only'})) {\n        return\n      }\n      const {undos} = editor.history\n      if (undos.length > 0) {\n        const step = undos[undos.length - 1]\n        debug('Undoing', step)\n        if (step.operations.length > 0) {\n          const otherPatches = remotePatches.filter(\n            (item) => item.time >= step.timestamp,\n          )\n          let transformedOperations = step.operations\n          otherPatches.forEach((item) => {\n            transformedOperations = flatten(\n              transformedOperations.map((op) =>\n                transformOperation(\n                  editor,\n                  item.patch,\n                  op,\n                  item.snapshot,\n                  item.previousSnapshot,\n                ),\n              ),\n            )\n          })\n          const reversedOperations = transformedOperations\n            .map(Operation.inverse)\n            .reverse()\n\n          try {\n            Editor.withoutNormalizing(editor, () => {\n              withUndoing(editor, () => {\n                withoutSaving(editor, () => {\n                  reversedOperations.forEach((op) => {\n                    editor.apply(op)\n                  })\n                })\n              })\n            })\n            editor.normalize()\n            editor.onChange()\n          } catch (err) {\n            debug('Could not perform undo step', err)\n            remotePatches.splice(0, remotePatches.length)\n            Transforms.deselect(editor)\n            editor.history = {undos: [], redos: []}\n            SAVING.set(editor, true)\n            setIsUndoing(editor, false)\n            editor.onChange()\n            return\n          }\n          editor.history.redos.push(step)\n          editor.history.undos.pop()\n        }\n      }\n    }\n\n    editor.redo = () => {\n      if (editorActor.getSnapshot().matches({'edit mode': 'read only'})) {\n        return\n      }\n      const {redos} = editor.history\n      if (redos.length > 0) {\n        const step = redos[redos.length - 1]\n        debug('Redoing', step)\n        if (step.operations.length > 0) {\n          const otherPatches = remotePatches.filter(\n            (item) => item.time >= step.timestamp,\n          )\n          let transformedOperations = step.operations\n          otherPatches.forEach((item) => {\n            transformedOperations = flatten(\n              transformedOperations.map((op) =>\n                transformOperation(\n                  editor,\n                  item.patch,\n                  op,\n                  item.snapshot,\n                  item.previousSnapshot,\n                ),\n              ),\n            )\n          })\n          try {\n            Editor.withoutNormalizing(editor, () => {\n              withRedoing(editor, () => {\n                withoutSaving(editor, () => {\n                  transformedOperations.forEach((op) => {\n                    editor.apply(op)\n                  })\n                })\n              })\n            })\n            editor.normalize()\n            editor.onChange()\n          } catch (err) {\n            debug('Could not perform redo step', err)\n            remotePatches.splice(0, remotePatches.length)\n            Transforms.deselect(editor)\n            editor.history = {undos: [], redos: []}\n            SAVING.set(editor, true)\n            setIsRedoing(editor, false)\n            editor.onChange()\n            return\n          }\n          editor.history.undos.push(step)\n          editor.history.redos.pop()\n        }\n      }\n    }\n\n    // Plugin return\n    return editor\n  }\n}\n\n/**\n * This will adjust the operation paths and offsets according to the\n * remote patches by other editors since the step operations was performed.\n */\nfunction transformOperation(\n  editor: PortableTextSlateEditor,\n  patch: Patch,\n  operation: Operation,\n  snapshot: PortableTextBlock[] | undefined,\n  previousSnapshot: PortableTextBlock[] | undefined,\n): Operation[] {\n  if (debugVerbose) {\n    debug(\n      `Adjusting '${operation.type}' operation paths for '${patch.type}' patch`,\n    )\n    debug(`Operation ${JSON.stringify(operation)}`)\n    debug(`Patch ${JSON.stringify(patch)}`)\n  }\n\n  const transformedOperation = {...operation}\n\n  if (patch.type === 'insert' && patch.path.length === 1) {\n    const insertBlockIndex = (snapshot || []).findIndex((blk) =>\n      isEqual({_key: blk._key}, patch.path[0]),\n    )\n    debug(\n      `Adjusting block path (+${patch.items.length}) for '${transformedOperation.type}' operation and patch '${patch.type}'`,\n    )\n    return [\n      adjustBlockPath(\n        transformedOperation,\n        patch.items.length,\n        insertBlockIndex,\n      ),\n    ]\n  }\n\n  if (patch.type === 'unset' && patch.path.length === 1) {\n    const unsetBlockIndex = (previousSnapshot || []).findIndex((blk) =>\n      isEqual({_key: blk._key}, patch.path[0]),\n    )\n    // If this operation is targeting the same block that got removed, return empty\n    if (\n      'path' in transformedOperation &&\n      Array.isArray(transformedOperation.path) &&\n      transformedOperation.path[0] === unsetBlockIndex\n    ) {\n      debug('Skipping transformation that targeted removed block')\n      return []\n    }\n    if (debugVerbose) {\n      debug(`Selection ${JSON.stringify(editor.selection)}`)\n      debug(\n        `Adjusting block path (-1) for '${transformedOperation.type}' operation and patch '${patch.type}'`,\n      )\n    }\n    return [adjustBlockPath(transformedOperation, -1, unsetBlockIndex)]\n  }\n\n  // Someone reset the whole value\n  if (patch.type === 'unset' && patch.path.length === 0) {\n    debug(\n      `Adjusting selection for unset everything patch and ${operation.type} operation`,\n    )\n    return []\n  }\n\n  if (patch.type === 'diffMatchPatch') {\n    const operationTargetBlock = findOperationTargetBlock(\n      editor,\n      transformedOperation,\n    )\n    if (\n      !operationTargetBlock ||\n      !isEqual({_key: operationTargetBlock._key}, patch.path[0])\n    ) {\n      return [transformedOperation]\n    }\n    const diffPatches = parsePatch(patch.value)\n    diffPatches.forEach((diffPatch) => {\n      let adjustOffsetBy = 0\n      let changedOffset = diffPatch.utf8Start1\n      const {diffs} = diffPatch\n      diffs.forEach((diff, index) => {\n        const [diffType, text] = diff\n        if (diffType === DIFF_INSERT) {\n          adjustOffsetBy += text.length\n          changedOffset += text.length\n        } else if (diffType === DIFF_DELETE) {\n          adjustOffsetBy -= text.length\n          changedOffset -= text.length\n        } else if (diffType === DIFF_EQUAL) {\n          // Only up to the point where there are no other changes\n          if (!diffs.slice(index).every(([dType]) => dType === DIFF_EQUAL)) {\n            changedOffset += text.length\n          }\n        }\n      })\n      // Adjust accordingly if someone inserted text in the same node before us\n      if (transformedOperation.type === 'insert_text') {\n        if (changedOffset < transformedOperation.offset) {\n          transformedOperation.offset += adjustOffsetBy\n        }\n      }\n      // Adjust accordingly if someone removed text in the same node before us\n      if (transformedOperation.type === 'remove_text') {\n        if (\n          changedOffset <=\n          transformedOperation.offset - transformedOperation.text.length\n        ) {\n          transformedOperation.offset += adjustOffsetBy\n        }\n      }\n      // Adjust set_selection operation's points to new offset\n      if (transformedOperation.type === 'set_selection') {\n        const currentFocus = transformedOperation.properties?.focus\n          ? {...transformedOperation.properties.focus}\n          : undefined\n        const currentAnchor = transformedOperation?.properties?.anchor\n          ? {...transformedOperation.properties.anchor}\n          : undefined\n        const newFocus = transformedOperation?.newProperties?.focus\n          ? {...transformedOperation.newProperties.focus}\n          : undefined\n        const newAnchor = transformedOperation?.newProperties?.anchor\n          ? {...transformedOperation.newProperties.anchor}\n          : undefined\n        if ((currentFocus && currentAnchor) || (newFocus && newAnchor)) {\n          const points = [currentFocus, currentAnchor, newFocus, newAnchor]\n          points.forEach((point) => {\n            if (point && changedOffset < point.offset) {\n              point.offset += adjustOffsetBy\n            }\n          })\n          if (currentFocus && currentAnchor) {\n            transformedOperation.properties = {\n              focus: currentFocus,\n              anchor: currentAnchor,\n            }\n          }\n          if (newFocus && newAnchor) {\n            transformedOperation.newProperties = {\n              focus: newFocus,\n              anchor: newAnchor,\n            }\n          }\n        }\n      }\n    })\n    return [transformedOperation]\n  }\n  return [transformedOperation]\n}\n/**\n * Adjust the block path for a operation\n */\nfunction adjustBlockPath(\n  operation: Operation,\n  level: number,\n  blockIndex: number,\n): Operation {\n  const transformedOperation = {...operation}\n  if (\n    blockIndex >= 0 &&\n    transformedOperation.type !== 'set_selection' &&\n    Array.isArray(transformedOperation.path) &&\n    transformedOperation.path[0] >= blockIndex + level &&\n    transformedOperation.path[0] + level > -1\n  ) {\n    const newPath = [\n      transformedOperation.path[0] + level,\n      ...transformedOperation.path.slice(1),\n    ]\n    transformedOperation.path = newPath\n  }\n  if (transformedOperation.type === 'set_selection') {\n    const currentFocus = transformedOperation.properties?.focus\n      ? {...transformedOperation.properties.focus}\n      : undefined\n    const currentAnchor = transformedOperation?.properties?.anchor\n      ? {...transformedOperation.properties.anchor}\n      : undefined\n    const newFocus = transformedOperation?.newProperties?.focus\n      ? {...transformedOperation.newProperties.focus}\n      : undefined\n    const newAnchor = transformedOperation?.newProperties?.anchor\n      ? {...transformedOperation.newProperties.anchor}\n      : undefined\n    if ((currentFocus && currentAnchor) || (newFocus && newAnchor)) {\n      const points = [currentFocus, currentAnchor, newFocus, newAnchor]\n      points.forEach((point) => {\n        if (\n          point &&\n          point.path[0] >= blockIndex + level &&\n          point.path[0] + level > -1\n        ) {\n          point.path = [point.path[0] + level, ...point.path.slice(1)]\n        }\n      })\n      if (currentFocus && currentAnchor) {\n        transformedOperation.properties = {\n          focus: currentFocus,\n          anchor: currentAnchor,\n        }\n      }\n      if (newFocus && newAnchor) {\n        transformedOperation.newProperties = {\n          focus: newFocus,\n          anchor: newAnchor,\n        }\n      }\n    }\n  }\n  //   // Assign fresh point objects (we don't want to mutate the original ones)\n  return transformedOperation\n}\n\n// Helper functions for editor.apply above\n\nconst shouldMerge = (op: Operation, prev: Operation | undefined): boolean => {\n  if (op.type === 'set_selection') {\n    return true\n  }\n\n  // Text input\n  if (\n    prev &&\n    op.type === 'insert_text' &&\n    prev.type === 'insert_text' &&\n    op.offset === prev.offset + prev.text.length &&\n    Path.equals(op.path, prev.path) &&\n    op.text !== ' ' // Tokenize between words\n  ) {\n    return true\n  }\n\n  // Text deletion\n  if (\n    prev &&\n    op.type === 'remove_text' &&\n    prev.type === 'remove_text' &&\n    op.offset + op.text.length === prev.offset &&\n    Path.equals(op.path, prev.path)\n  ) {\n    return true\n  }\n\n  // Don't merge\n  return false\n}\n\nconst shouldOverwrite = (\n  op: Operation,\n  prev: Operation | undefined,\n): boolean => {\n  if (prev && op.type === 'set_selection' && prev.type === 'set_selection') {\n    return true\n  }\n\n  return false\n}\n\nconst shouldClear = (op: Operation): boolean => {\n  if (op.type === 'set_selection') {\n    return false\n  }\n\n  return true\n}\n\nexport function withoutSaving(editor: Editor, fn: () => void): void {\n  const prev = isSaving(editor)\n  SAVING.set(editor, false)\n  fn()\n  SAVING.set(editor, prev)\n}\n\nfunction createSelectOperation(editor: Editor): SelectionOperation {\n  return {\n    type: 'set_selection',\n    properties: {...editor.selection},\n    newProperties: {...editor.selection},\n  }\n}\n\nfunction findOperationTargetBlock(\n  editor: PortableTextSlateEditor,\n  operation: Operation,\n): Descendant | undefined {\n  let block: Descendant | undefined\n  if (operation.type === 'set_selection' && editor.selection) {\n    block = editor.children[editor.selection.focus.path[0]]\n  } else if ('path' in operation) {\n    block = editor.children[operation.path[0]]\n  }\n  return block\n}\n","import type {Patch} from '@portabletext/patches'\nimport type {PortableTextBlock} from '@sanity/types'\nimport {isEqual} from 'lodash'\nimport {Editor, Text, Transforms, type Descendant, type Node} from 'slate'\nimport {\n  assertEvent,\n  assign,\n  emit,\n  fromCallback,\n  setup,\n  type AnyEventObject,\n  type CallbackLogicFunction,\n} from 'xstate'\nimport type {PickFromUnion} from '../type-utils'\nimport type {\n  InvalidValueResolution,\n  PortableTextSlateEditor,\n} from '../types/editor'\nimport {debugWithName} from '../utils/debug'\nimport {validateValue} from '../utils/validateValue'\nimport {toSlateValue, VOID_CHILD_KEY} from '../utils/values'\nimport {isChangingRemotely, withRemoteChanges} from '../utils/withChanges'\nimport {withoutPatching} from '../utils/withoutPatching'\nimport type {EditorSchema} from './define-schema'\nimport {withoutSaving} from './plugins/createWithUndoRedo'\n\ntype SyncValueEvent =\n  | {\n      type: 'patch'\n      patch: Patch\n    }\n  | {\n      type: 'invalid value'\n      resolution: InvalidValueResolution | null\n      value: Array<PortableTextBlock> | undefined\n    }\n  | {\n      type: 'value changed'\n      value: Array<PortableTextBlock> | undefined\n    }\n  | {\n      type: 'done syncing'\n      value: Array<PortableTextBlock> | undefined\n    }\n\nconst syncValueCallback: CallbackLogicFunction<\n  AnyEventObject,\n  SyncValueEvent,\n  {\n    context: {\n      keyGenerator: () => string\n      previousValue: Array<PortableTextBlock> | undefined\n      readOnly: boolean\n      schema: EditorSchema\n    }\n    slateEditor: PortableTextSlateEditor\n    streamBlocks: boolean\n    value: Array<PortableTextBlock> | undefined\n  }\n> = ({sendBack, input}) => {\n  updateValue({\n    context: input.context,\n    sendBack,\n    slateEditor: input.slateEditor,\n    value: input.value,\n    streamBlocks: input.streamBlocks,\n  })\n}\n\nconst syncValueLogic = fromCallback(syncValueCallback)\n\n/**\n * Sync value with the editor state\n *\n * Normally nothing here should apply, and the editor and the real world are perfectly aligned.\n *\n * Inconsistencies could happen though, so we need to check the editor state when the value changes.\n *\n * For performance reasons, it makes sense to also do the content validation here, as we already\n * iterate over the value and can validate only the new content that is actually changed.\n *\n * @internal\n */\nexport const syncMachine = setup({\n  types: {\n    context: {} as {\n      initialValueSynced: boolean\n      isProcessingLocalChanges: boolean\n      keyGenerator: () => string\n      schema: EditorSchema\n      readOnly: boolean\n      slateEditor: PortableTextSlateEditor\n      pendingValue: Array<PortableTextBlock> | undefined\n      previousValue: Array<PortableTextBlock> | undefined\n    },\n    input: {} as {\n      keyGenerator: () => string\n      schema: EditorSchema\n      readOnly: boolean\n      slateEditor: PortableTextSlateEditor\n    },\n    events: {} as\n      | {\n          type: 'has pending patches'\n        }\n      | {\n          type: 'mutation'\n        }\n      | {\n          type: 'update value'\n          value: Array<PortableTextBlock> | undefined\n        }\n      | {\n          type: 'update readOnly'\n          readOnly: boolean\n        }\n      | SyncValueEvent,\n    emitted: {} as\n      | PickFromUnion<\n          SyncValueEvent,\n          'type',\n          'invalid value' | 'patch' | 'value changed'\n        >\n      | {type: 'done syncing initial value'},\n  },\n  actions: {\n    'assign initial value synced': assign({\n      initialValueSynced: true,\n    }),\n    'assign readOnly': assign({\n      readOnly: ({event}) => {\n        assertEvent(event, 'update readOnly')\n        return event.readOnly\n      },\n    }),\n    'assign pending value': assign({\n      pendingValue: ({event}) => {\n        assertEvent(event, 'update value')\n        return event.value\n      },\n    }),\n    'clear pending value': assign({\n      pendingValue: undefined,\n    }),\n    'assign previous value': assign({\n      previousValue: ({event}) => {\n        assertEvent(event, 'done syncing')\n        return event.value\n      },\n    }),\n    'emit done syncing initial value': emit({\n      type: 'done syncing initial value',\n    }),\n  },\n  guards: {\n    'initial value synced': ({context}) => context.initialValueSynced,\n    'is busy': ({context}) => {\n      return (\n        !context.readOnly &&\n        (context.isProcessingLocalChanges ||\n          (isChangingRemotely(context.slateEditor) ?? false))\n      )\n    },\n    'value changed while syncing': ({context, event}) => {\n      assertEvent(event, 'done syncing')\n      return context.pendingValue !== event.value\n    },\n    'pending value equals previous value': ({context}) =>\n      !(\n        context.previousValue === undefined &&\n        context.pendingValue === undefined\n      ) && isEqual(context.pendingValue, context.previousValue),\n  },\n  actors: {\n    'sync value': syncValueLogic,\n  },\n}).createMachine({\n  id: 'sync',\n  context: ({input}) => ({\n    initialValueSynced: false,\n    isProcessingLocalChanges: false,\n    keyGenerator: input.keyGenerator,\n    schema: input.schema,\n    readOnly: input.readOnly,\n    slateEditor: input.slateEditor,\n    pendingValue: undefined,\n    previousValue: undefined,\n  }),\n  on: {\n    'has pending patches': {\n      actions: assign({\n        isProcessingLocalChanges: true,\n      }),\n    },\n    'mutation': {\n      actions: assign({\n        isProcessingLocalChanges: false,\n      }),\n    },\n    'update readOnly': {\n      actions: ['assign readOnly'],\n    },\n  },\n  type: 'parallel',\n  states: {\n    'setting up': {\n      initial: 'syncing initial value',\n      states: {\n        'syncing initial value': {\n          always: {\n            guard: 'initial value synced',\n            target: 'done syncing initial value',\n          },\n        },\n        'done syncing initial value': {\n          entry: ['emit done syncing initial value'],\n          type: 'final',\n        },\n      },\n    },\n    'syncing': {\n      initial: 'idle',\n      states: {\n        idle: {\n          on: {\n            'update value': [\n              {\n                guard: 'is busy',\n                target: 'busy',\n                actions: ['assign pending value'],\n              },\n              {\n                target: 'syncing',\n                actions: ['assign pending value'],\n              },\n            ],\n          },\n        },\n        busy: {\n          after: {\n            1000: [\n              {\n                guard: 'is busy',\n                reenter: true,\n              },\n              {\n                target: 'syncing',\n              },\n            ],\n          },\n          on: {\n            'update value': [\n              {\n                actions: ['assign pending value'],\n              },\n            ],\n          },\n        },\n        syncing: {\n          always: {\n            guard: 'pending value equals previous value',\n            target: 'idle',\n            actions: ['clear pending value', 'assign initial value synced'],\n          },\n          invoke: {\n            src: 'sync value',\n            id: 'sync value',\n            input: ({context}) => {\n              return {\n                context: {\n                  keyGenerator: context.keyGenerator,\n                  previousValue: context.previousValue,\n                  readOnly: context.readOnly,\n                  schema: context.schema,\n                },\n                slateEditor: context.slateEditor,\n                streamBlocks: !context.initialValueSynced,\n                value: context.pendingValue,\n              }\n            },\n          },\n          on: {\n            'update value': {\n              actions: ['assign pending value'],\n            },\n            'patch': {\n              actions: [emit(({event}) => event)],\n            },\n            'invalid value': {\n              actions: [emit(({event}) => event)],\n            },\n            'value changed': {\n              actions: [emit(({event}) => event)],\n            },\n            'done syncing': [\n              {\n                guard: 'value changed while syncing',\n                actions: [\n                  'assign previous value',\n                  'assign initial value synced',\n                ],\n                reenter: true,\n              },\n              {\n                target: 'idle',\n                actions: [\n                  'clear pending value',\n                  'assign previous value',\n                  'assign initial value synced',\n                ],\n              },\n            ],\n          },\n        },\n      },\n    },\n  },\n})\n\nconst debug = debugWithName('hook:useSyncValue')\n\nasync function updateValue({\n  context,\n  sendBack,\n  slateEditor,\n  streamBlocks,\n  value,\n}: {\n  context: {\n    keyGenerator: () => string\n    previousValue: Array<PortableTextBlock> | undefined\n    readOnly: boolean\n    schema: EditorSchema\n  }\n  sendBack: (event: SyncValueEvent) => void\n  slateEditor: PortableTextSlateEditor\n  streamBlocks: boolean\n  value: PortableTextBlock[] | undefined\n}) {\n  let isChanged = false\n  let isValid = true\n\n  const hadSelection = !!slateEditor.selection\n\n  // If empty value, remove everything in the editor and insert a placeholder block\n  if (!value || value.length === 0) {\n    debug('Value is empty')\n    Editor.withoutNormalizing(slateEditor, () => {\n      withoutSaving(slateEditor, () => {\n        withoutPatching(slateEditor, () => {\n          if (hadSelection) {\n            Transforms.deselect(slateEditor)\n          }\n          const childrenLength = slateEditor.children.length\n          slateEditor.children.forEach((_, index) => {\n            Transforms.removeNodes(slateEditor, {\n              at: [childrenLength - 1 - index],\n            })\n          })\n          Transforms.insertNodes(\n            slateEditor,\n            slateEditor.pteCreateTextBlock({decorators: []}),\n            {at: [0]},\n          )\n          // Add a new selection in the top of the document\n          if (hadSelection) {\n            Transforms.select(slateEditor, [0, 0])\n          }\n        })\n      })\n    })\n    isChanged = true\n  }\n  // Remove, replace or add nodes according to what is changed.\n  if (value && value.length > 0) {\n    const slateValueFromProps = toSlateValue(value, {\n      schemaTypes: context.schema,\n    })\n\n    await new Promise<void>((resolve) => {\n      Editor.withoutNormalizing(slateEditor, () => {\n        withRemoteChanges(slateEditor, () => {\n          withoutPatching(slateEditor, async () => {\n            const childrenLength = slateEditor.children.length\n\n            // Remove blocks that have become superfluous\n            if (slateValueFromProps.length < childrenLength) {\n              for (\n                let i = childrenLength - 1;\n                i > slateValueFromProps.length - 1;\n                i--\n              ) {\n                Transforms.removeNodes(slateEditor, {\n                  at: [i],\n                })\n              }\n              isChanged = true\n            }\n\n            for await (const [currentBlock, currentBlockIndex] of getBlocks({\n              slateValue: slateValueFromProps,\n              streamBlocks,\n            })) {\n              // Go through all of the blocks and see if they need to be updated\n              const {blockChanged, blockValid} = syncBlock({\n                context,\n                sendBack,\n                block: currentBlock,\n                index: currentBlockIndex,\n                slateEditor,\n                value,\n              })\n              isChanged = blockChanged || isChanged\n              isValid = isValid && blockValid\n            }\n\n            resolve()\n          })\n        })\n      })\n    })\n  }\n\n  if (!isValid) {\n    debug('Invalid value, returning')\n    sendBack({type: 'done syncing', value})\n    return\n  }\n\n  if (isChanged) {\n    debug('Server value changed, syncing editor')\n    try {\n      slateEditor.onChange()\n    } catch (err) {\n      console.error(err)\n      sendBack({\n        type: 'invalid value',\n        resolution: null,\n        value,\n      })\n      sendBack({type: 'done syncing', value})\n      return\n    }\n    if (hadSelection && !slateEditor.selection) {\n      Transforms.select(slateEditor, {\n        anchor: {path: [0, 0], offset: 0},\n        focus: {path: [0, 0], offset: 0},\n      })\n      slateEditor.onChange()\n    }\n    sendBack({type: 'value changed', value})\n  } else {\n    debug('Server value and editor value is equal, no need to sync.')\n  }\n\n  sendBack({type: 'done syncing', value})\n}\n\nasync function* getBlocks({\n  slateValue,\n  streamBlocks,\n}: {\n  slateValue: Array<Descendant>\n  streamBlocks: boolean\n}) {\n  let index = 0\n  for await (const block of slateValue) {\n    if (streamBlocks) {\n      await new Promise<void>((resolve) => setTimeout(resolve, 0))\n    }\n    yield [block, index] as const\n    index++\n  }\n}\n\nfunction syncBlock({\n  context,\n  sendBack,\n  block,\n  index,\n  slateEditor,\n  value,\n}: {\n  context: {\n    keyGenerator: () => string\n    previousValue: Array<PortableTextBlock> | undefined\n    readOnly: boolean\n    schema: EditorSchema\n  }\n  sendBack: (event: SyncValueEvent) => void\n  block: Descendant\n  index: number\n  slateEditor: PortableTextSlateEditor\n  value: Array<PortableTextBlock>\n}) {\n  let blockChanged = false\n  let blockValid = true\n  const currentBlock = block\n  const currentBlockIndex = index\n  const oldBlock = slateEditor.children[currentBlockIndex]\n  const hasChanges = oldBlock && !isEqual(currentBlock, oldBlock)\n\n  Editor.withoutNormalizing(slateEditor, () => {\n    withRemoteChanges(slateEditor, () => {\n      withoutPatching(slateEditor, () => {\n        if (hasChanges && blockValid) {\n          const validationValue = [value[currentBlockIndex]]\n          const validation = validateValue(\n            validationValue,\n            context.schema,\n            context.keyGenerator,\n          )\n          // Resolve validations that can be resolved automatically, without involving the user (but only if the value was changed)\n          if (\n            !validation.valid &&\n            validation.resolution?.autoResolve &&\n            validation.resolution?.patches.length > 0\n          ) {\n            // Only apply auto resolution if the value has been populated before and is different from the last one.\n            if (\n              !context.readOnly &&\n              context.previousValue &&\n              context.previousValue !== value\n            ) {\n              // Give a console warning about the fact that it did an auto resolution\n              console.warn(\n                `${validation.resolution.action} for block with _key '${validationValue[0]._key}'. ${validation.resolution?.description}`,\n              )\n              validation.resolution.patches.forEach((patch) => {\n                sendBack({type: 'patch', patch})\n              })\n            }\n          }\n          if (validation.valid || validation.resolution?.autoResolve) {\n            if (oldBlock._key === currentBlock._key) {\n              if (debug.enabled) debug('Updating block', oldBlock, currentBlock)\n              _updateBlock(\n                slateEditor,\n                currentBlock,\n                oldBlock,\n                currentBlockIndex,\n              )\n            } else {\n              if (debug.enabled)\n                debug('Replacing block', oldBlock, currentBlock)\n              _replaceBlock(slateEditor, currentBlock, currentBlockIndex)\n            }\n            blockChanged = true\n          } else {\n            sendBack({\n              type: 'invalid value',\n              resolution: validation.resolution,\n              value,\n            })\n            blockValid = false\n          }\n        }\n\n        if (!oldBlock && blockValid) {\n          const validationValue = [value[currentBlockIndex]]\n          const validation = validateValue(\n            validationValue,\n            context.schema,\n            context.keyGenerator,\n          )\n          if (debug.enabled)\n            debug(\n              'Validating and inserting new block in the end of the value',\n              currentBlock,\n            )\n          if (validation.valid || validation.resolution?.autoResolve) {\n            Transforms.insertNodes(slateEditor, currentBlock, {\n              at: [currentBlockIndex],\n            })\n          } else {\n            debug('Invalid', validation)\n            sendBack({\n              type: 'invalid value',\n              resolution: validation.resolution,\n              value,\n            })\n            blockValid = false\n          }\n        }\n      })\n    })\n  })\n\n  return {blockChanged, blockValid}\n}\n\n/**\n * This code is moved out of the above algorithm to keep complexity down.\n * @internal\n */\nfunction _replaceBlock(\n  slateEditor: PortableTextSlateEditor,\n  currentBlock: Descendant,\n  currentBlockIndex: number,\n) {\n  // While replacing the block and the current selection focus is on the replaced block,\n  // temporarily deselect the editor then optimistically try to restore the selection afterwards.\n  const currentSelection = slateEditor.selection\n  const selectionFocusOnBlock =\n    currentSelection && currentSelection.focus.path[0] === currentBlockIndex\n  if (selectionFocusOnBlock) {\n    Transforms.deselect(slateEditor)\n  }\n  Transforms.removeNodes(slateEditor, {at: [currentBlockIndex]})\n  Transforms.insertNodes(slateEditor, currentBlock, {at: [currentBlockIndex]})\n  slateEditor.onChange()\n  if (selectionFocusOnBlock) {\n    Transforms.select(slateEditor, currentSelection)\n  }\n}\n\n/**\n * This code is moved out of the above algorithm to keep complexity down.\n * @internal\n */\nfunction _updateBlock(\n  slateEditor: PortableTextSlateEditor,\n  currentBlock: Descendant,\n  oldBlock: Descendant,\n  currentBlockIndex: number,\n) {\n  // Update the root props on the block\n  Transforms.setNodes(slateEditor, currentBlock as Partial<Node>, {\n    at: [currentBlockIndex],\n  })\n  // Text block's need to have their children updated as well (setNode does not target a node's children)\n  if (\n    slateEditor.isTextBlock(currentBlock) &&\n    slateEditor.isTextBlock(oldBlock)\n  ) {\n    const oldBlockChildrenLength = oldBlock.children.length\n    if (currentBlock.children.length < oldBlockChildrenLength) {\n      // Remove any children that have become superfluous\n      Array.from(\n        Array(oldBlockChildrenLength - currentBlock.children.length),\n      ).forEach((_, index) => {\n        const childIndex = oldBlockChildrenLength - 1 - index\n        if (childIndex > 0) {\n          debug('Removing child')\n          Transforms.removeNodes(slateEditor, {\n            at: [currentBlockIndex, childIndex],\n          })\n        }\n      })\n    }\n    currentBlock.children.forEach(\n      (currentBlockChild, currentBlockChildIndex) => {\n        const oldBlockChild = oldBlock.children[currentBlockChildIndex]\n        const isChildChanged = !isEqual(currentBlockChild, oldBlockChild)\n        const isTextChanged = !isEqual(\n          currentBlockChild.text,\n          oldBlockChild?.text,\n        )\n        const path = [currentBlockIndex, currentBlockChildIndex]\n        if (isChildChanged) {\n          // Update if this is the same child\n          if (currentBlockChild._key === oldBlockChild?._key) {\n            debug('Updating changed child', currentBlockChild, oldBlockChild)\n            Transforms.setNodes(\n              slateEditor,\n              currentBlockChild as Partial<Node>,\n              {\n                at: path,\n              },\n            )\n            const isSpanNode =\n              Text.isText(currentBlockChild) &&\n              currentBlockChild._type === 'span' &&\n              Text.isText(oldBlockChild) &&\n              oldBlockChild._type === 'span'\n            if (isSpanNode && isTextChanged) {\n              Transforms.delete(slateEditor, {\n                at: {\n                  focus: {path, offset: 0},\n                  anchor: {path, offset: oldBlockChild.text.length},\n                },\n              })\n              Transforms.insertText(slateEditor, currentBlockChild.text, {\n                at: path,\n              })\n              slateEditor.onChange()\n            } else if (!isSpanNode) {\n              // If it's a inline block, also update the void text node key\n              debug('Updating changed inline object child', currentBlockChild)\n              Transforms.setNodes(\n                slateEditor,\n                {_key: VOID_CHILD_KEY},\n                {\n                  at: [...path, 0],\n                  voids: true,\n                },\n              )\n            }\n            // Replace the child if _key's are different\n          } else if (oldBlockChild) {\n            debug('Replacing child', currentBlockChild)\n            Transforms.removeNodes(slateEditor, {\n              at: [currentBlockIndex, currentBlockChildIndex],\n            })\n            Transforms.insertNodes(slateEditor, currentBlockChild as Node, {\n              at: [currentBlockIndex, currentBlockChildIndex],\n            })\n            slateEditor.onChange()\n            // Insert it if it didn't exist before\n          } else if (!oldBlockChild) {\n            debug('Inserting new child', currentBlockChild)\n            Transforms.insertNodes(slateEditor, currentBlockChild as Node, {\n              at: [currentBlockIndex, currentBlockChildIndex],\n            })\n            slateEditor.onChange()\n          }\n        }\n      },\n    )\n  }\n}\n","import {useActorRef, useSelector} from '@xstate/react'\nimport {useEffect} from 'react'\nimport type {PortableTextSlateEditor} from '../../types/editor'\nimport {debugWithName} from '../../utils/debug'\nimport type {EditorActor} from '../editor-machine'\nimport {mutationMachine} from '../mutation-machine'\nimport {syncMachine} from '../sync-machine'\n\nconst debug = debugWithName('component:PortableTextEditor:Synchronizer')\n\n/**\n * @internal\n */\nexport interface SynchronizerProps {\n  editorActor: EditorActor\n  slateEditor: PortableTextSlateEditor\n}\n\n/**\n * Synchronizes the server value with the editor, and provides various contexts for the editor state.\n * @internal\n */\nexport function Synchronizer(props: SynchronizerProps) {\n  const {editorActor, slateEditor} = props\n\n  const value = useSelector(props.editorActor, (s) => s.context.value)\n  const readOnly = useSelector(props.editorActor, (s) =>\n    s.matches({'edit mode': 'read only'}),\n  )\n  const syncActorRef = useActorRef(syncMachine, {\n    input: {\n      keyGenerator: props.editorActor.getSnapshot().context.keyGenerator,\n      readOnly: props.editorActor\n        .getSnapshot()\n        .matches({'edit mode': 'read only'}),\n      schema: props.editorActor.getSnapshot().context.schema,\n      slateEditor,\n    },\n  })\n  const mutationActorRef = useActorRef(mutationMachine, {\n    input: {\n      schema: editorActor.getSnapshot().context.schema,\n      slateEditor,\n    },\n  })\n\n  useEffect(() => {\n    const subscription = mutationActorRef.on('*', (event) => {\n      if (event.type === 'has pending patches') {\n        syncActorRef.send({type: 'has pending patches'})\n      }\n      if (event.type === 'mutation') {\n        syncActorRef.send({type: 'mutation'})\n        editorActor.send({\n          type: 'mutation',\n          patches: event.patches,\n          snapshot: event.snapshot,\n          value: event.snapshot,\n        })\n      }\n    })\n\n    return () => {\n      subscription.unsubscribe()\n    }\n  }, [mutationActorRef, syncActorRef, editorActor])\n\n  useEffect(() => {\n    const subscription = syncActorRef.on('*', (event) => {\n      props.editorActor.send(event)\n    })\n\n    return () => {\n      subscription.unsubscribe()\n    }\n  }, [props.editorActor, syncActorRef])\n\n  useEffect(() => {\n    syncActorRef.send({type: 'update readOnly', readOnly})\n  }, [syncActorRef, readOnly])\n\n  useEffect(() => {\n    debug('Value from props changed, syncing new value')\n    syncActorRef.send({type: 'update value', value})\n  }, [syncActorRef, value])\n\n  // Subscribe to, and handle changes from the editor\n  useEffect(() => {\n    debug('Subscribing to patch events')\n    const sub = editorActor.on('patch', (event) => {\n      mutationActorRef.send(event)\n    })\n    return () => {\n      debug('Unsubscribing to patch events')\n      sub.unsubscribe()\n    }\n  }, [editorActor, mutationActorRef, slateEditor])\n\n  return null\n}\n\nSynchronizer.displayName = 'Synchronizer'\n","import {\n  diffMatchPatch,\n  insert,\n  set,\n  setIfMissing,\n  unset,\n  type InsertPosition,\n  type Patch,\n} from '@portabletext/patches'\nimport type {Path, PortableTextSpan, PortableTextTextBlock} from '@sanity/types'\nimport {get, isUndefined, omitBy} from 'lodash'\nimport {\n  Text,\n  type Descendant,\n  type InsertNodeOperation,\n  type InsertTextOperation,\n  type MergeNodeOperation,\n  type MoveNodeOperation,\n  type RemoveNodeOperation,\n  type RemoveTextOperation,\n  type SetNodeOperation,\n  type SplitNodeOperation,\n} from 'slate'\nimport type {PatchFunctions} from '../editor/plugins/createWithPatches'\nimport type {\n  PortableTextMemberSchemaTypes,\n  PortableTextSlateEditor,\n} from '../types/editor'\nimport {debugWithName} from './debug'\nimport {fromSlateValue} from './values'\n\nconst debug = debugWithName('operationToPatches')\n\nexport function createOperationToPatches(\n  types: PortableTextMemberSchemaTypes,\n): PatchFunctions {\n  const textBlockName = types.block.name\n  function insertTextPatch(\n    editor: PortableTextSlateEditor,\n    operation: InsertTextOperation,\n    beforeValue: Descendant[],\n  ) {\n    if (debug.enabled) {\n      debug('Operation', JSON.stringify(operation, null, 2))\n    }\n    const block =\n      editor.isTextBlock(editor.children[operation.path[0]]) &&\n      editor.children[operation.path[0]]\n    if (!block) {\n      throw new Error('Could not find block')\n    }\n    const textChild =\n      editor.isTextBlock(block) &&\n      editor.isTextSpan(block.children[operation.path[1]]) &&\n      (block.children[operation.path[1]] as PortableTextSpan)\n    if (!textChild) {\n      throw new Error('Could not find child')\n    }\n    const path: Path = [\n      {_key: block._key},\n      'children',\n      {_key: textChild._key},\n      'text',\n    ]\n    const prevBlock = beforeValue[operation.path[0]]\n    const prevChild =\n      editor.isTextBlock(prevBlock) && prevBlock.children[operation.path[1]]\n    const prevText = editor.isTextSpan(prevChild) ? prevChild.text : ''\n    const patch = diffMatchPatch(prevText, textChild.text, path)\n    return patch.value.length ? [patch] : []\n  }\n\n  function removeTextPatch(\n    editor: PortableTextSlateEditor,\n    operation: RemoveTextOperation,\n    beforeValue: Descendant[],\n  ) {\n    const block = editor && editor.children[operation.path[0]]\n    if (!block) {\n      throw new Error('Could not find block')\n    }\n    const child =\n      (editor.isTextBlock(block) && block.children[operation.path[1]]) ||\n      undefined\n    const textChild: PortableTextSpan | undefined = editor.isTextSpan(child)\n      ? child\n      : undefined\n    if (child && !textChild) {\n      throw new Error('Expected span')\n    }\n    if (!textChild) {\n      throw new Error('Could not find child')\n    }\n    const path: Path = [\n      {_key: block._key},\n      'children',\n      {_key: textChild._key},\n      'text',\n    ]\n    const beforeBlock = beforeValue[operation.path[0]]\n    const prevTextChild =\n      editor.isTextBlock(beforeBlock) && beforeBlock.children[operation.path[1]]\n    const prevText = editor.isTextSpan(prevTextChild) && prevTextChild.text\n    const patch = diffMatchPatch(prevText || '', textChild.text, path)\n    return patch.value ? [patch] : []\n  }\n\n  function setNodePatch(\n    editor: PortableTextSlateEditor,\n    operation: SetNodeOperation,\n  ) {\n    if (operation.path.length === 1) {\n      const block = editor.children[operation.path[0]]\n      if (typeof block._key !== 'string') {\n        throw new Error('Expected block to have a _key')\n      }\n      const setNode = omitBy(\n        {...editor.children[operation.path[0]], ...operation.newProperties},\n        isUndefined,\n      ) as unknown as Descendant\n      return [\n        set(fromSlateValue([setNode], textBlockName)[0], [{_key: block._key}]),\n      ]\n    } else if (operation.path.length === 2) {\n      const block = editor.children[operation.path[0]]\n      if (editor.isTextBlock(block)) {\n        const child = block.children[operation.path[1]]\n        if (child) {\n          const blockKey = block._key\n          const childKey = child._key\n          const patches: Patch[] = []\n          const keys = Object.keys(operation.newProperties)\n          keys.forEach((keyName) => {\n            // Special case for setting _key on a child. We have to target it by index and not the _key.\n            if (keys.length === 1 && keyName === '_key') {\n              const val = get(operation.newProperties, keyName)\n              patches.push(\n                set(val, [\n                  {_key: blockKey},\n                  'children',\n                  block.children.indexOf(child),\n                  keyName,\n                ]),\n              )\n            } else {\n              const val = get(operation.newProperties, keyName)\n              patches.push(\n                set(val, [\n                  {_key: blockKey},\n                  'children',\n                  {_key: childKey},\n                  keyName,\n                ]),\n              )\n            }\n          })\n          return patches\n        }\n        throw new Error('Could not find a valid child')\n      }\n      throw new Error('Could not find a valid block')\n    } else {\n      throw new Error(\n        `Unexpected path encountered: ${JSON.stringify(operation.path)}`,\n      )\n    }\n  }\n\n  function insertNodePatch(\n    editor: PortableTextSlateEditor,\n    operation: InsertNodeOperation,\n    beforeValue: Descendant[],\n  ): Patch[] {\n    const block = beforeValue[operation.path[0]]\n    const isTextBlock = editor.isTextBlock(block)\n    if (operation.path.length === 1) {\n      const position = operation.path[0] === 0 ? 'before' : 'after'\n      const beforeBlock = beforeValue[operation.path[0] - 1]\n      const targetKey =\n        operation.path[0] === 0 ? block?._key : beforeBlock?._key\n      if (targetKey) {\n        return [\n          insert(\n            [fromSlateValue([operation.node as Descendant], textBlockName)[0]],\n            position,\n            [{_key: targetKey}],\n          ),\n        ]\n      }\n      return [\n        setIfMissing(beforeValue, []),\n        insert(\n          [fromSlateValue([operation.node as Descendant], textBlockName)[0]],\n          'before',\n          [operation.path[0]],\n        ),\n      ]\n    } else if (\n      isTextBlock &&\n      operation.path.length === 2 &&\n      editor.children[operation.path[0]]\n    ) {\n      const position =\n        block.children.length === 0 || !block.children[operation.path[1] - 1]\n          ? 'before'\n          : 'after'\n      const node = {...operation.node} as Descendant\n      if (!node._type && Text.isText(node)) {\n        node._type = 'span'\n        node.marks = []\n      }\n      const blk = fromSlateValue(\n        [\n          {\n            _key: 'bogus',\n            _type: textBlockName,\n            children: [node],\n          },\n        ],\n        textBlockName,\n      )[0] as PortableTextTextBlock\n      const child = blk.children[0]\n      return [\n        insert([child], position, [\n          {_key: block._key},\n          'children',\n          block.children.length <= 1 || !block.children[operation.path[1] - 1]\n            ? 0\n            : {_key: block.children[operation.path[1] - 1]._key},\n        ]),\n      ]\n    }\n    debug(\n      'Something was inserted into a void block. Not producing editor patches.',\n    )\n    return []\n  }\n\n  function splitNodePatch(\n    editor: PortableTextSlateEditor,\n    operation: SplitNodeOperation,\n    beforeValue: Descendant[],\n  ) {\n    const patches: Patch[] = []\n    const splitBlock = editor.children[operation.path[0]]\n    if (!editor.isTextBlock(splitBlock)) {\n      throw new Error(\n        `Block with path ${JSON.stringify(\n          operation.path[0],\n        )} is not a text block and can't be split`,\n      )\n    }\n    if (operation.path.length === 1) {\n      const oldBlock = beforeValue[operation.path[0]]\n      if (editor.isTextBlock(oldBlock)) {\n        const targetValue = fromSlateValue(\n          [editor.children[operation.path[0] + 1]],\n          textBlockName,\n        )[0]\n        if (targetValue) {\n          patches.push(\n            insert([targetValue], 'after', [{_key: splitBlock._key}]),\n          )\n          const spansToUnset = oldBlock.children.slice(operation.position)\n          spansToUnset.forEach((span) => {\n            const path = [{_key: oldBlock._key}, 'children', {_key: span._key}]\n            patches.push(unset(path))\n          })\n        }\n      }\n      return patches\n    }\n    if (operation.path.length === 2) {\n      const splitSpan = splitBlock.children[operation.path[1]]\n      if (editor.isTextSpan(splitSpan)) {\n        const targetSpans = (\n          fromSlateValue(\n            [\n              {\n                ...splitBlock,\n                children: splitBlock.children.slice(\n                  operation.path[1] + 1,\n                  operation.path[1] + 2,\n                ),\n              } as Descendant,\n            ],\n            textBlockName,\n          )[0] as PortableTextTextBlock\n        ).children\n\n        patches.push(\n          insert(targetSpans, 'after', [\n            {_key: splitBlock._key},\n            'children',\n            {_key: splitSpan._key},\n          ]),\n        )\n        patches.push(\n          set(splitSpan.text, [\n            {_key: splitBlock._key},\n            'children',\n            {_key: splitSpan._key},\n            'text',\n          ]),\n        )\n      }\n      return patches\n    }\n    return patches\n  }\n\n  function removeNodePatch(\n    editor: PortableTextSlateEditor,\n    operation: RemoveNodeOperation,\n    beforeValue: Descendant[],\n  ) {\n    const block = beforeValue[operation.path[0]]\n    if (operation.path.length === 1) {\n      // Remove a single block\n      if (block && block._key) {\n        return [unset([{_key: block._key}])]\n      }\n      throw new Error('Block not found')\n    } else if (editor.isTextBlock(block) && operation.path.length === 2) {\n      const spanToRemove = block.children[operation.path[1]]\n\n      if (spanToRemove) {\n        const spansMatchingKey = block.children.filter(\n          (span) => span._key === operation.node._key,\n        )\n\n        if (spansMatchingKey.length > 1) {\n          console.warn(\n            `Multiple spans have \\`_key\\` ${operation.node._key}. It's ambiguous which one to remove.`,\n            JSON.stringify(block, null, 2),\n          )\n          return []\n        }\n\n        return [\n          unset([{_key: block._key}, 'children', {_key: spanToRemove._key}]),\n        ]\n      }\n      debug('Span not found in editor trying to remove node')\n      return []\n    } else {\n      debug('Not creating patch inside object block')\n      return []\n    }\n  }\n\n  function mergeNodePatch(\n    editor: PortableTextSlateEditor,\n    operation: MergeNodeOperation,\n    beforeValue: Descendant[],\n  ) {\n    const patches: Patch[] = []\n\n    const block = beforeValue[operation.path[0]]\n    const updatedBlock = editor.children[operation.path[0]]\n\n    if (operation.path.length === 1) {\n      if (block?._key) {\n        const newBlock = fromSlateValue(\n          [editor.children[operation.path[0] - 1]],\n          textBlockName,\n        )[0]\n        patches.push(set(newBlock, [{_key: newBlock._key}]))\n        patches.push(unset([{_key: block._key}]))\n      } else {\n        throw new Error('Target key not found!')\n      }\n    } else if (\n      editor.isTextBlock(block) &&\n      editor.isTextBlock(updatedBlock) &&\n      operation.path.length === 2\n    ) {\n      const updatedSpan =\n        updatedBlock.children[operation.path[1] - 1] &&\n        editor.isTextSpan(updatedBlock.children[operation.path[1] - 1])\n          ? updatedBlock.children[operation.path[1] - 1]\n          : undefined\n      const removedSpan =\n        block.children[operation.path[1]] &&\n        editor.isTextSpan(block.children[operation.path[1]])\n          ? block.children[operation.path[1]]\n          : undefined\n\n      if (updatedSpan) {\n        const spansMatchingKey = block.children.filter(\n          (span) => span._key === updatedSpan._key,\n        )\n\n        if (spansMatchingKey.length === 1) {\n          patches.push(\n            set(updatedSpan.text, [\n              {_key: block._key},\n              'children',\n              {_key: updatedSpan._key},\n              'text',\n            ]),\n          )\n        } else {\n          console.warn(\n            `Multiple spans have \\`_key\\` ${updatedSpan._key}. It's ambiguous which one to update.`,\n            JSON.stringify(block, null, 2),\n          )\n        }\n      }\n\n      if (removedSpan) {\n        const spansMatchingKey = block.children.filter(\n          (span) => span._key === removedSpan._key,\n        )\n\n        if (spansMatchingKey.length === 1) {\n          patches.push(\n            unset([{_key: block._key}, 'children', {_key: removedSpan._key}]),\n          )\n        } else {\n          console.warn(\n            `Multiple spans have \\`_key\\` ${removedSpan._key}. It's ambiguous which one to remove.`,\n            JSON.stringify(block, null, 2),\n          )\n        }\n      }\n    } else {\n      debug(\"Void nodes can't be merged, not creating any patches\")\n    }\n    return patches\n  }\n\n  function moveNodePatch(\n    editor: PortableTextSlateEditor,\n    operation: MoveNodeOperation,\n    beforeValue: Descendant[],\n  ) {\n    const patches: Patch[] = []\n    const block = beforeValue[operation.path[0]]\n    const targetBlock = beforeValue[operation.newPath[0]]\n\n    if (!targetBlock) {\n      return patches\n    }\n\n    if (operation.path.length === 1) {\n      const position: InsertPosition =\n        operation.path[0] > operation.newPath[0] ? 'before' : 'after'\n      patches.push(unset([{_key: block._key}]))\n      patches.push(\n        insert([fromSlateValue([block], textBlockName)[0]], position, [\n          {_key: targetBlock._key},\n        ]),\n      )\n    } else if (\n      operation.path.length === 2 &&\n      editor.isTextBlock(block) &&\n      editor.isTextBlock(targetBlock)\n    ) {\n      const child = block.children[operation.path[1]]\n      const targetChild = targetBlock.children[operation.newPath[1]]\n      const position =\n        operation.newPath[1] === targetBlock.children.length\n          ? 'after'\n          : 'before'\n      const childToInsert = (\n        fromSlateValue([block], textBlockName)[0] as PortableTextTextBlock\n      ).children[operation.path[1]]\n      patches.push(unset([{_key: block._key}, 'children', {_key: child._key}]))\n      patches.push(\n        insert([childToInsert], position, [\n          {_key: targetBlock._key},\n          'children',\n          {_key: targetChild._key},\n        ]),\n      )\n    }\n    return patches\n  }\n\n  return {\n    insertNodePatch,\n    insertTextPatch,\n    mergeNodePatch,\n    moveNodePatch,\n    removeNodePatch,\n    removeTextPatch,\n    setNodePatch,\n    splitNodePatch,\n  }\n}\n","import type {Editor} from 'slate'\nimport type {EditorActor} from '../editor-machine'\n\nexport function createWithEventListeners(\n  editorActor: EditorActor,\n  subscriptions: Array<() => () => void>,\n) {\n  return function withEventListeners(editor: Editor) {\n    if (editorActor.getSnapshot().context.maxBlocks !== undefined) {\n      return editor\n    }\n\n    subscriptions.push(() => {\n      const subscription = editorActor.on('*', (event) => {\n        switch (event.type) {\n          case 'annotation.add': {\n            editorActor.send({\n              type: 'behavior event',\n              behaviorEvent: {\n                type: 'annotation.add',\n                annotation: event.annotation,\n              },\n              editor,\n            })\n            break\n          }\n          case 'annotation.remove': {\n            editorActor.send({\n              type: 'behavior event',\n              behaviorEvent: {\n                type: 'annotation.remove',\n                annotation: event.annotation,\n              },\n              editor,\n            })\n            break\n          }\n          case 'annotation.toggle': {\n            editorActor.send({\n              type: 'behavior event',\n              behaviorEvent: {\n                type: 'annotation.toggle',\n                annotation: event.annotation,\n              },\n              editor,\n            })\n            break\n          }\n          case 'blur': {\n            editorActor.send({\n              type: 'behavior event',\n              behaviorEvent: {\n                type: 'blur',\n              },\n              editor,\n            })\n            break\n          }\n          case 'decorator.add': {\n            editorActor.send({\n              type: 'behavior event',\n              behaviorEvent: {\n                type: 'decorator.add',\n                decorator: event.decorator,\n              },\n              editor,\n            })\n            break\n          }\n          case 'decorator.remove': {\n            editorActor.send({\n              type: 'behavior event',\n              behaviorEvent: {\n                type: 'decorator.remove',\n                decorator: event.decorator,\n              },\n              editor,\n            })\n            break\n          }\n          case 'decorator.toggle': {\n            editorActor.send({\n              type: 'behavior event',\n              behaviorEvent: {\n                type: 'decorator.toggle',\n                decorator: event.decorator,\n              },\n              editor,\n            })\n            break\n          }\n          case 'focus': {\n            editorActor.send({\n              type: 'behavior event',\n              behaviorEvent: {\n                type: 'focus',\n              },\n              editor,\n            })\n            break\n          }\n          case 'insert.block object': {\n            editorActor.send({\n              type: 'behavior event',\n              behaviorEvent: {\n                type: 'insert.block object',\n                placement: event.placement,\n                blockObject: event.blockObject,\n              },\n              editor,\n            })\n            break\n          }\n          case 'insert.inline object': {\n            editorActor.send({\n              type: 'behavior event',\n              behaviorEvent: {\n                type: 'insert.inline object',\n                inlineObject: event.inlineObject,\n              },\n              editor,\n            })\n            break\n          }\n          case 'list item.toggle': {\n            editorActor.send({\n              type: 'behavior event',\n              behaviorEvent: {\n                type: 'list item.toggle',\n                listItem: event.listItem,\n              },\n              editor,\n            })\n            break\n          }\n          case 'style.toggle': {\n            editorActor.send({\n              type: 'behavior event',\n              behaviorEvent: {\n                type: 'style.toggle',\n                style: event.style,\n              },\n              editor,\n            })\n            break\n          }\n        }\n      })\n\n      return () => {\n        subscription.unsubscribe()\n      }\n    })\n\n    editor.addMark = (mark) => {\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'decorator.add',\n          decorator: mark,\n        },\n        editor,\n      })\n      return\n    }\n\n    editor.removeMark = (mark) => {\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'decorator.remove',\n          decorator: mark,\n        },\n        editor,\n      })\n      return\n    }\n\n    editor.deleteBackward = (unit) => {\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'delete.backward',\n          unit,\n        },\n        editor,\n      })\n      return\n    }\n\n    editor.deleteForward = (unit) => {\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'delete.forward',\n          unit,\n        },\n        editor,\n      })\n      return\n    }\n\n    editor.insertBreak = () => {\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'insert.break',\n        },\n        editor,\n      })\n      return\n    }\n\n    editor.insertSoftBreak = () => {\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'insert.soft break',\n        },\n        editor,\n      })\n      return\n    }\n\n    editor.insertText = (text, options) => {\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'insert.text',\n          text,\n          options,\n        },\n        editor,\n      })\n      return\n    }\n\n    return editor\n  }\n}\n","import type {PortableTextSlateEditor} from '../../types/editor'\nimport {isChangingRemotely} from '../../utils/withChanges'\nimport {isRedoing, isUndoing} from '../../utils/withUndoRedo'\nimport type {EditorActor} from '../editor-machine'\n\n/**\n * This plugin makes sure that the PTE maxBlocks prop is respected\n *\n */\nexport function createWithMaxBlocks(editorActor: EditorActor) {\n  return function withMaxBlocks(\n    editor: PortableTextSlateEditor,\n  ): PortableTextSlateEditor {\n    const {apply} = editor\n    editor.apply = (operation) => {\n      if (editorActor.getSnapshot().matches({'edit mode': 'read only'})) {\n        apply(operation)\n        return\n      }\n\n      /**\n       * We don't want to run any side effects when the editor is processing\n       * remote changes.\n       */\n      if (isChangingRemotely(editor)) {\n        apply(operation)\n        return\n      }\n\n      /**\n       * We don't want to run any side effects when the editor is undoing or\n       * redoing operations.\n       */\n      if (isUndoing(editor) || isRedoing(editor)) {\n        apply(operation)\n        return\n      }\n\n      const rows = editorActor.getSnapshot().context.maxBlocks ?? -1\n      if (rows > 0 && editor.children.length >= rows) {\n        if (\n          (operation.type === 'insert_node' ||\n            operation.type === 'split_node') &&\n          operation.path.length === 1\n        ) {\n          return\n        }\n      }\n      apply(operation)\n    }\n    return editor\n  }\n}\n","import {Editor, Element, Node, Transforms} from 'slate'\nimport type {\n  PortableTextMemberSchemaTypes,\n  PortableTextSlateEditor,\n} from '../../types/editor'\nimport {isChangingRemotely} from '../../utils/withChanges'\nimport {isRedoing, isUndoing} from '../../utils/withUndoRedo'\nimport type {EditorActor} from '../editor-machine'\n\n/**\n * This plugin makes sure that every new node in the editor get a new _key prop when created\n *\n */\nexport function createWithObjectKeys(\n  editorActor: EditorActor,\n  schemaTypes: PortableTextMemberSchemaTypes,\n) {\n  return function withKeys(\n    editor: PortableTextSlateEditor,\n  ): PortableTextSlateEditor {\n    const {apply, normalizeNode} = editor\n\n    // The default behavior is to always generate a new key here.\n    // For example, when undoing and redoing we want to retain the keys, but\n    // when we create a new bold span by splitting a non-bold-span we want the produced node to get a new key.\n    editor.apply = (operation) => {\n      /**\n       * We don't want to run any side effects when the editor is processing\n       * remote changes.\n       */\n      if (isChangingRemotely(editor)) {\n        apply(operation)\n        return\n      }\n\n      /**\n       * We don't want to run any side effects when the editor is undoing or\n       * redoing operations.\n       */\n      if (isUndoing(editor) || isRedoing(editor)) {\n        apply(operation)\n        return\n      }\n\n      if (operation.type === 'split_node') {\n        apply({\n          ...operation,\n          properties: {\n            ...operation.properties,\n            _key: editorActor.getSnapshot().context.keyGenerator(),\n          },\n        })\n\n        return\n      }\n\n      if (operation.type === 'insert_node') {\n        if (!Editor.isEditor(operation.node)) {\n          apply({\n            ...operation,\n            node: {\n              ...operation.node,\n              _key: editorActor.getSnapshot().context.keyGenerator(),\n            },\n          })\n\n          return\n        }\n      }\n\n      apply(operation)\n    }\n\n    editor.normalizeNode = (entry) => {\n      const [node, path] = entry\n      if (Element.isElement(node) && node._type === schemaTypes.block.name) {\n        // Set key on block itself\n        if (!node._key) {\n          editorActor.send({type: 'normalizing'})\n          Transforms.setNodes(\n            editor,\n            {_key: editorActor.getSnapshot().context.keyGenerator()},\n            {at: path},\n          )\n          editorActor.send({type: 'done normalizing'})\n          return\n        }\n        // Set keys on it's children\n        for (const [child, childPath] of Node.children(editor, path)) {\n          if (!child._key) {\n            editorActor.send({type: 'normalizing'})\n            Transforms.setNodes(\n              editor,\n              {_key: editorActor.getSnapshot().context.keyGenerator()},\n              {at: childPath},\n            )\n            editorActor.send({type: 'done normalizing'})\n            return\n          }\n        }\n      }\n      normalizeNode(entry)\n    }\n\n    return editor\n  }\n}\n","import {\n  applyAll,\n  type DiffMatchPatch,\n  type InsertPatch,\n  type Patch,\n  type SetPatch,\n  type UnsetPatch,\n} from '@portabletext/patches'\nimport {\n  cleanupEfficiency,\n  DIFF_DELETE,\n  DIFF_EQUAL,\n  DIFF_INSERT,\n  applyPatches as diffMatchPatchApplyPatches,\n  makeDiff,\n  parsePatch,\n} from '@sanity/diff-match-patch'\nimport type {\n  KeyedSegment,\n  Path,\n  PathSegment,\n  PortableTextBlock,\n  PortableTextChild,\n} from '@sanity/types'\nimport {\n  Element,\n  Text,\n  Transforms,\n  type Descendant,\n  type Node,\n  type Path as SlatePath,\n} from 'slate'\nimport type {\n  PortableTextMemberSchemaTypes,\n  PortableTextSlateEditor,\n} from '../types/editor'\nimport {debugWithName} from './debug'\nimport {toSlateValue} from './values'\nimport {KEY_TO_SLATE_ELEMENT} from './weakMaps'\n\nconst debug = debugWithName('applyPatches')\nconst debugVerbose = debug.enabled && true\n\n/**\n * Creates a function that can apply a patch onto a PortableTextSlateEditor.\n */\nexport function createApplyPatch(\n  schemaTypes: PortableTextMemberSchemaTypes,\n): (editor: PortableTextSlateEditor, patch: Patch) => boolean {\n  return (editor: PortableTextSlateEditor, patch: Patch): boolean => {\n    let changed = false\n\n    // Save some CPU cycles by not stringifying unless enabled\n    if (debugVerbose) {\n      debug(\n        '\\n\\nNEW PATCH =============================================================',\n      )\n      debug(JSON.stringify(patch, null, 2))\n    }\n\n    try {\n      switch (patch.type) {\n        case 'insert':\n          changed = insertPatch(editor, patch, schemaTypes)\n          break\n        case 'unset':\n          changed = unsetPatch(editor, patch)\n          break\n        case 'set':\n          changed = setPatch(editor, patch)\n          break\n        case 'diffMatchPatch':\n          changed = diffMatchPatch(editor, patch)\n          break\n        default:\n          debug('Unhandled patch', patch.type)\n      }\n    } catch (err) {\n      console.error(err)\n    }\n\n    return changed\n  }\n}\n\n/**\n * Apply a remote diff match patch to the current PTE instance.\n * Note meant for external consumption, only exported for testing purposes.\n *\n * @param editor - Portable text slate editor instance\n * @param patch - The PTE diff match patch operation to apply\n * @returns true if the patch was applied, false otherwise\n * @internal\n */\nexport function diffMatchPatch(\n  editor: Pick<\n    PortableTextSlateEditor,\n    'children' | 'isTextBlock' | 'apply' | 'selection' | 'onChange'\n  >,\n  patch: DiffMatchPatch,\n): boolean {\n  const {block, child, childPath} = findBlockAndChildFromPath(\n    editor,\n    patch.path,\n  )\n  if (!block) {\n    debug('Block not found')\n    return false\n  }\n  if (!child || !childPath) {\n    debug('Child not found')\n    return false\n  }\n  const isSpanTextDiffMatchPatch =\n    block &&\n    editor.isTextBlock(block) &&\n    patch.path.length === 4 &&\n    patch.path[1] === 'children' &&\n    patch.path[3] === 'text'\n\n  if (!isSpanTextDiffMatchPatch || !Text.isText(child)) {\n    return false\n  }\n\n  const patches = parsePatch(patch.value)\n  const [newValue] = diffMatchPatchApplyPatches(patches, child.text, {\n    allowExceedingIndices: true,\n  })\n  const diff = cleanupEfficiency(makeDiff(child.text, newValue), 5)\n\n  debugState(editor, 'before')\n  let offset = 0\n  for (const [op, text] of diff) {\n    if (op === DIFF_INSERT) {\n      editor.apply({type: 'insert_text', path: childPath, offset, text})\n      offset += text.length\n    } else if (op === DIFF_DELETE) {\n      editor.apply({type: 'remove_text', path: childPath, offset: offset, text})\n    } else if (op === DIFF_EQUAL) {\n      offset += text.length\n    }\n  }\n  debugState(editor, 'after')\n\n  return true\n}\n\nfunction insertPatch(\n  editor: PortableTextSlateEditor,\n  patch: InsertPatch,\n  schemaTypes: PortableTextMemberSchemaTypes,\n) {\n  const {\n    block: targetBlock,\n    child: targetChild,\n    blockPath: targetBlockPath,\n    childPath: targetChildPath,\n  } = findBlockAndChildFromPath(editor, patch.path)\n  if (!targetBlock || !targetBlockPath) {\n    debug('Block not found')\n    return false\n  }\n  if (patch.path.length > 1 && patch.path[1] !== 'children') {\n    debug('Ignoring patch targeting void value')\n    return false\n  }\n  // Insert blocks\n  if (patch.path.length === 1) {\n    const {items, position} = patch\n    const blocksToInsert = toSlateValue(\n      items as PortableTextBlock[],\n      {schemaTypes},\n      KEY_TO_SLATE_ELEMENT.get(editor),\n    ) as Descendant[]\n    const targetBlockIndex = targetBlockPath[0]\n    const normalizedIdx =\n      position === 'after' ? targetBlockIndex + 1 : targetBlockIndex\n    debug(`Inserting blocks at path [${normalizedIdx}]`)\n    debugState(editor, 'before')\n    Transforms.insertNodes(editor, blocksToInsert, {at: [normalizedIdx]})\n    debugState(editor, 'after')\n    return true\n  }\n  // Insert children\n  const {items, position} = patch\n  if (!targetChild || !targetChildPath) {\n    debug('Child not found')\n    return false\n  }\n  const childrenToInsert =\n    targetBlock &&\n    toSlateValue(\n      [{...targetBlock, children: items as PortableTextChild[]}],\n      {schemaTypes},\n      KEY_TO_SLATE_ELEMENT.get(editor),\n    )\n  const targetChildIndex = targetChildPath[1]\n  const normalizedIdx =\n    position === 'after' ? targetChildIndex + 1 : targetChildIndex\n  const childInsertPath = [targetChildPath[0], normalizedIdx]\n  debug(`Inserting children at path ${childInsertPath}`)\n  debugState(editor, 'before')\n  if (childrenToInsert && Element.isElement(childrenToInsert[0])) {\n    Transforms.insertNodes(editor, childrenToInsert[0].children, {\n      at: childInsertPath,\n    })\n  }\n  debugState(editor, 'after')\n  return true\n}\n\nfunction setPatch(editor: PortableTextSlateEditor, patch: SetPatch) {\n  let value = patch.value\n  if (typeof patch.path[3] === 'string') {\n    value = {}\n    value[patch.path[3]] = patch.value\n  }\n  const {block, blockPath, child, childPath} = findBlockAndChildFromPath(\n    editor,\n    patch.path,\n  )\n\n  if (!block) {\n    debug('Block not found')\n    return false\n  }\n  const isTextBlock = editor.isTextBlock(block)\n\n  // Ignore patches targeting nested void data, like 'markDefs'\n  if (isTextBlock && patch.path.length > 1 && patch.path[1] !== 'children') {\n    debug('Ignoring setting void value')\n    return false\n  }\n\n  debugState(editor, 'before')\n\n  // If this is targeting a text block child\n  if (isTextBlock && child && childPath) {\n    if (Text.isText(value) && Text.isText(child)) {\n      const newText = child.text\n      const oldText = value.text\n      if (oldText !== newText) {\n        debug('Setting text property')\n        editor.apply({\n          type: 'remove_text',\n          path: childPath,\n          offset: 0,\n          text: newText,\n        })\n        editor.apply({\n          type: 'insert_text',\n          path: childPath,\n          offset: 0,\n          text: value.text,\n        })\n        // call OnChange here to emit the new selection\n        // the user's selection might be interfering with\n        editor.onChange()\n      }\n    } else {\n      debug('Setting non-text property')\n      editor.apply({\n        type: 'set_node',\n        path: childPath,\n        properties: {},\n        newProperties: value as Partial<Node>,\n      })\n    }\n    return true\n  } else if (Element.isElement(block) && patch.path.length === 1 && blockPath) {\n    debug('Setting block property')\n    const {children, ...nextRest} = value as unknown as PortableTextBlock\n    const {children: prevChildren, ...prevRest} = block || {children: undefined}\n    // Set any block properties\n    editor.apply({\n      type: 'set_node',\n      path: blockPath,\n      properties: {...prevRest},\n      newProperties: nextRest,\n    })\n    // Replace the children in the block\n    // Note that children must be explicitly inserted, and can't be set with set_node\n    debug('Setting children')\n    block.children.forEach((c, cIndex) => {\n      editor.apply({\n        type: 'remove_node',\n        path: blockPath.concat(block.children.length - 1 - cIndex),\n        node: c,\n      })\n    })\n    if (Array.isArray(children)) {\n      children.forEach((c, cIndex) => {\n        editor.apply({\n          type: 'insert_node',\n          path: blockPath.concat(cIndex),\n          node: c,\n        })\n      })\n    }\n  } else if (block && 'value' in block) {\n    const newVal = applyAll([block.value], [patch])[0]\n    Transforms.setNodes(editor, {...block, value: newVal}, {at: blockPath})\n    return true\n  }\n  debugState(editor, 'after')\n  return true\n}\n\nfunction unsetPatch(editor: PortableTextSlateEditor, patch: UnsetPatch) {\n  // Value\n  if (patch.path.length === 0) {\n    debug('Removing everything')\n    debugState(editor, 'before')\n    const previousSelection = editor.selection\n    Transforms.deselect(editor)\n    editor.children.forEach((_child, i) => {\n      Transforms.removeNodes(editor, {at: [i]})\n    })\n    Transforms.insertNodes(editor, editor.pteCreateTextBlock({decorators: []}))\n    if (previousSelection) {\n      Transforms.select(editor, {\n        anchor: {path: [0, 0], offset: 0},\n        focus: {path: [0, 0], offset: 0},\n      })\n    }\n    // call OnChange here to emit the new selection\n    editor.onChange()\n    debugState(editor, 'after')\n    return true\n  }\n  const {block, blockPath, child, childPath} = findBlockAndChildFromPath(\n    editor,\n    patch.path,\n  )\n\n  // Single blocks\n  if (patch.path.length === 1) {\n    if (!block || !blockPath) {\n      debug('Block not found')\n      return false\n    }\n    const blockIndex = blockPath[0]\n    debug(`Removing block at path [${blockIndex}]`)\n    debugState(editor, 'before')\n\n    Transforms.removeNodes(editor, {at: [blockIndex]})\n    debugState(editor, 'after')\n    return true\n  }\n\n  // Unset on text block children\n  if (\n    editor.isTextBlock(block) &&\n    patch.path[1] === 'children' &&\n    patch.path.length === 3\n  ) {\n    if (!child || !childPath) {\n      debug('Child not found')\n      return false\n    }\n    debug(`Unsetting child at path ${JSON.stringify(childPath)}`)\n    debugState(editor, 'before')\n    if (debugVerbose) {\n      debug(`Removing child at path ${JSON.stringify(childPath)}`)\n    }\n    Transforms.removeNodes(editor, {at: childPath})\n    debugState(editor, 'after')\n    return true\n  }\n  return false\n}\n\nfunction isKeyedSegment(segment: PathSegment): segment is KeyedSegment {\n  return typeof segment === 'object' && '_key' in segment\n}\n\nfunction debugState(\n  editor: Pick<\n    PortableTextSlateEditor,\n    'children' | 'isTextBlock' | 'apply' | 'selection'\n  >,\n  stateName: string,\n) {\n  if (!debugVerbose) {\n    return\n  }\n\n  debug(`Children ${stateName}:`, JSON.stringify(editor.children, null, 2))\n  debug(`Selection ${stateName}: `, JSON.stringify(editor.selection, null, 2))\n}\n\nfunction findBlockFromPath(\n  editor: Pick<\n    PortableTextSlateEditor,\n    'children' | 'isTextBlock' | 'apply' | 'selection' | 'onChange'\n  >,\n  path: Path,\n): {block?: Descendant; path?: SlatePath} {\n  let blockIndex = -1\n  const block = editor.children.find((node: Descendant, index: number) => {\n    const isMatch = isKeyedSegment(path[0])\n      ? node._key === path[0]._key\n      : index === path[0]\n    if (isMatch) {\n      blockIndex = index\n    }\n    return isMatch\n  })\n  if (!block) {\n    return {}\n  }\n  return {block, path: [blockIndex] as SlatePath}\n}\n\nfunction findBlockAndChildFromPath(\n  editor: Pick<\n    PortableTextSlateEditor,\n    'children' | 'isTextBlock' | 'apply' | 'selection' | 'onChange'\n  >,\n  path: Path,\n): {\n  child?: Descendant\n  childPath?: SlatePath\n  block?: Descendant\n  blockPath?: SlatePath\n} {\n  const {block, path: blockPath} = findBlockFromPath(editor, path)\n  if (!(Element.isElement(block) && path[1] === 'children')) {\n    return {block, blockPath, child: undefined, childPath: undefined}\n  }\n  let childIndex = -1\n  const child = block.children.find((node, index: number) => {\n    const isMatch = isKeyedSegment(path[2])\n      ? node._key === path[2]._key\n      : index === path[2]\n    if (isMatch) {\n      childIndex = index\n    }\n    return isMatch\n  })\n  if (!child) {\n    return {block, blockPath, child: undefined, childPath: undefined}\n  }\n  return {\n    block,\n    child,\n    blockPath,\n    childPath: blockPath?.concat(childIndex) as SlatePath,\n  }\n}\n","import {insert, setIfMissing, unset, type Patch} from '@portabletext/patches'\nimport {\n  Editor,\n  type Descendant,\n  type InsertNodeOperation,\n  type InsertTextOperation,\n  type MergeNodeOperation,\n  type MoveNodeOperation,\n  type Operation,\n  type RemoveNodeOperation,\n  type RemoveTextOperation,\n  type SetNodeOperation,\n  type SplitNodeOperation,\n} from 'slate'\nimport type {\n  PortableTextMemberSchemaTypes,\n  PortableTextSlateEditor,\n} from '../../types/editor'\nimport {createApplyPatch} from '../../utils/applyPatch'\nimport {debugWithName} from '../../utils/debug'\nimport {fromSlateValue, isEqualToEmptyEditor} from '../../utils/values'\nimport {\n  IS_PROCESSING_REMOTE_CHANGES,\n  KEY_TO_VALUE_ELEMENT,\n} from '../../utils/weakMaps'\nimport {withRemoteChanges} from '../../utils/withChanges'\nimport {\n  isPatching,\n  PATCHING,\n  withoutPatching,\n} from '../../utils/withoutPatching'\nimport type {EditorActor} from '../editor-machine'\nimport {withoutSaving} from './createWithUndoRedo'\n\nconst debug = debugWithName('plugin:withPatches')\nconst debugVerbose = false\n\nexport interface PatchFunctions {\n  insertNodePatch: (\n    editor: PortableTextSlateEditor,\n    operation: InsertNodeOperation,\n    previousChildren: Descendant[],\n  ) => Patch[]\n  insertTextPatch: (\n    editor: PortableTextSlateEditor,\n    operation: InsertTextOperation,\n    previousChildren: Descendant[],\n  ) => Patch[]\n  mergeNodePatch: (\n    editor: PortableTextSlateEditor,\n    operation: MergeNodeOperation,\n    previousChildren: Descendant[],\n  ) => Patch[]\n  moveNodePatch: (\n    editor: PortableTextSlateEditor,\n    operation: MoveNodeOperation,\n    previousChildren: Descendant[],\n  ) => Patch[]\n  removeNodePatch: (\n    editor: PortableTextSlateEditor,\n    operation: RemoveNodeOperation,\n    previousChildren: Descendant[],\n  ) => Patch[]\n  removeTextPatch: (\n    editor: PortableTextSlateEditor,\n    operation: RemoveTextOperation,\n    previousChildren: Descendant[],\n  ) => Patch[]\n  setNodePatch: (\n    editor: PortableTextSlateEditor,\n    operation: SetNodeOperation,\n    previousChildren: Descendant[],\n  ) => Patch[]\n  splitNodePatch: (\n    editor: PortableTextSlateEditor,\n    operation: SplitNodeOperation,\n    previousChildren: Descendant[],\n  ) => Patch[]\n}\n\ninterface Options {\n  editorActor: EditorActor\n  patchFunctions: PatchFunctions\n  schemaTypes: PortableTextMemberSchemaTypes\n  subscriptions: Array<() => () => void>\n}\n\nexport function createWithPatches({\n  editorActor,\n  patchFunctions,\n  schemaTypes,\n  subscriptions,\n}: Options): (editor: PortableTextSlateEditor) => PortableTextSlateEditor {\n  // The previous editor children are needed to figure out the _key of deleted nodes\n  // The editor.children would no longer contain that information if the node is already deleted.\n  let previousChildren: Descendant[]\n\n  const applyPatch = createApplyPatch(schemaTypes)\n\n  return function withPatches(editor: PortableTextSlateEditor) {\n    IS_PROCESSING_REMOTE_CHANGES.set(editor, false)\n    PATCHING.set(editor, true)\n    previousChildren = [...editor.children]\n\n    const {apply} = editor\n    let bufferedPatches: Patch[] = []\n\n    const handleBufferedRemotePatches = () => {\n      if (bufferedPatches.length === 0) {\n        return\n      }\n      const patches = bufferedPatches\n      bufferedPatches = []\n      let changed = false\n      withRemoteChanges(editor, () => {\n        Editor.withoutNormalizing(editor, () => {\n          withoutPatching(editor, () => {\n            withoutSaving(editor, () => {\n              patches.forEach((patch) => {\n                if (debug.enabled)\n                  debug(`Handling remote patch ${JSON.stringify(patch)}`)\n                changed = applyPatch(editor, patch)\n              })\n            })\n          })\n        })\n        if (changed) {\n          editor.normalize()\n          editor.onChange()\n        }\n      })\n    }\n\n    const handlePatches = ({patches}: {patches: Patch[]}) => {\n      const remotePatches = patches.filter((p) => p.origin !== 'local')\n      if (remotePatches.length === 0) {\n        return\n      }\n      bufferedPatches = bufferedPatches.concat(remotePatches)\n      handleBufferedRemotePatches()\n    }\n\n    subscriptions.push(() => {\n      debug('Subscribing to remote patches')\n      const sub = editorActor.on('patches', handlePatches)\n      return () => {\n        debug('Unsubscribing to remote patches')\n        sub.unsubscribe()\n      }\n    })\n\n    editor.apply = (operation: Operation): void | Editor => {\n      let patches: Patch[] = []\n\n      // Update previous children here before we apply\n      previousChildren = editor.children\n\n      const editorWasEmpty = isEqualToEmptyEditor(previousChildren, schemaTypes)\n\n      // Apply the operation\n      apply(operation)\n\n      const editorIsEmpty = isEqualToEmptyEditor(editor.children, schemaTypes)\n\n      if (!isPatching(editor)) {\n        if (debugVerbose && debug.enabled)\n          debug(\n            `Editor is not producing patch for operation ${operation.type}`,\n            operation,\n          )\n        return editor\n      }\n\n      // If the editor was empty and now isn't, insert the placeholder into it.\n      if (\n        editorWasEmpty &&\n        !editorIsEmpty &&\n        operation.type !== 'set_selection'\n      ) {\n        patches.push(insert(previousChildren, 'before', [0]))\n      }\n\n      switch (operation.type) {\n        case 'insert_text':\n          patches = [\n            ...patches,\n            ...patchFunctions.insertTextPatch(\n              editor,\n              operation,\n              previousChildren,\n            ),\n          ]\n          break\n        case 'remove_text':\n          patches = [\n            ...patches,\n            ...patchFunctions.removeTextPatch(\n              editor,\n              operation,\n              previousChildren,\n            ),\n          ]\n          break\n        case 'remove_node':\n          patches = [\n            ...patches,\n            ...patchFunctions.removeNodePatch(\n              editor,\n              operation,\n              previousChildren,\n            ),\n          ]\n          break\n        case 'split_node':\n          patches = [\n            ...patches,\n            ...patchFunctions.splitNodePatch(\n              editor,\n              operation,\n              previousChildren,\n            ),\n          ]\n          break\n        case 'insert_node':\n          patches = [\n            ...patches,\n            ...patchFunctions.insertNodePatch(\n              editor,\n              operation,\n              previousChildren,\n            ),\n          ]\n          break\n        case 'set_node':\n          patches = [\n            ...patches,\n            ...patchFunctions.setNodePatch(editor, operation, previousChildren),\n          ]\n          break\n        case 'merge_node':\n          patches = [\n            ...patches,\n            ...patchFunctions.mergeNodePatch(\n              editor,\n              operation,\n              previousChildren,\n            ),\n          ]\n          break\n        case 'move_node':\n          patches = [\n            ...patches,\n            ...patchFunctions.moveNodePatch(\n              editor,\n              operation,\n              previousChildren,\n            ),\n          ]\n          break\n        default:\n        // Do nothing\n      }\n\n      // Unset the value if a operation made the editor empty\n      if (\n        !editorWasEmpty &&\n        editorIsEmpty &&\n        ['merge_node', 'set_node', 'remove_text', 'remove_node'].includes(\n          operation.type,\n        )\n      ) {\n        patches = [...patches, unset([])]\n        editorActor.send({\n          type: 'unset',\n          previousValue: fromSlateValue(\n            previousChildren,\n            schemaTypes.block.name,\n            KEY_TO_VALUE_ELEMENT.get(editor),\n          ),\n        })\n      }\n\n      // Prepend patches with setIfMissing if going from empty editor to something involving a patch.\n      if (editorWasEmpty && patches.length > 0) {\n        patches = [setIfMissing([], []), ...patches]\n      }\n\n      // Emit all patches\n      if (patches.length > 0) {\n        patches.forEach((patch) => {\n          editorActor.send({\n            type: 'patch',\n            patch: {...patch, origin: 'local'},\n          })\n        })\n      }\n      return editor\n    }\n    return editor\n  }\n}\n","import {Editor, Path} from 'slate'\nimport type {PortableTextSlateEditor} from '../../types/editor'\nimport type {SlateTextBlock, VoidElement} from '../../types/slate'\nimport {debugWithName} from '../../utils/debug'\nimport {isChangingRemotely} from '../../utils/withChanges'\nimport {isRedoing, isUndoing} from '../../utils/withUndoRedo'\nimport type {EditorActor} from '../editor-machine'\n\nconst debug = debugWithName('plugin:withPlaceholderBlock')\n\n/**\n * Keep a \"placeholder\" block present when the editor is empty\n *\n */\nexport function createWithPlaceholderBlock(\n  editorActor: EditorActor,\n): (editor: PortableTextSlateEditor) => PortableTextSlateEditor {\n  return function withPlaceholderBlock(\n    editor: PortableTextSlateEditor,\n  ): PortableTextSlateEditor {\n    const {apply} = editor\n\n    editor.apply = (op) => {\n      if (editorActor.getSnapshot().matches({'edit mode': 'read only'})) {\n        apply(op)\n        return\n      }\n\n      /**\n       * We don't want to run any side effects when the editor is processing\n       * remote changes.\n       */\n      if (isChangingRemotely(editor)) {\n        apply(op)\n        return\n      }\n\n      /**\n       * We don't want to run any side effects when the editor is undoing or\n       * redoing operations.\n       */\n      if (isUndoing(editor) || isRedoing(editor)) {\n        apply(op)\n        return\n      }\n\n      if (op.type === 'remove_node') {\n        const node = op.node as SlateTextBlock | VoidElement\n        if (op.path[0] === 0 && Editor.isVoid(editor, node)) {\n          // Check next path, if it exists, do nothing\n          const nextPath = Path.next(op.path)\n          // Is removing the first block which is a void (not a text block), add a new empty text block in it, if there is no other element in the next path\n          if (!editor.children[nextPath[0]]) {\n            debug('Adding placeholder block')\n            Editor.insertNode(\n              editor,\n              editor.pteCreateTextBlock({decorators: []}),\n            )\n          }\n        }\n      }\n      apply(op)\n    }\n    return editor\n  }\n}\n","import {Editor, Path, Text as SlateText, Transforms} from 'slate'\nimport type {\n  PortableTextMemberSchemaTypes,\n  PortableTextSlateEditor,\n} from '../../types/editor'\nimport {debugWithName} from '../../utils/debug'\nimport type {EditorActor} from '../editor-machine'\n\nconst debug = debugWithName('plugin:withPortableTextBlockStyle')\n\nexport function createWithPortableTextBlockStyle(\n  editorActor: EditorActor,\n  types: PortableTextMemberSchemaTypes,\n): (editor: PortableTextSlateEditor) => PortableTextSlateEditor {\n  const defaultStyle = types.styles[0].value\n  return function withPortableTextBlockStyle(\n    editor: PortableTextSlateEditor,\n  ): PortableTextSlateEditor {\n    // Extend Slate's default normalization to reset split node to normal style\n    // if there is no text at the right end of the split.\n    const {normalizeNode} = editor\n\n    editor.normalizeNode = (nodeEntry) => {\n      const [, path] = nodeEntry\n\n      for (const op of editor.operations) {\n        if (\n          op.type === 'split_node' &&\n          op.path.length === 1 &&\n          editor.isTextBlock(op.properties) &&\n          op.properties.style !== defaultStyle &&\n          op.path[0] === path[0] &&\n          !Path.equals(path, op.path)\n        ) {\n          const [child] = Editor.node(editor, [op.path[0] + 1, 0])\n          if (SlateText.isText(child) && child.text === '') {\n            debug(`Normalizing split node to ${defaultStyle} style`, op)\n            editorActor.send({type: 'normalizing'})\n            Transforms.setNodes(\n              editor,\n              {style: defaultStyle},\n              {at: [op.path[0] + 1], voids: false},\n            )\n            editorActor.send({type: 'done normalizing'})\n            return\n          }\n        }\n      }\n\n      normalizeNode(nodeEntry)\n    }\n\n    return editor\n  }\n}\n","function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nfunction _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == typeof i ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != typeof i) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\nfunction isPortableTextSpan(node) {\n  return node._type === \"span\" && \"text\" in node && typeof node.text == \"string\" && (typeof node.marks > \"u\" || Array.isArray(node.marks) && node.marks.every(mark => typeof mark == \"string\"));\n}\nfunction isPortableTextBlock(node) {\n  return (\n    // A block doesn't _have_ to be named 'block' - to differentiate between\n    // allowed child types and marks, one might name them differently\n    typeof node._type == \"string\" &&\n    // Toolkit-types like nested spans are @-prefixed\n    node._type[0] !== \"@\" && (\n    // `markDefs` isn't _required_ per say, but if it's there, it needs to be an array\n    !(\"markDefs\" in node) || !node.markDefs || Array.isArray(node.markDefs) &&\n    // Every mark definition needs to have an `_key` to be mappable in child spans\n    node.markDefs.every(def => typeof def._key == \"string\")) &&\n    // `children` is required and needs to be an array\n    \"children\" in node && Array.isArray(node.children) &&\n    // All children are objects with `_type` (usually spans, but can contain other stuff)\n    node.children.every(child => typeof child == \"object\" && \"_type\" in child)\n  );\n}\nfunction isPortableTextListItemBlock(block) {\n  return isPortableTextBlock(block) && \"listItem\" in block && typeof block.listItem == \"string\" && (typeof block.level > \"u\" || typeof block.level == \"number\");\n}\nfunction isPortableTextToolkitList(block) {\n  return block._type === \"@list\";\n}\nfunction isPortableTextToolkitSpan(span) {\n  return span._type === \"@span\";\n}\nfunction isPortableTextToolkitTextNode(node) {\n  return node._type === \"@text\";\n}\nconst knownDecorators = [\"strong\", \"em\", \"code\", \"underline\", \"strike-through\"];\nfunction sortMarksByOccurences(span, index, blockChildren) {\n  if (!isPortableTextSpan(span) || !span.marks) return [];\n  if (!span.marks.length) return [];\n  const marks = span.marks.slice(),\n    occurences = {};\n  return marks.forEach(mark => {\n    occurences[mark] = 1;\n    for (let siblingIndex = index + 1; siblingIndex < blockChildren.length; siblingIndex++) {\n      const sibling = blockChildren[siblingIndex];\n      if (sibling && isPortableTextSpan(sibling) && Array.isArray(sibling.marks) && sibling.marks.indexOf(mark) !== -1) occurences[mark]++;else break;\n    }\n  }), marks.sort((markA, markB) => sortMarks(occurences, markA, markB));\n}\nfunction sortMarks(occurences, markA, markB) {\n  const aOccurences = occurences[markA],\n    bOccurences = occurences[markB];\n  if (aOccurences !== bOccurences) return bOccurences - aOccurences;\n  const aKnownPos = knownDecorators.indexOf(markA),\n    bKnownPos = knownDecorators.indexOf(markB);\n  return aKnownPos !== bKnownPos ? aKnownPos - bKnownPos : markA.localeCompare(markB);\n}\nfunction buildMarksTree(block) {\n  var _a;\n  const {\n    children,\n    markDefs = []\n  } = block;\n  if (!children || !children.length) return [];\n  const sortedMarks = children.map(sortMarksByOccurences),\n    rootNode = {\n      _type: \"@span\",\n      children: [],\n      markType: \"<unknown>\"\n    };\n  let nodeStack = [rootNode];\n  for (let i = 0; i < children.length; i++) {\n    const span = children[i];\n    if (!span) continue;\n    const marksNeeded = sortedMarks[i] || [];\n    let pos = 1;\n    if (nodeStack.length > 1) for (pos; pos < nodeStack.length; pos++) {\n      const mark = ((_a = nodeStack[pos]) == null ? void 0 : _a.markKey) || \"\",\n        index = marksNeeded.indexOf(mark);\n      if (index === -1) break;\n      marksNeeded.splice(index, 1);\n    }\n    nodeStack = nodeStack.slice(0, pos);\n    let currentNode = nodeStack[nodeStack.length - 1];\n    if (currentNode) {\n      for (const markKey of marksNeeded) {\n        const markDef = markDefs.find(def => def._key === markKey),\n          markType = markDef ? markDef._type : markKey,\n          node = {\n            _type: \"@span\",\n            _key: span._key,\n            children: [],\n            markDef,\n            markType,\n            markKey\n          };\n        currentNode.children.push(node), nodeStack.push(node), currentNode = node;\n      }\n      if (isPortableTextSpan(span)) {\n        const lines = span.text.split(`\n`);\n        for (let line = lines.length; line-- > 1;) lines.splice(line, 0, `\n`);\n        currentNode.children = currentNode.children.concat(lines.map(text => ({\n          _type: \"@text\",\n          text\n        })));\n      } else currentNode.children = currentNode.children.concat(span);\n    }\n  }\n  return rootNode.children;\n}\nfunction nestLists(blocks, mode) {\n  const tree = [];\n  let currentList;\n  for (let i = 0; i < blocks.length; i++) {\n    const block = blocks[i];\n    if (block) {\n      if (!isPortableTextListItemBlock(block)) {\n        tree.push(block), currentList = void 0;\n        continue;\n      }\n      if (!currentList) {\n        currentList = listFromBlock(block, i, mode), tree.push(currentList);\n        continue;\n      }\n      if (blockMatchesList(block, currentList)) {\n        currentList.children.push(block);\n        continue;\n      }\n      if ((block.level || 1) > currentList.level) {\n        const newList = listFromBlock(block, i, mode);\n        if (mode === \"html\") {\n          const lastListItem = currentList.children[currentList.children.length - 1],\n            newLastChild = _objectSpread(_objectSpread({}, lastListItem), {}, {\n              children: [...lastListItem.children, newList]\n            });\n          currentList.children[currentList.children.length - 1] = newLastChild;\n        } else currentList.children.push(newList);\n        currentList = newList;\n        continue;\n      }\n      if ((block.level || 1) < currentList.level) {\n        const matchingBranch = tree[tree.length - 1],\n          match = matchingBranch && findListMatching(matchingBranch, block);\n        if (match) {\n          currentList = match, currentList.children.push(block);\n          continue;\n        }\n        currentList = listFromBlock(block, i, mode), tree.push(currentList);\n        continue;\n      }\n      if (block.listItem !== currentList.listItem) {\n        const matchingBranch = tree[tree.length - 1],\n          match = matchingBranch && findListMatching(matchingBranch, {\n            level: block.level || 1\n          });\n        if (match && match.listItem === block.listItem) {\n          currentList = match, currentList.children.push(block);\n          continue;\n        } else {\n          currentList = listFromBlock(block, i, mode), tree.push(currentList);\n          continue;\n        }\n      }\n      console.warn(\"Unknown state encountered for block\", block), tree.push(block);\n    }\n  }\n  return tree;\n}\nfunction blockMatchesList(block, list) {\n  return (block.level || 1) === list.level && block.listItem === list.listItem;\n}\nfunction listFromBlock(block, index, mode) {\n  return {\n    _type: \"@list\",\n    _key: `${block._key || `${index}`}-parent`,\n    mode,\n    level: block.level || 1,\n    listItem: block.listItem,\n    children: [block]\n  };\n}\nfunction findListMatching(rootNode, matching) {\n  const level = matching.level || 1,\n    style = matching.listItem || \"normal\",\n    filterOnType = typeof matching.listItem == \"string\";\n  if (isPortableTextToolkitList(rootNode) && (rootNode.level || 1) === level && filterOnType && (rootNode.listItem || \"normal\") === style) return rootNode;\n  if (!(\"children\" in rootNode)) return;\n  const node = rootNode.children[rootNode.children.length - 1];\n  return node && !isPortableTextSpan(node) ? findListMatching(node, matching) : void 0;\n}\nfunction spanToPlainText(span) {\n  let text = \"\";\n  return span.children.forEach(current => {\n    isPortableTextToolkitTextNode(current) ? text += current.text : isPortableTextToolkitSpan(current) && (text += spanToPlainText(current));\n  }), text;\n}\nconst leadingSpace = /^\\s/,\n  trailingSpace = /\\s$/;\nfunction toPlainText(block) {\n  const blocks = Array.isArray(block) ? block : [block];\n  let text = \"\";\n  return blocks.forEach((current, index) => {\n    if (!isPortableTextBlock(current)) return;\n    let pad = !1;\n    current.children.forEach(span => {\n      isPortableTextSpan(span) ? (text += pad && text && !trailingSpace.test(text) && !leadingSpace.test(span.text) ? \" \" : \"\", text += span.text, pad = !1) : pad = !0;\n    }), index !== blocks.length - 1 && (text += `\n\n`);\n  }), text;\n}\nconst LIST_NEST_MODE_HTML = \"html\",\n  LIST_NEST_MODE_DIRECT = \"direct\";\nexport { LIST_NEST_MODE_DIRECT, LIST_NEST_MODE_HTML, buildMarksTree, isPortableTextBlock, isPortableTextListItemBlock, isPortableTextSpan, isPortableTextToolkitList, isPortableTextToolkitSpan, isPortableTextToolkitTextNode, nestLists, sortMarksByOccurences, spanToPlainText, toPlainText };\n//# sourceMappingURL=index.js.map\n","import type {PortableTextSpan} from '@sanity/types'\nimport {Node, Path} from 'slate'\nimport type {PortableTextSlateEditor} from '../types/editor'\n\nexport function getPreviousSpan({\n  editor,\n  blockPath,\n  spanPath,\n}: {\n  editor: PortableTextSlateEditor\n  blockPath: Path\n  spanPath: Path\n}): PortableTextSpan | undefined {\n  let previousSpan: PortableTextSpan | undefined\n\n  for (const [child, childPath] of Node.children(editor, blockPath, {\n    reverse: true,\n  })) {\n    if (!editor.isTextSpan(child)) {\n      continue\n    }\n\n    if (Path.isBefore(childPath, spanPath)) {\n      previousSpan = child\n      break\n    }\n  }\n\n  return previousSpan\n}\n\nexport function getNextSpan({\n  editor,\n  blockPath,\n  spanPath,\n}: {\n  editor: PortableTextSlateEditor\n  blockPath: Path\n  spanPath: Path\n}): PortableTextSpan | undefined {\n  let nextSpan: PortableTextSpan | undefined\n\n  for (const [child, childPath] of Node.children(editor, blockPath)) {\n    if (!editor.isTextSpan(child)) {\n      continue\n    }\n\n    if (Path.isAfter(childPath, spanPath)) {\n      nextSpan = child\n      break\n    }\n  }\n\n  return nextSpan\n}\n","/**\n *\n * This plugin will change Slate's default marks model (every prop is a mark) with the Portable Text model (marks is an array of strings on prop .marks).\n *\n */\n\nimport {isPortableTextBlock, isPortableTextSpan} from '@portabletext/toolkit'\nimport type {PortableTextObject, PortableTextSpan} from '@sanity/types'\nimport {isEqual, uniq} from 'lodash'\nimport {Editor, Element, Node, Path, Range, Text, Transforms} from 'slate'\nimport type {BehaviorActionImplementation} from '../../behavior-actions/behavior.actions'\nimport type {\n  PortableTextMemberSchemaTypes,\n  PortableTextSlateEditor,\n} from '../../types/editor'\nimport {debugWithName} from '../../utils/debug'\nimport {getNextSpan, getPreviousSpan} from '../../utils/sibling-utils'\nimport {isChangingRemotely} from '../../utils/withChanges'\nimport {isRedoing, isUndoing} from '../../utils/withUndoRedo'\nimport type {EditorActor} from '../editor-machine'\n\nconst debug = debugWithName('plugin:withPortableTextMarkModel')\n\nexport function createWithPortableTextMarkModel(\n  editorActor: EditorActor,\n  types: PortableTextMemberSchemaTypes,\n): (editor: PortableTextSlateEditor) => PortableTextSlateEditor {\n  return function withPortableTextMarkModel(editor: PortableTextSlateEditor) {\n    const {apply, normalizeNode} = editor\n    const decorators = types.decorators.map((t) => t.value)\n\n    // Extend Slate's default normalization. Merge spans with same set of .marks when doing merge_node operations, and clean up markDefs / marks\n    editor.normalizeNode = (nodeEntry) => {\n      const [node, path] = nodeEntry\n\n      if (editor.isTextBlock(node)) {\n        const children = Node.children(editor, path)\n\n        for (const [child, childPath] of children) {\n          const nextNode = node.children[childPath[1] + 1]\n\n          if (\n            editor.isTextSpan(child) &&\n            editor.isTextSpan(nextNode) &&\n            child.marks?.every((mark) => nextNode.marks?.includes(mark)) &&\n            nextNode.marks?.every((mark) => child.marks?.includes(mark))\n          ) {\n            debug(\n              'Merging spans',\n              JSON.stringify(child, null, 2),\n              JSON.stringify(nextNode, null, 2),\n            )\n            editorActor.send({type: 'normalizing'})\n            Transforms.mergeNodes(editor, {\n              at: [childPath[0], childPath[1] + 1],\n              voids: true,\n            })\n            editorActor.send({type: 'done normalizing'})\n            return\n          }\n        }\n      }\n\n      /**\n       * Add missing .markDefs to block nodes\n       */\n      if (editor.isTextBlock(node) && !Array.isArray(node.markDefs)) {\n        debug('Adding .markDefs to block node')\n        editorActor.send({type: 'normalizing'})\n        Transforms.setNodes(editor, {markDefs: []}, {at: path})\n        editorActor.send({type: 'done normalizing'})\n        return\n      }\n\n      /**\n       * Add missing .marks to span nodes\n       */\n      if (editor.isTextSpan(node) && !Array.isArray(node.marks)) {\n        debug('Adding .marks to span node')\n        editorActor.send({type: 'normalizing'})\n        Transforms.setNodes(editor, {marks: []}, {at: path})\n        editorActor.send({type: 'done normalizing'})\n        return\n      }\n\n      /**\n       * Remove annotations from empty spans\n       */\n      if (editor.isTextSpan(node)) {\n        const blockPath = Path.parent(path)\n        const [block] = Editor.node(editor, blockPath)\n        const decorators = types.decorators.map((decorator) => decorator.value)\n        const annotations = node.marks?.filter(\n          (mark) => !decorators.includes(mark),\n        )\n\n        if (editor.isTextBlock(block)) {\n          if (node.text === '' && annotations && annotations.length > 0) {\n            debug('Removing annotations from empty span node')\n            editorActor.send({type: 'normalizing'})\n            Transforms.setNodes(\n              editor,\n              {marks: node.marks?.filter((mark) => decorators.includes(mark))},\n              {at: path},\n            )\n            editorActor.send({type: 'done normalizing'})\n            return\n          }\n        }\n      }\n\n      /**\n       * Remove orphaned annotations from child spans of block nodes\n       */\n      if (editor.isTextBlock(node)) {\n        const decorators = types.decorators.map((decorator) => decorator.value)\n\n        for (const [child, childPath] of Node.children(editor, path)) {\n          if (editor.isTextSpan(child)) {\n            const marks = child.marks ?? []\n            const orphanedAnnotations = marks.filter((mark) => {\n              return (\n                !decorators.includes(mark) &&\n                !node.markDefs?.find((def) => def._key === mark)\n              )\n            })\n\n            if (orphanedAnnotations.length > 0) {\n              debug('Removing orphaned annotations from span node')\n              editorActor.send({type: 'normalizing'})\n              Transforms.setNodes(\n                editor,\n                {\n                  marks: marks.filter(\n                    (mark) => !orphanedAnnotations.includes(mark),\n                  ),\n                },\n                {at: childPath},\n              )\n              editorActor.send({type: 'done normalizing'})\n              return\n            }\n          }\n        }\n      }\n\n      /**\n       * Remove orphaned annotations from span nodes\n       */\n      if (editor.isTextSpan(node)) {\n        const blockPath = Path.parent(path)\n        const [block] = Editor.node(editor, blockPath)\n\n        if (editor.isTextBlock(block)) {\n          const decorators = types.decorators.map(\n            (decorator) => decorator.value,\n          )\n          const marks = node.marks ?? []\n          const orphanedAnnotations = marks.filter((mark) => {\n            return (\n              !decorators.includes(mark) &&\n              !block.markDefs?.find((def) => def._key === mark)\n            )\n          })\n\n          if (orphanedAnnotations.length > 0) {\n            debug('Removing orphaned annotations from span node')\n            editorActor.send({type: 'normalizing'})\n            Transforms.setNodes(\n              editor,\n              {\n                marks: marks.filter(\n                  (mark) => !orphanedAnnotations.includes(mark),\n                ),\n              },\n              {at: path},\n            )\n            editorActor.send({type: 'done normalizing'})\n            return\n          }\n        }\n      }\n\n      // Remove duplicate markDefs\n      if (editor.isTextBlock(node)) {\n        const markDefs = node.markDefs ?? []\n        const markDefKeys = new Set<string>()\n        const newMarkDefs: Array<PortableTextObject> = []\n\n        for (const markDef of markDefs) {\n          if (!markDefKeys.has(markDef._key)) {\n            markDefKeys.add(markDef._key)\n            newMarkDefs.push(markDef)\n          }\n        }\n\n        if (markDefs.length !== newMarkDefs.length) {\n          debug('Removing duplicate markDefs')\n          editorActor.send({type: 'normalizing'})\n          Transforms.setNodes(editor, {markDefs: newMarkDefs}, {at: path})\n          editorActor.send({type: 'done normalizing'})\n          return\n        }\n      }\n\n      // Check consistency of markDefs (unless we are merging two nodes)\n      if (\n        editor.isTextBlock(node) &&\n        !editor.operations.some(\n          (op) =>\n            op.type === 'merge_node' &&\n            'markDefs' in op.properties &&\n            op.path.length === 1,\n        )\n      ) {\n        const newMarkDefs = (node.markDefs || []).filter((def) => {\n          return node.children.find((child) => {\n            return (\n              Text.isText(child) &&\n              Array.isArray(child.marks) &&\n              child.marks.includes(def._key)\n            )\n          })\n        })\n        if (node.markDefs && !isEqual(newMarkDefs, node.markDefs)) {\n          debug('Removing markDef not in use')\n          editorActor.send({type: 'normalizing'})\n          Transforms.setNodes(\n            editor,\n            {\n              markDefs: newMarkDefs,\n            },\n            {at: path},\n          )\n          editorActor.send({type: 'done normalizing'})\n          return\n        }\n      }\n\n      normalizeNode(nodeEntry)\n    }\n\n    editor.apply = (op) => {\n      /**\n       * We don't want to run any side effects when the editor is processing\n       * remote changes.\n       */\n      if (isChangingRemotely(editor)) {\n        apply(op)\n        return\n      }\n\n      /**\n       * We don't want to run any side effects when the editor is undoing or\n       * redoing operations.\n       */\n      if (isUndoing(editor) || isRedoing(editor)) {\n        apply(op)\n        return\n      }\n\n      if (op.type === 'set_selection') {\n        const marks = Editor.marks(editor)\n\n        if (\n          marks &&\n          op.properties &&\n          op.newProperties &&\n          op.properties.anchor &&\n          op.properties.focus &&\n          op.newProperties.anchor &&\n          op.newProperties.focus\n        ) {\n          const previousSelectionIsCollapsed = Range.isCollapsed({\n            anchor: op.properties.anchor,\n            focus: op.properties.focus,\n          })\n          const newSelectionIsCollapsed = Range.isCollapsed({\n            anchor: op.newProperties.anchor,\n            focus: op.newProperties.focus,\n          })\n\n          if (previousSelectionIsCollapsed && newSelectionIsCollapsed) {\n            const focusSpan: PortableTextSpan | undefined = Array.from(\n              Editor.nodes(editor, {\n                mode: 'lowest',\n                at: op.properties.focus,\n                match: (n) => editor.isTextSpan(n),\n                voids: false,\n              }),\n            )[0]?.[0]\n            const newFocusSpan: PortableTextSpan | undefined = Array.from(\n              Editor.nodes(editor, {\n                mode: 'lowest',\n                at: op.newProperties.focus,\n                match: (n) => editor.isTextSpan(n),\n                voids: false,\n              }),\n            )[0]?.[0]\n            const movedToNextSpan =\n              focusSpan &&\n              newFocusSpan &&\n              op.newProperties.focus.path[0] === op.properties.focus.path[0] &&\n              op.newProperties.focus.path[1] ===\n                op.properties.focus.path[1] + 1 &&\n              focusSpan.text.length === op.properties.focus.offset &&\n              op.newProperties.focus.offset === 0\n            const movedToPreviousSpan =\n              focusSpan &&\n              newFocusSpan &&\n              op.newProperties.focus.path[0] === op.properties.focus.path[0] &&\n              op.newProperties.focus.path[1] ===\n                op.properties.focus.path[1] - 1 &&\n              op.properties.focus.offset === 0 &&\n              newFocusSpan.text.length === op.newProperties.focus.offset\n\n            // If the editor has marks and we are not visually moving the\n            // selection then we just abort. Otherwise the marks would be\n            // cleared and we can't use them for the possible subsequent insert\n            // operation.\n            if (movedToNextSpan || movedToPreviousSpan) {\n              return\n            }\n          }\n        }\n      }\n\n      if (op.type === 'insert_node') {\n        const {selection} = editor\n\n        if (selection) {\n          const [_block, blockPath] = Editor.node(editor, selection, {depth: 1})\n          const previousSpan = getPreviousSpan({\n            editor,\n            blockPath,\n            spanPath: op.path,\n          })\n          const previousSpanAnnotations = previousSpan\n            ? previousSpan.marks?.filter((mark) => !decorators.includes(mark))\n            : []\n\n          const nextSpan = getNextSpan({\n            editor,\n            blockPath,\n            spanPath: [op.path[0], op.path[1] - 1],\n          })\n          const nextSpanAnnotations = nextSpan\n            ? nextSpan.marks?.filter((mark) => !decorators.includes(mark))\n            : []\n\n          const annotationsEnding =\n            previousSpanAnnotations?.filter(\n              (annotation) => !nextSpanAnnotations?.includes(annotation),\n            ) ?? []\n          const atTheEndOfAnnotation = annotationsEnding.length > 0\n\n          if (\n            atTheEndOfAnnotation &&\n            isPortableTextSpan(op.node) &&\n            op.node.marks?.some((mark) => annotationsEnding.includes(mark))\n          ) {\n            Transforms.insertNodes(editor, {\n              ...op.node,\n              marks:\n                op.node.marks?.filter(\n                  (mark) => !annotationsEnding.includes(mark),\n                ) ?? [],\n            })\n            return\n          }\n\n          const annotationsStarting =\n            nextSpanAnnotations?.filter(\n              (annotation) => !previousSpanAnnotations?.includes(annotation),\n            ) ?? []\n          const atTheStartOfAnnotation = annotationsStarting.length > 0\n\n          if (\n            atTheStartOfAnnotation &&\n            isPortableTextSpan(op.node) &&\n            op.node.marks?.some((mark) => annotationsStarting.includes(mark))\n          ) {\n            Transforms.insertNodes(editor, {\n              ...op.node,\n              marks:\n                op.node.marks?.filter(\n                  (mark) => !annotationsStarting.includes(mark),\n                ) ?? [],\n            })\n            return\n          }\n\n          const nextSpanDecorators =\n            nextSpan?.marks?.filter((mark) => decorators.includes(mark)) ?? []\n          const decoratorStarting = nextSpanDecorators.length > 0\n\n          if (\n            decoratorStarting &&\n            atTheEndOfAnnotation &&\n            !atTheStartOfAnnotation &&\n            isPortableTextSpan(op.node) &&\n            op.node.marks?.length === 0\n          ) {\n            Transforms.insertNodes(editor, {\n              ...op.node,\n              marks: nextSpanDecorators,\n            })\n            return\n          }\n        }\n      }\n\n      if (op.type === 'insert_text') {\n        const {selection} = editor\n        const collapsedSelection = selection\n          ? Range.isCollapsed(selection)\n          : false\n\n        if (selection && collapsedSelection) {\n          const [_block, blockPath] = Editor.node(editor, selection, {\n            depth: 1,\n          })\n\n          const [span, spanPath] =\n            Array.from(\n              Editor.nodes(editor, {\n                mode: 'lowest',\n                at: selection.focus,\n                match: (n) => editor.isTextSpan(n),\n                voids: false,\n              }),\n            )[0] ?? ([undefined, undefined] as const)\n\n          const marks = span.marks ?? []\n          const marksWithoutAnnotations = marks.filter((mark) =>\n            decorators.includes(mark),\n          )\n          const spanHasAnnotations =\n            marks.length > marksWithoutAnnotations.length\n\n          const spanIsEmpty = span.text.length === 0\n\n          const atTheBeginningOfSpan = selection.anchor.offset === 0\n          const atTheEndOfSpan = selection.anchor.offset === span.text.length\n\n          const previousSpan = getPreviousSpan({editor, blockPath, spanPath})\n          const nextSpan = getNextSpan({editor, blockPath, spanPath})\n          const nextSpanAnnotations =\n            nextSpan?.marks?.filter((mark) => !decorators.includes(mark)) ?? []\n          const spanAnnotations = marks.filter(\n            (mark) => !decorators.includes(mark),\n          )\n\n          const previousSpanHasAnnotations = previousSpan\n            ? previousSpan.marks?.some((mark) => !decorators.includes(mark))\n            : false\n          const previousSpanHasSameAnnotations = previousSpan\n            ? previousSpan.marks\n                ?.filter((mark) => !decorators.includes(mark))\n                .every((mark) => marks.includes(mark))\n            : false\n          const previousSpanHasSameAnnotation = previousSpan\n            ? previousSpan.marks?.some(\n                (mark) => !decorators.includes(mark) && marks.includes(mark),\n              )\n            : false\n\n          const previousSpanHasSameMarks = previousSpan\n            ? previousSpan.marks?.every((mark) => marks.includes(mark))\n            : false\n          const nextSpanSharesSomeAnnotations = spanAnnotations.some((mark) =>\n            nextSpanAnnotations?.includes(mark),\n          )\n\n          if (spanHasAnnotations && !spanIsEmpty) {\n            if (atTheBeginningOfSpan) {\n              if (previousSpanHasSameMarks) {\n                Transforms.insertNodes(editor, {\n                  _type: 'span',\n                  _key: editorActor.getSnapshot().context.keyGenerator(),\n                  text: op.text,\n                  marks: previousSpan?.marks ?? [],\n                })\n                return\n              } else if (previousSpanHasSameAnnotations) {\n                Transforms.insertNodes(editor, {\n                  _type: 'span',\n                  _key: editorActor.getSnapshot().context.keyGenerator(),\n                  text: op.text,\n                  marks: previousSpan?.marks ?? [],\n                })\n                return\n              } else if (previousSpanHasSameAnnotation) {\n                apply(op)\n                return\n              } else if (!previousSpan) {\n                Transforms.insertNodes(editor, {\n                  _type: 'span',\n                  _key: editorActor.getSnapshot().context.keyGenerator(),\n                  text: op.text,\n                  marks: [],\n                })\n                return\n              }\n            }\n\n            if (atTheEndOfSpan) {\n              if (\n                (nextSpan &&\n                  nextSpanSharesSomeAnnotations &&\n                  nextSpanAnnotations.length < spanAnnotations.length) ||\n                !nextSpanSharesSomeAnnotations\n              ) {\n                Transforms.insertNodes(editor, {\n                  _type: 'span',\n                  _key: editorActor.getSnapshot().context.keyGenerator(),\n                  text: op.text,\n                  marks: nextSpan?.marks ?? [],\n                })\n                return\n              }\n\n              if (!nextSpan) {\n                Transforms.insertNodes(editor, {\n                  _type: 'span',\n                  _key: editorActor.getSnapshot().context.keyGenerator(),\n                  text: op.text,\n                  marks: [],\n                })\n                return\n              }\n            }\n          }\n\n          if (atTheBeginningOfSpan && !spanIsEmpty && !!previousSpan) {\n            Transforms.insertNodes(editor, {\n              _type: 'span',\n              _key: editorActor.getSnapshot().context.keyGenerator(),\n              text: op.text,\n              marks: previousSpanHasAnnotations\n                ? []\n                : (previousSpan.marks ?? []).filter((mark) =>\n                    decorators.includes(mark),\n                  ),\n            })\n            return\n          }\n        }\n      }\n\n      if (op.type === 'remove_text') {\n        const {selection} = editor\n\n        if (selection && Range.isExpanded(selection)) {\n          const [block, blockPath] = Editor.node(editor, selection, {\n            depth: 1,\n          })\n          const [span, spanPath] =\n            Array.from(\n              Editor.nodes(editor, {\n                mode: 'lowest',\n                at: {path: op.path, offset: op.offset},\n                match: (n) => editor.isTextSpan(n),\n                voids: false,\n              }),\n            )[0] ?? ([undefined, undefined] as const)\n\n          if (span && block && isPortableTextBlock(block)) {\n            const markDefs = block.markDefs ?? []\n            const marks = span.marks ?? []\n            const spanHasAnnotations = marks.some((mark) =>\n              markDefs.find((markDef) => markDef._key === mark),\n            )\n            const deletingFromTheEnd =\n              op.offset + op.text.length === span.text.length\n            const deletingAllText = op.offset === 0 && deletingFromTheEnd\n\n            const previousSpan = getPreviousSpan({editor, blockPath, spanPath})\n            const nextSpan = getNextSpan({editor, blockPath, spanPath})\n\n            const previousSpanHasSameAnnotation = previousSpan\n              ? previousSpan.marks?.some(\n                  (mark) => !decorators.includes(mark) && marks.includes(mark),\n                )\n              : false\n            const nextSpanHasSameAnnotation = nextSpan\n              ? nextSpan.marks?.some(\n                  (mark) => !decorators.includes(mark) && marks.includes(mark),\n                )\n              : false\n\n            if (\n              spanHasAnnotations &&\n              deletingAllText &&\n              !previousSpanHasSameAnnotation &&\n              !nextSpanHasSameAnnotation\n            ) {\n              const marksWithoutAnnotationMarks: string[] = (\n                {\n                  ...(Editor.marks(editor) || {}),\n                }.marks || []\n              ).filter((mark) => decorators.includes(mark))\n\n              Editor.withoutNormalizing(editor, () => {\n                apply(op)\n                Transforms.setNodes(\n                  editor,\n                  {marks: marksWithoutAnnotationMarks},\n                  {at: op.path},\n                )\n              })\n\n              editor.onChange()\n              return\n            }\n          }\n        }\n      }\n\n      /**\n       * Copy over markDefs when merging blocks\n       */\n      if (\n        op.type === 'merge_node' &&\n        op.path.length === 1 &&\n        'markDefs' in op.properties &&\n        op.properties._type === types.block.name &&\n        Array.isArray(op.properties.markDefs) &&\n        op.properties.markDefs.length > 0 &&\n        op.path[0] - 1 >= 0\n      ) {\n        const [targetBlock, targetPath] = Editor.node(editor, [op.path[0] - 1])\n\n        if (editor.isTextBlock(targetBlock)) {\n          const oldDefs =\n            (Array.isArray(targetBlock.markDefs) && targetBlock.markDefs) || []\n          const newMarkDefs = uniq([...oldDefs, ...op.properties.markDefs])\n\n          debug(`Copying markDefs over to merged block`, op)\n          Transforms.setNodes(\n            editor,\n            {markDefs: newMarkDefs},\n            {at: targetPath, voids: false},\n          )\n          apply(op)\n          return\n        }\n      }\n\n      apply(op)\n    }\n\n    return editor\n  }\n}\n\nexport const addDecoratorActionImplementation: BehaviorActionImplementation<\n  'decorator.add'\n> = ({action}) => {\n  const editor = action.editor\n  const mark = action.decorator\n\n  if (editor.selection) {\n    if (Range.isExpanded(editor.selection)) {\n      // Split if needed\n      Transforms.setNodes(\n        editor,\n        {},\n        {match: Text.isText, split: true, hanging: true},\n      )\n      // Use new selection\n      const splitTextNodes = Range.isRange(editor.selection)\n        ? [\n            ...Editor.nodes(editor, {\n              at: editor.selection,\n              match: Text.isText,\n            }),\n          ]\n        : []\n      const shouldRemoveMark =\n        splitTextNodes.length > 1 &&\n        splitTextNodes.every((node) => node[0].marks?.includes(mark))\n\n      if (shouldRemoveMark) {\n        editor.removeMark(mark)\n      } else {\n        splitTextNodes.forEach(([node, path]) => {\n          const marks = [\n            ...(Array.isArray(node.marks) ? node.marks : []).filter(\n              (eMark: string) => eMark !== mark,\n            ),\n            mark,\n          ]\n          Transforms.setNodes(\n            editor,\n            {marks},\n            {at: path, match: Text.isText, split: true, hanging: true},\n          )\n        })\n      }\n    } else {\n      const [block, blockPath] = Editor.node(editor, editor.selection, {\n        depth: 1,\n      })\n      const lonelyEmptySpan =\n        editor.isTextBlock(block) &&\n        block.children.length === 1 &&\n        editor.isTextSpan(block.children[0]) &&\n        block.children[0].text === ''\n          ? block.children[0]\n          : undefined\n\n      if (lonelyEmptySpan) {\n        const existingMarks = lonelyEmptySpan.marks ?? []\n        const existingMarksWithoutDecorator = existingMarks.filter(\n          (existingMark) => existingMark !== mark,\n        )\n\n        Transforms.setNodes(\n          editor,\n          {\n            marks:\n              existingMarks.length === existingMarksWithoutDecorator.length\n                ? [...existingMarks, mark]\n                : existingMarksWithoutDecorator,\n          },\n          {\n            at: blockPath,\n            match: (node) => editor.isTextSpan(node),\n          },\n        )\n      } else {\n        const existingMarks: string[] =\n          {\n            ...(Editor.marks(editor) || {}),\n          }.marks || []\n        const marks = {\n          ...(Editor.marks(editor) || {}),\n          marks: [...existingMarks, mark],\n        }\n        editor.marks = marks as Text\n      }\n    }\n    editor.onChange()\n  }\n}\n\nexport const removeDecoratorActionImplementation: BehaviorActionImplementation<\n  'decorator.remove'\n> = ({action}) => {\n  const editor = action.editor\n  const mark = action.decorator\n  const {selection} = editor\n\n  if (selection) {\n    if (Range.isExpanded(selection)) {\n      // Split if needed\n      Transforms.setNodes(\n        editor,\n        {},\n        {match: Text.isText, split: true, hanging: true},\n      )\n      if (editor.selection) {\n        const splitTextNodes = [\n          ...Editor.nodes(editor, {\n            at: editor.selection,\n            match: Text.isText,\n          }),\n        ]\n        splitTextNodes.forEach(([node, path]) => {\n          const block = editor.children[path[0]]\n          if (Element.isElement(block) && block.children.includes(node)) {\n            Transforms.setNodes(\n              editor,\n              {\n                marks: (Array.isArray(node.marks) ? node.marks : []).filter(\n                  (eMark: string) => eMark !== mark,\n                ),\n                _type: 'span',\n              },\n              {at: path},\n            )\n          }\n        })\n      }\n    } else {\n      const [block, blockPath] = Editor.node(editor, selection, {\n        depth: 1,\n      })\n      const lonelyEmptySpan =\n        editor.isTextBlock(block) &&\n        block.children.length === 1 &&\n        editor.isTextSpan(block.children[0]) &&\n        block.children[0].text === ''\n          ? block.children[0]\n          : undefined\n\n      if (lonelyEmptySpan) {\n        const existingMarks = lonelyEmptySpan.marks ?? []\n        const existingMarksWithoutDecorator = existingMarks.filter(\n          (existingMark) => existingMark !== mark,\n        )\n\n        Transforms.setNodes(\n          editor,\n          {\n            marks: existingMarksWithoutDecorator,\n          },\n          {\n            at: blockPath,\n            match: (node) => editor.isTextSpan(node),\n          },\n        )\n      } else {\n        const existingMarks: string[] =\n          {\n            ...(Editor.marks(editor) || {}),\n          }.marks || []\n        const marks = {\n          ...(Editor.marks(editor) || {}),\n          marks: existingMarks.filter((eMark) => eMark !== mark),\n        } as Text\n        editor.marks = {marks: marks.marks, _type: 'span'} as Text\n      }\n    }\n  }\n}\n\nexport function isDecoratorActive({\n  editor,\n  decorator,\n}: {\n  editor: PortableTextSlateEditor\n  decorator: string\n}) {\n  if (!editor.selection) {\n    return false\n  }\n\n  const selectedTextNodes = Array.from(\n    Editor.nodes(editor, {match: Text.isText, at: editor.selection}),\n  )\n\n  if (selectedTextNodes.length === 0) {\n    return false\n  }\n\n  if (Range.isExpanded(editor.selection)) {\n    return selectedTextNodes.every((n) => {\n      const [node] = n\n\n      return node.marks?.includes(decorator)\n    })\n  }\n\n  return (\n    {\n      ...(Editor.marks(editor) || {}),\n    }.marks || []\n  ).includes(decorator)\n}\n\nexport const toggleDecoratorActionImplementation: BehaviorActionImplementation<\n  'decorator.toggle'\n> = ({context, action}) => {\n  const isActive = isDecoratorActive({\n    editor: action.editor,\n    decorator: action.decorator,\n  })\n\n  if (isActive) {\n    removeDecoratorActionImplementation({\n      context,\n      action: {\n        type: 'decorator.remove',\n        editor: action.editor,\n        decorator: action.decorator,\n      },\n    })\n  } else {\n    addDecoratorActionImplementation({\n      context,\n      action: {\n        type: 'decorator.add',\n        editor: action.editor,\n        decorator: action.decorator,\n      },\n    })\n  }\n}\n","import type {BaseRange} from 'slate'\nimport type {\n  EditorSelection,\n  PortableTextMemberSchemaTypes,\n  PortableTextSlateEditor,\n} from '../../types/editor'\nimport {debugWithName} from '../../utils/debug'\nimport {\n  toPortableTextRange,\n  type ObjectWithKeyAndType,\n} from '../../utils/ranges'\nimport {SLATE_TO_PORTABLE_TEXT_RANGE} from '../../utils/weakMaps'\nimport type {EditorActor} from '../editor-machine'\n\nconst debug = debugWithName('plugin:withPortableTextSelections')\nconst debugVerbose = debug.enabled && false\n\n// This plugin will make sure that we emit a PT selection whenever the editor has changed.\nexport function createWithPortableTextSelections(\n  editorActor: EditorActor,\n  types: PortableTextMemberSchemaTypes,\n): (editor: PortableTextSlateEditor) => PortableTextSlateEditor {\n  let prevSelection: BaseRange | null = null\n  return function withPortableTextSelections(\n    editor: PortableTextSlateEditor,\n  ): PortableTextSlateEditor {\n    const emitPortableTextSelection = () => {\n      if (prevSelection !== editor.selection) {\n        let ptRange: EditorSelection = null\n        if (editor.selection) {\n          const existing = SLATE_TO_PORTABLE_TEXT_RANGE.get(editor.selection)\n          if (existing) {\n            ptRange = existing\n          } else {\n            const value = editor.children satisfies ObjectWithKeyAndType[]\n            ptRange = toPortableTextRange(value, editor.selection, types)\n            SLATE_TO_PORTABLE_TEXT_RANGE.set(editor.selection, ptRange)\n          }\n        }\n        if (debugVerbose) {\n          debug(\n            `Emitting selection ${JSON.stringify(ptRange || null)} (${JSON.stringify(\n              editor.selection,\n            )})`,\n          )\n        }\n        if (ptRange) {\n          editorActor.send({type: 'selection', selection: ptRange})\n        } else {\n          editorActor.send({type: 'selection', selection: null})\n        }\n      }\n      prevSelection = editor.selection\n    }\n\n    const {onChange} = editor\n    editor.onChange = () => {\n      const hasChanges = editor.operations.length > 0\n      onChange()\n      if (\n        hasChanges &&\n        !editorActor.getSnapshot().matches({setup: 'setting up'})\n      ) {\n        emitPortableTextSelection()\n      }\n    }\n    return editor\n  }\n}\n","import {\n  isPortableTextListBlock,\n  isPortableTextSpan,\n  isPortableTextTextBlock,\n  type PortableTextListBlock,\n  type PortableTextSpan,\n  type PortableTextTextBlock,\n} from '@sanity/types'\nimport {Transforms, type Element} from 'slate'\nimport type {\n  PortableTextMemberSchemaTypes,\n  PortableTextSlateEditor,\n} from '../../types/editor'\nimport {debugWithName} from '../../utils/debug'\nimport type {EditorActor} from '../editor-machine'\n\nconst debug = debugWithName('plugin:withSchemaTypes')\n/**\n * This plugin makes sure that schema types are recognized properly by Slate as blocks, voids, inlines\n *\n */\nexport function createWithSchemaTypes({\n  editorActor,\n  schemaTypes,\n}: {\n  editorActor: EditorActor\n  schemaTypes: PortableTextMemberSchemaTypes\n}) {\n  return function withSchemaTypes(\n    editor: PortableTextSlateEditor,\n  ): PortableTextSlateEditor {\n    editor.isTextBlock = (value: unknown): value is PortableTextTextBlock => {\n      return (\n        isPortableTextTextBlock(value) && value._type === schemaTypes.block.name\n      )\n    }\n    editor.isTextSpan = (value: unknown): value is PortableTextSpan => {\n      return isPortableTextSpan(value) && value._type === schemaTypes.span.name\n    }\n    editor.isListBlock = (value: unknown): value is PortableTextListBlock => {\n      return (\n        isPortableTextListBlock(value) && value._type === schemaTypes.block.name\n      )\n    }\n    editor.isVoid = (element: Element): boolean => {\n      return (\n        schemaTypes.block.name !== element._type &&\n        (schemaTypes.blockObjects\n          .map((obj) => obj.name)\n          .includes(element._type) ||\n          schemaTypes.inlineObjects\n            .map((obj) => obj.name)\n            .includes(element._type))\n      )\n    }\n    editor.isInline = (element: Element): boolean => {\n      const inlineSchemaTypes = schemaTypes.inlineObjects.map((obj) => obj.name)\n      return (\n        inlineSchemaTypes.includes(element._type) &&\n        '__inline' in element &&\n        element.__inline === true\n      )\n    }\n\n    // Extend Slate's default normalization\n    const {normalizeNode} = editor\n    editor.normalizeNode = (entry) => {\n      const [node, path] = entry\n\n      // If text block children node is missing _type, set it to the span type\n      if (node._type === undefined && path.length === 2) {\n        debug('Setting span type on text node without a type')\n        const span = node as PortableTextSpan\n        const key =\n          span._key || editorActor.getSnapshot().context.keyGenerator()\n        editorActor.send({type: 'normalizing'})\n        Transforms.setNodes(\n          editor,\n          {...span, _type: schemaTypes.span.name, _key: key},\n          {at: path},\n        )\n        editorActor.send({type: 'done normalizing'})\n        return\n      }\n\n      // catches cases when the children are missing keys but excludes it when the normalize is running the node as the editor object\n      if (node._key === undefined && (path.length === 1 || path.length === 2)) {\n        debug('Setting missing key on child node without a key')\n        const key = editorActor.getSnapshot().context.keyGenerator()\n        editorActor.send({type: 'normalizing'})\n        Transforms.setNodes(editor, {_key: key}, {at: path})\n        editorActor.send({type: 'done normalizing'})\n        return\n      }\n\n      normalizeNode(entry)\n    }\n    return editor\n  }\n}\n","import {Editor, Range, Text, Transforms} from 'slate'\nimport type {\n  PortableTextMemberSchemaTypes,\n  PortableTextSlateEditor,\n} from '../../types/editor'\nimport {debugWithName} from '../../utils/debug'\nimport {toSlateValue} from '../../utils/values'\nimport type {EditorActor} from '../editor-machine'\n\nconst debug = debugWithName('plugin:withUtils')\n\ninterface Options {\n  editorActor: EditorActor\n  schemaTypes: PortableTextMemberSchemaTypes\n}\n/**\n * This plugin makes various util commands available in the editor\n *\n */\nexport function createWithUtils({editorActor, schemaTypes}: Options) {\n  return function withUtils(\n    editor: PortableTextSlateEditor,\n  ): PortableTextSlateEditor {\n    // Expands the the selection to wrap around the word the focus is at\n    editor.pteExpandToWord = () => {\n      const {selection} = editor\n      if (selection && !Range.isExpanded(selection)) {\n        const [textNode] = Editor.node(editor, selection.focus, {depth: 2})\n        if (!textNode || !Text.isText(textNode) || textNode.text.length === 0) {\n          debug(`pteExpandToWord: Can't expand to word here`)\n          return\n        }\n        const {focus} = selection\n        const focusOffset = focus.offset\n        const charsBefore = textNode.text.slice(0, focusOffset)\n        const charsAfter = textNode.text.slice(focusOffset, -1)\n        const isEmpty = (str: string) => str.match(/\\s/g)\n        const whiteSpaceBeforeIndex = charsBefore\n          .split('')\n          .reverse()\n          .findIndex((str) => isEmpty(str))\n        const newStartOffset =\n          whiteSpaceBeforeIndex > -1\n            ? charsBefore.length - whiteSpaceBeforeIndex\n            : 0\n        const whiteSpaceAfterIndex = charsAfter\n          .split('')\n          .findIndex((obj) => isEmpty(obj))\n        const newEndOffset =\n          charsBefore.length +\n          (whiteSpaceAfterIndex > -1\n            ? whiteSpaceAfterIndex\n            : charsAfter.length + 1)\n        if (\n          !(\n            newStartOffset === newEndOffset ||\n            Number.isNaN(newStartOffset) ||\n            Number.isNaN(newEndOffset)\n          )\n        ) {\n          debug('pteExpandToWord: Expanding to focused word')\n          Transforms.setSelection(editor, {\n            anchor: {...selection.anchor, offset: newStartOffset},\n            focus: {...selection.focus, offset: newEndOffset},\n          })\n          return\n        }\n        debug(`pteExpandToWord: Can't expand to word here`)\n      }\n    }\n\n    editor.pteCreateTextBlock = (options: {\n      decorators: Array<string>\n      listItem?: string\n      level?: number\n    }) => {\n      const block = toSlateValue(\n        [\n          {\n            _type: schemaTypes.block.name,\n            _key: editorActor.getSnapshot().context.keyGenerator(),\n            style: schemaTypes.styles[0].value || 'normal',\n            ...(options.listItem ? {listItem: options.listItem} : {}),\n            ...(options.level ? {level: options.level} : {}),\n            markDefs: [],\n            children: [\n              {\n                _type: 'span',\n                _key: editorActor.getSnapshot().context.keyGenerator(),\n                text: '',\n                marks: options.decorators.filter((decorator) =>\n                  schemaTypes.decorators.find(({value}) => value === decorator),\n                ),\n              },\n            ],\n          },\n        ],\n        {schemaTypes},\n      )[0]\n      return block\n    }\n    return editor\n  }\n}\n","import type {BaseOperation, Editor, Node, NodeEntry} from 'slate'\nimport type {PortableTextSlateEditor} from '../../types/editor'\nimport {createOperationToPatches} from '../../utils/operationToPatches'\nimport type {EditorActor} from '../editor-machine'\nimport {createWithEventListeners} from './create-with-event-listeners'\nimport {createWithMaxBlocks} from './createWithMaxBlocks'\nimport {createWithObjectKeys} from './createWithObjectKeys'\nimport {createWithPatches} from './createWithPatches'\nimport {createWithPlaceholderBlock} from './createWithPlaceholderBlock'\nimport {createWithPortableTextBlockStyle} from './createWithPortableTextBlockStyle'\nimport {createWithPortableTextMarkModel} from './createWithPortableTextMarkModel'\nimport {createWithPortableTextSelections} from './createWithPortableTextSelections'\nimport {createWithSchemaTypes} from './createWithSchemaTypes'\nimport {createWithUndoRedo} from './createWithUndoRedo'\nimport {createWithUtils} from './createWithUtils'\n\nexport interface OriginalEditorFunctions {\n  apply: (operation: BaseOperation) => void\n  onChange: () => void\n  normalizeNode: (entry: NodeEntry<Node>) => void\n}\n\ntype PluginsOptions = {\n  editorActor: EditorActor\n  subscriptions: Array<() => () => void>\n}\n\nexport const withPlugins = <T extends Editor>(\n  editor: T,\n  options: PluginsOptions,\n): PortableTextSlateEditor => {\n  const e = editor as T & PortableTextSlateEditor\n  const {editorActor} = options\n  const schemaTypes = editorActor.getSnapshot().context.schema\n  const operationToPatches = createOperationToPatches(schemaTypes)\n  const withObjectKeys = createWithObjectKeys(editorActor, schemaTypes)\n  const withSchemaTypes = createWithSchemaTypes({\n    editorActor,\n    schemaTypes,\n  })\n  const withPatches = createWithPatches({\n    editorActor,\n    patchFunctions: operationToPatches,\n    schemaTypes,\n    subscriptions: options.subscriptions,\n  })\n  const withMaxBlocks = createWithMaxBlocks(editorActor)\n  const withUndoRedo = createWithUndoRedo({\n    editorActor,\n    blockSchemaType: schemaTypes.block,\n    subscriptions: options.subscriptions,\n  })\n  const withPortableTextMarkModel = createWithPortableTextMarkModel(\n    editorActor,\n    schemaTypes,\n  )\n  const withPortableTextBlockStyle = createWithPortableTextBlockStyle(\n    editorActor,\n    schemaTypes,\n  )\n\n  const withPlaceholderBlock = createWithPlaceholderBlock(editorActor)\n\n  const withUtils = createWithUtils({\n    editorActor,\n    schemaTypes,\n  })\n  const withPortableTextSelections = createWithPortableTextSelections(\n    editorActor,\n    schemaTypes,\n  )\n  const withEventListeners = createWithEventListeners(\n    editorActor,\n    options.subscriptions,\n  )\n\n  // Ordering is important here, selection dealing last, data manipulation in the middle and core model stuff first.\n  return withEventListeners(\n    withSchemaTypes(\n      withObjectKeys(\n        withPortableTextMarkModel(\n          withPortableTextBlockStyle(\n            withPlaceholderBlock(\n              withUtils(\n                withMaxBlocks(\n                  withUndoRedo(withPatches(withPortableTextSelections(e))),\n                ),\n              ),\n            ),\n          ),\n        ),\n      ),\n    ),\n  )\n}\n","import {createEditor, type Descendant} from 'slate'\nimport {withReact} from 'slate-react'\nimport type {PortableTextSlateEditor} from '../types/editor'\nimport {debugWithName} from '../utils/debug'\nimport {KEY_TO_SLATE_ELEMENT, KEY_TO_VALUE_ELEMENT} from '../utils/weakMaps'\nimport type {EditorActor} from './editor-machine'\nimport {withPlugins} from './plugins/with-plugins'\n\nconst debug = debugWithName('component:PortableTextEditor:SlateContainer')\n\ntype SlateEditorConfig = {\n  editorActor: EditorActor\n}\n\n/**\n * @internal\n */\nexport type SlateEditor = {\n  instance: PortableTextSlateEditor\n  initialValue: Array<Descendant>\n}\n\nconst slateEditors = new WeakMap<EditorActor, SlateEditor>()\n\nexport function createSlateEditor(config: SlateEditorConfig): SlateEditor {\n  const existingSlateEditor = slateEditors.get(config.editorActor)\n\n  if (existingSlateEditor) {\n    debug('Reusing existing Slate editor instance', config.editorActor.id)\n    return existingSlateEditor\n  }\n\n  debug('Creating new Slate editor instance', config.editorActor.id)\n\n  const unsubscriptions: Array<() => void> = []\n  const subscriptions: Array<() => () => void> = []\n\n  const instance = withPlugins(withReact(createEditor()), {\n    editorActor: config.editorActor,\n    subscriptions,\n  })\n\n  KEY_TO_VALUE_ELEMENT.set(instance, {})\n  KEY_TO_SLATE_ELEMENT.set(instance, {})\n\n  for (const subscription of subscriptions) {\n    unsubscriptions.push(subscription())\n  }\n\n  const initialValue = [instance.pteCreateTextBlock({decorators: []})]\n\n  const slateEditor: SlateEditor = {\n    instance,\n    initialValue,\n  }\n\n  slateEditors.set(config.editorActor, slateEditor)\n\n  return slateEditor\n}\n","import {Editor, Transforms} from 'slate'\nimport type {BehaviorActionImplementation} from './behavior.actions'\nimport {createGuards} from './behavior.guards'\n\nexport const toggleListItemActionImplementation: BehaviorActionImplementation<\n  'list item.toggle'\n> = ({context, action}) => {\n  const isActive = isListItemActive({\n    editor: action.editor,\n    listItem: action.listItem,\n  })\n\n  if (isActive) {\n    removeListItemActionImplementation({\n      context,\n      action: {...action, type: 'list item.remove'},\n    })\n  } else {\n    addListItemActionImplementation({\n      context,\n      action: {...action, type: 'list item.add'},\n    })\n  }\n}\n\nexport const removeListItemActionImplementation: BehaviorActionImplementation<\n  'list item.remove'\n> = ({context, action}) => {\n  if (!action.editor.selection) {\n    return\n  }\n\n  const guards = createGuards(context)\n\n  const selectedBlocks = [\n    ...Editor.nodes(action.editor, {\n      at: action.editor.selection,\n      match: (node) => guards.isListBlock(node),\n    }),\n  ]\n\n  for (const [, at] of selectedBlocks) {\n    Transforms.unsetNodes(action.editor, ['listItem', 'level'], {at})\n  }\n}\n\nexport const addListItemActionImplementation: BehaviorActionImplementation<\n  'list item.add'\n> = ({context, action}) => {\n  if (!action.editor.selection) {\n    return\n  }\n\n  const guards = createGuards(context)\n\n  const selectedBlocks = [\n    ...Editor.nodes(action.editor, {\n      at: action.editor.selection,\n      match: (node) => guards.isTextBlock(node),\n    }),\n  ]\n\n  for (const [, at] of selectedBlocks) {\n    Transforms.setNodes(\n      action.editor,\n      {\n        level: 1,\n        listItem: action.listItem,\n      },\n      {at},\n    )\n  }\n}\n\nexport function isListItemActive({\n  editor,\n  listItem,\n}: {\n  editor: Editor\n  listItem: string\n}): boolean {\n  if (!editor.selection) {\n    return false\n  }\n\n  const selectedBlocks = [\n    ...Editor.nodes(editor, {\n      at: editor.selection,\n      match: (node) => editor.isTextBlock(node),\n    }),\n  ]\n\n  if (selectedBlocks.length > 0) {\n    return selectedBlocks.every(\n      ([node]) => editor.isListBlock(node) && node.listItem === listItem,\n    )\n  }\n\n  return false\n}\n","import {Editor, Transforms} from 'slate'\nimport type {BehaviorActionImplementation} from './behavior.actions'\nimport {createGuards} from './behavior.guards'\n\nexport const toggleStyleActionImplementation: BehaviorActionImplementation<\n  'style.toggle'\n> = ({context, action}) => {\n  const isActive = isStyleActive({\n    editor: action.editor,\n    style: action.style,\n  })\n\n  if (isActive) {\n    removeStyleActionImplementation({\n      context,\n      action: {...action, type: 'style.remove'},\n    })\n  } else {\n    addStyleActionImplementation({\n      context,\n      action: {...action, type: 'style.add'},\n    })\n  }\n}\n\nexport const removeStyleActionImplementation: BehaviorActionImplementation<\n  'style.remove'\n> = ({context, action}) => {\n  if (!action.editor.selection) {\n    return\n  }\n\n  const defaultStyle = context.schema.styles[0].value\n  const guards = createGuards(context)\n\n  const selectedBlocks = [\n    ...Editor.nodes(action.editor, {\n      at: action.editor.selection,\n      match: (node) => guards.isTextBlock(node),\n    }),\n  ]\n\n  for (const [, at] of selectedBlocks) {\n    Transforms.setNodes(\n      action.editor,\n      {\n        style: defaultStyle,\n      },\n      {\n        at,\n      },\n    )\n  }\n}\n\nexport const addStyleActionImplementation: BehaviorActionImplementation<\n  'style.add'\n> = ({context, action}) => {\n  if (!action.editor.selection) {\n    return\n  }\n\n  const guards = createGuards(context)\n\n  const selectedBlocks = [\n    ...Editor.nodes(action.editor, {\n      at: action.editor.selection,\n      match: (node) => guards.isTextBlock(node),\n    }),\n  ]\n\n  for (const [, at] of selectedBlocks) {\n    Transforms.setNodes(\n      action.editor,\n      {\n        style: action.style,\n      },\n      {\n        at,\n      },\n    )\n  }\n}\n\nexport function isStyleActive({\n  editor,\n  style,\n}: {\n  editor: Editor\n  style: string\n}): boolean {\n  if (!editor.selection) {\n    return false\n  }\n\n  const selectedBlocks = [\n    ...Editor.nodes(editor, {\n      at: editor.selection,\n      match: (node) => editor.isTextBlock(node),\n    }),\n  ]\n\n  if (selectedBlocks.length > 0) {\n    return selectedBlocks.every(([node]) => node.style === style)\n  }\n\n  return false\n}\n","import {\n  isPortableTextSpan,\n  type Path,\n  type PortableTextBlock,\n  type PortableTextChild,\n  type PortableTextObject,\n  type PortableTextSpan,\n  type PortableTextTextBlock,\n} from '@sanity/types'\nimport {\n  Editor,\n  Node,\n  Range,\n  Element as SlateElement,\n  Path as SlatePath,\n  Text,\n  Transforms,\n} from 'slate'\nimport type {DOMNode} from 'slate-dom'\nimport {ReactEditor} from 'slate-react'\nimport {isListItemActive} from '../../behavior-actions/behavior.action.list-item'\nimport {isStyleActive} from '../../behavior-actions/behavior.action.style'\nimport type {BehaviorActionImplementation} from '../../behavior-actions/behavior.actions'\nimport type {\n  EditableAPI,\n  EditableAPIDeleteOptions,\n  EditorSelection,\n  PortableTextSlateEditor,\n} from '../../types/editor'\nimport {debugWithName} from '../../utils/debug'\nimport {toPortableTextRange, toSlateRange} from '../../utils/ranges'\nimport {fromSlateValue, toSlateValue} from '../../utils/values'\nimport {\n  KEY_TO_VALUE_ELEMENT,\n  SLATE_TO_PORTABLE_TEXT_RANGE,\n} from '../../utils/weakMaps'\nimport type {EditorActor} from '../editor-machine'\nimport {isDecoratorActive} from './createWithPortableTextMarkModel'\n\nconst debug = debugWithName('API:editable')\n\nexport function createEditableAPI(\n  editor: PortableTextSlateEditor,\n  editorActor: EditorActor,\n) {\n  const types = editorActor.getSnapshot().context.schema\n\n  const editableApi: EditableAPI = {\n    focus: (): void => {\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'focus',\n        },\n        editor,\n      })\n    },\n    blur: (): void => {\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'blur',\n        },\n        editor,\n      })\n    },\n    toggleMark: (mark: string): void => {\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'decorator.toggle',\n          decorator: mark,\n        },\n        editor,\n      })\n    },\n    toggleList: (listItem: string): void => {\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'list item.toggle',\n          listItem,\n        },\n        editor,\n      })\n    },\n    toggleBlockStyle: (style: string): void => {\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'style.toggle',\n          style,\n        },\n        editor,\n      })\n    },\n    isMarkActive: (mark: string): boolean => {\n      // Try/catch this, as Slate may error because the selection is currently wrong\n      // TODO: catch only relevant error from Slate\n      try {\n        return isDecoratorActive({editor, decorator: mark})\n      } catch (err) {\n        console.warn(err)\n        return false\n      }\n    },\n    marks: (): string[] => {\n      return (\n        {\n          ...(Editor.marks(editor) || {}),\n        }.marks || []\n      )\n    },\n    undo: (): void => editor.undo(),\n    redo: (): void => editor.redo(),\n    select: (selection: EditorSelection): void => {\n      const slateSelection = toSlateRange(selection, editor)\n      if (slateSelection) {\n        Transforms.select(editor, slateSelection)\n      } else {\n        Transforms.deselect(editor)\n      }\n      editor.onChange()\n    },\n    focusBlock: (): PortableTextBlock | undefined => {\n      if (editor.selection) {\n        const block = Node.descendant(\n          editor,\n          editor.selection.focus.path.slice(0, 1),\n        )\n        if (block) {\n          return fromSlateValue(\n            [block],\n            types.block.name,\n            KEY_TO_VALUE_ELEMENT.get(editor),\n          )[0]\n        }\n      }\n      return undefined\n    },\n    focusChild: (): PortableTextChild | undefined => {\n      if (editor.selection) {\n        const block = Node.descendant(\n          editor,\n          editor.selection.focus.path.slice(0, 1),\n        )\n        if (block && editor.isTextBlock(block)) {\n          const ptBlock = fromSlateValue(\n            [block],\n            types.block.name,\n            KEY_TO_VALUE_ELEMENT.get(editor),\n          )[0] as PortableTextTextBlock\n          return ptBlock.children[editor.selection.focus.path[1]]\n        }\n      }\n      return undefined\n    },\n    insertChild: <TSchemaType extends {name: string}>(\n      type: TSchemaType,\n      value?: {[prop: string]: any},\n    ): Path => {\n      if (type.name !== types.span.name) {\n        editorActor.send({\n          type: 'behavior event',\n          behaviorEvent: {\n            type: 'insert.inline object',\n            inlineObject: {\n              name: type.name,\n              value,\n            },\n          },\n          editor,\n        })\n\n        return (\n          toPortableTextRange(\n            fromSlateValue(\n              editor.children,\n              types.block.name,\n              KEY_TO_VALUE_ELEMENT.get(editor),\n            ),\n            editor.selection,\n            types,\n          )?.focus.path ?? []\n        )\n      }\n\n      if (!editor.selection) {\n        throw new Error('The editor has no selection')\n      }\n      const [focusBlock] = Array.from(\n        Editor.nodes(editor, {\n          at: editor.selection.focus.path.slice(0, 1),\n          match: (n) => n._type === types.block.name,\n        }),\n      )[0] || [undefined]\n      if (!focusBlock) {\n        throw new Error('No focused text block')\n      }\n      if (\n        type.name !== types.span.name &&\n        !types.inlineObjects.some((t) => t.name === type.name)\n      ) {\n        throw new Error(\n          'This type cannot be inserted as a child to a text block',\n        )\n      }\n      const block = toSlateValue(\n        [\n          {\n            _key: editorActor.getSnapshot().context.keyGenerator(),\n            _type: types.block.name,\n            children: [\n              {\n                _key: editorActor.getSnapshot().context.keyGenerator(),\n                _type: type.name,\n                ...(value ? value : {}),\n              },\n            ],\n          },\n        ],\n        {schemaTypes: editorActor.getSnapshot().context.schema},\n      )[0] as unknown as SlateElement\n      const child = block.children[0]\n      const focusChildPath = editor.selection.focus.path.slice(0, 2)\n      const isSpanNode = child._type === types.span.name\n      const focusNode = Node.get(editor, focusChildPath)\n\n      // If we are inserting a span, and currently have focus on an inline object,\n      // move the selection to the next span (guaranteed by normalizing rules) before inserting it.\n      if (isSpanNode && focusNode._type !== types.span.name) {\n        debug(\n          'Inserting span child next to inline object child, moving selection + 1',\n        )\n        editor.move({distance: 1, unit: 'character'})\n      }\n\n      Transforms.insertNodes(editor, child, {\n        select: true,\n        at: editor.selection,\n      })\n      editor.onChange()\n\n      return (\n        toPortableTextRange(\n          fromSlateValue(\n            editor.children,\n            types.block.name,\n            KEY_TO_VALUE_ELEMENT.get(editor),\n          ),\n          editor.selection,\n          types,\n        )?.focus.path || []\n      )\n    },\n    insertBlock: <TSchemaType extends {name: string}>(\n      type: TSchemaType,\n      value?: {[prop: string]: any},\n    ): Path => {\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'insert.block object',\n          blockObject: {\n            name: type.name,\n            value,\n          },\n          placement: 'auto',\n        },\n        editor,\n      })\n\n      return (\n        toPortableTextRange(\n          fromSlateValue(\n            editor.children,\n            types.block.name,\n            KEY_TO_VALUE_ELEMENT.get(editor),\n          ),\n          editor.selection,\n          types,\n        )?.focus.path ?? []\n      )\n    },\n    hasBlockStyle: (style: string): boolean => {\n      try {\n        return isStyleActive({editor, style})\n      } catch {\n        // This is fine.\n        return false\n      }\n    },\n    hasListStyle: (listItem: string): boolean => {\n      try {\n        return isListItemActive({editor, listItem})\n      } catch {\n        // This is fine.\n        return false\n      }\n    },\n    isVoid: (element: PortableTextBlock | PortableTextChild) => {\n      return ![types.block.name, types.span.name].includes(element._type)\n    },\n    findByPath: (\n      path: Path,\n    ): [\n      PortableTextBlock | PortableTextChild | undefined,\n      Path | undefined,\n    ] => {\n      const slatePath = toSlateRange(\n        {focus: {path, offset: 0}, anchor: {path, offset: 0}},\n        editor,\n      )\n      if (slatePath) {\n        const [block, blockPath] = Editor.node(\n          editor,\n          slatePath.focus.path.slice(0, 1),\n        )\n        if (block && blockPath && typeof block._key === 'string') {\n          if (path.length === 1 && slatePath.focus.path.length === 1) {\n            return [\n              fromSlateValue([block], types.block.name)[0],\n              [{_key: block._key}],\n            ]\n          }\n          const ptBlock = fromSlateValue(\n            [block],\n            types.block.name,\n            KEY_TO_VALUE_ELEMENT.get(editor),\n          )[0]\n          if (editor.isTextBlock(ptBlock)) {\n            const ptChild = ptBlock.children[slatePath.focus.path[1]]\n            if (ptChild) {\n              return [\n                ptChild,\n                [{_key: block._key}, 'children', {_key: ptChild._key}],\n              ]\n            }\n          }\n        }\n      }\n      return [undefined, undefined]\n    },\n    findDOMNode: (\n      element: PortableTextBlock | PortableTextChild,\n    ): DOMNode | undefined => {\n      let node: DOMNode | undefined\n      try {\n        const [item] = Array.from(\n          Editor.nodes(editor, {\n            at: [],\n            match: (n) => n._key === element._key,\n          }) || [],\n        )[0] || [undefined]\n        node = ReactEditor.toDOMNode(editor, item)\n      } catch {\n        // Nothing\n      }\n      return node\n    },\n    activeAnnotations: (): PortableTextObject[] => {\n      if (!editor.selection || editor.selection.focus.path.length < 2) {\n        return []\n      }\n      try {\n        const activeAnnotations: PortableTextObject[] = []\n        const spans = Editor.nodes(editor, {\n          at: editor.selection,\n          match: (node) =>\n            Text.isText(node) &&\n            node.marks !== undefined &&\n            Array.isArray(node.marks) &&\n            node.marks.length > 0,\n        })\n        for (const [span, path] of spans) {\n          const [block] = Editor.node(editor, path, {depth: 1})\n          if (editor.isTextBlock(block)) {\n            block.markDefs?.forEach((def) => {\n              if (\n                Text.isText(span) &&\n                span.marks &&\n                Array.isArray(span.marks) &&\n                span.marks.includes(def._key)\n              ) {\n                activeAnnotations.push(def)\n              }\n            })\n          }\n        }\n        return activeAnnotations\n      } catch {\n        return []\n      }\n    },\n    isAnnotationActive: (\n      annotationType: PortableTextObject['_type'],\n    ): boolean => {\n      return isAnnotationActive({editor, annotation: {name: annotationType}})\n    },\n    addAnnotation: (type, value) => {\n      let paths: ReturnType<EditableAPI['addAnnotation']> = undefined\n\n      Editor.withoutNormalizing(editor, () => {\n        paths = addAnnotationActionImplementation({\n          context: {\n            keyGenerator: editorActor.getSnapshot().context.keyGenerator,\n            schema: types,\n          },\n          action: {\n            type: 'annotation.add',\n            annotation: {name: type.name, value: value ?? {}},\n            editor,\n          },\n        })\n      })\n      editor.onChange()\n\n      return paths\n    },\n    delete: (\n      selection: EditorSelection,\n      options?: EditableAPIDeleteOptions,\n    ): void => {\n      if (selection) {\n        const range = toSlateRange(selection, editor)\n        const hasRange =\n          range && range.anchor.path.length > 0 && range.focus.path.length > 0\n        if (!hasRange) {\n          throw new Error('Invalid range')\n        }\n        if (range) {\n          if (!options?.mode || options?.mode === 'selected') {\n            debug(`Deleting content in selection`)\n            Transforms.delete(editor, {\n              at: range,\n              hanging: true,\n              voids: true,\n            })\n            editor.onChange()\n            return\n          }\n          if (options?.mode === 'blocks') {\n            debug(`Deleting blocks touched by selection`)\n            Transforms.removeNodes(editor, {\n              at: range,\n              voids: true,\n              match: (node) => {\n                return (\n                  editor.isTextBlock(node) ||\n                  (!editor.isTextBlock(node) && SlateElement.isElement(node))\n                )\n              },\n            })\n          }\n          if (options?.mode === 'children') {\n            debug(`Deleting children touched by selection`)\n            Transforms.removeNodes(editor, {\n              at: range,\n              voids: true,\n              match: (node) => {\n                return (\n                  node._type === types.span.name || // Text children\n                  (!editor.isTextBlock(node) && SlateElement.isElement(node)) // inline blocks\n                )\n              },\n            })\n          }\n          // If the editor was emptied, insert a placeholder block\n          // directly into the editor's children. We don't want to do this\n          // through a Transform (because that would trigger a change event\n          // that would insert the placeholder into the actual value\n          // which should remain empty)\n          if (editor.children.length === 0) {\n            editor.children = [editor.pteCreateTextBlock({decorators: []})]\n          }\n          editor.onChange()\n        }\n      }\n    },\n    removeAnnotation: <TSchemaType extends {name: string}>(\n      type: TSchemaType,\n    ): void => {\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'annotation.remove',\n          annotation: {name: type.name},\n        },\n        editor,\n      })\n    },\n    getSelection: (): EditorSelection | null => {\n      let ptRange: EditorSelection = null\n      if (editor.selection) {\n        const existing = SLATE_TO_PORTABLE_TEXT_RANGE.get(editor.selection)\n        if (existing) {\n          return existing\n        }\n        ptRange = toPortableTextRange(\n          fromSlateValue(\n            editor.children,\n            types.block.name,\n            KEY_TO_VALUE_ELEMENT.get(editor),\n          ),\n          editor.selection,\n          types,\n        )\n        SLATE_TO_PORTABLE_TEXT_RANGE.set(editor.selection, ptRange)\n      }\n      return ptRange\n    },\n    getValue: () => {\n      return fromSlateValue(\n        editor.children,\n        types.block.name,\n        KEY_TO_VALUE_ELEMENT.get(editor),\n      )\n    },\n    isCollapsedSelection: () => {\n      return !!editor.selection && Range.isCollapsed(editor.selection)\n    },\n    isExpandedSelection: () => {\n      return !!editor.selection && Range.isExpanded(editor.selection)\n    },\n    insertBreak: () => {\n      editor.insertBreak()\n      editor.onChange()\n    },\n    getFragment: () => {\n      return fromSlateValue(editor.getFragment(), types.block.name)\n    },\n    isSelectionsOverlapping: (\n      selectionA: EditorSelection,\n      selectionB: EditorSelection,\n    ) => {\n      // Convert the selections to Slate ranges\n      const rangeA = toSlateRange(selectionA, editor)\n      const rangeB = toSlateRange(selectionB, editor)\n\n      // Make sure the ranges are valid\n      const isValidRanges = Range.isRange(rangeA) && Range.isRange(rangeB)\n\n      // Check if the ranges are overlapping\n      const isOverlapping = isValidRanges && Range.includes(rangeA, rangeB)\n\n      return isOverlapping\n    },\n  }\n\n  return editableApi\n}\n\nfunction isAnnotationActive({\n  editor,\n  annotation,\n}: {\n  editor: PortableTextSlateEditor\n  annotation: {\n    name: string\n  }\n}) {\n  if (!editor.selection || editor.selection.focus.path.length < 2) {\n    return false\n  }\n\n  try {\n    const spans = [\n      ...Editor.nodes(editor, {\n        at: editor.selection,\n        match: (node) => Text.isText(node),\n      }),\n    ]\n\n    if (spans.length === 0) {\n      return false\n    }\n\n    if (\n      spans.some(\n        ([span]) =>\n          !isPortableTextSpan(span) || !span.marks || span.marks?.length === 0,\n      )\n    )\n      return false\n\n    const selectionMarkDefs = spans.reduce((accMarkDefs, [, path]) => {\n      const [block] = Editor.node(editor, path, {depth: 1})\n      if (editor.isTextBlock(block) && block.markDefs) {\n        return [...accMarkDefs, ...block.markDefs]\n      }\n      return accMarkDefs\n    }, [] as PortableTextObject[])\n\n    return spans.every(([span]) => {\n      if (!isPortableTextSpan(span)) return false\n\n      const spanMarkDefs = span.marks?.map(\n        (markKey) =>\n          selectionMarkDefs.find((def) => def?._key === markKey)?._type,\n      )\n\n      return spanMarkDefs?.includes(annotation.name)\n    })\n  } catch {\n    return false\n  }\n}\n\n/**\n * @public\n */\nexport type AddedAnnotationPaths = {\n  /**\n   * @deprecated An annotation may be applied to multiple blocks, resulting\n   * in multiple `markDef`'s being created. Use `markDefPaths` instead.\n   */\n  markDefPath: Path\n  markDefPaths: Array<Path>\n  /**\n   * @deprecated Does not return anything meaningful since an annotation\n   * can span multiple blocks and spans. If references the span closest\n   * to the focus point of the selection.\n   */\n  spanPath: Path\n}\n\nexport const addAnnotationActionImplementation: BehaviorActionImplementation<\n  'annotation.add',\n  AddedAnnotationPaths | undefined\n> = ({context, action}) => {\n  const editor = action.editor\n  const {selection: originalSelection} = editor\n  let paths: AddedAnnotationPaths | undefined = undefined\n\n  if (originalSelection) {\n    if (Range.isCollapsed(originalSelection)) {\n      editor.pteExpandToWord()\n      editor.onChange()\n    }\n\n    // If we still have a selection, add the annotation to the selected text\n    if (editor.selection) {\n      let spanPath: Path | undefined\n      let markDefPath: Path | undefined\n      const markDefPaths: Path[] = []\n\n      if (!editor.selection) {\n        return\n      }\n\n      const selectedBlocks = Editor.nodes(editor, {\n        at: editor.selection,\n        match: (node) => editor.isTextBlock(node),\n        reverse: Range.isBackward(editor.selection),\n      })\n\n      for (const [block, blockPath] of selectedBlocks) {\n        if (block.children.length === 0) {\n          continue\n        }\n\n        if (block.children.length === 1 && block.children[0].text === '') {\n          continue\n        }\n\n        const annotationKey = context.keyGenerator()\n        const markDefs = block.markDefs ?? []\n        const existingMarkDef = markDefs.find(\n          (markDef) =>\n            markDef._type === action.annotation.name &&\n            markDef._key === annotationKey,\n        )\n\n        if (existingMarkDef === undefined) {\n          Transforms.setNodes(\n            editor,\n            {\n              markDefs: [\n                ...markDefs,\n                {\n                  _type: action.annotation.name,\n                  _key: annotationKey,\n                  ...action.annotation.value,\n                },\n              ],\n            },\n            {at: blockPath},\n          )\n\n          markDefPath = [{_key: block._key}, 'markDefs', {_key: annotationKey}]\n          if (Range.isBackward(editor.selection)) {\n            markDefPaths.unshift(markDefPath)\n          } else {\n            markDefPaths.push(markDefPath)\n          }\n        }\n\n        Transforms.setNodes(editor, {}, {match: Text.isText, split: true})\n\n        const children = Node.children(editor, blockPath)\n\n        for (const [span, path] of children) {\n          if (!editor.isTextSpan(span)) {\n            continue\n          }\n\n          if (!Range.includes(editor.selection, path)) {\n            continue\n          }\n\n          const marks = span.marks ?? []\n          const existingSameTypeAnnotations = marks.filter((mark) =>\n            markDefs.some(\n              (markDef) =>\n                markDef._key === mark &&\n                markDef._type === action.annotation.name,\n            ),\n          )\n\n          Transforms.setNodes(\n            editor,\n            {\n              marks: [\n                ...marks.filter(\n                  (mark) => !existingSameTypeAnnotations.includes(mark),\n                ),\n                annotationKey,\n              ],\n            },\n            {at: path},\n          )\n          spanPath = [{_key: block._key}, 'children', {_key: span._key}]\n        }\n      }\n\n      if (markDefPath && spanPath) {\n        paths = {\n          markDefPath,\n          markDefPaths,\n          spanPath,\n        }\n      }\n    }\n  }\n  return paths\n}\n\nexport const removeAnnotationActionImplementation: BehaviorActionImplementation<\n  'annotation.remove'\n> = ({action}) => {\n  const editor = action.editor\n\n  debug('Removing annotation', action.annotation.name)\n\n  if (!editor.selection) {\n    return\n  }\n\n  if (Range.isCollapsed(editor.selection)) {\n    const [block, blockPath] = Editor.node(editor, editor.selection, {\n      depth: 1,\n    })\n\n    if (!editor.isTextBlock(block)) {\n      return\n    }\n\n    const markDefs = block.markDefs ?? []\n    const potentialAnnotations = markDefs.filter(\n      (markDef) => markDef._type === action.annotation.name,\n    )\n\n    const [selectedChild, selectedChildPath] = Editor.node(\n      editor,\n      editor.selection,\n      {\n        depth: 2,\n      },\n    )\n\n    if (!editor.isTextSpan(selectedChild)) {\n      return\n    }\n\n    const annotationToRemove = selectedChild.marks?.find((mark) =>\n      potentialAnnotations.some((markDef) => markDef._key === mark),\n    )\n\n    if (!annotationToRemove) {\n      return\n    }\n\n    const previousSpansWithSameAnnotation: Array<\n      [span: PortableTextSpan, path: SlatePath]\n    > = []\n\n    for (const [child, childPath] of Node.children(editor, blockPath, {\n      reverse: true,\n    })) {\n      if (!editor.isTextSpan(child)) {\n        continue\n      }\n\n      if (!SlatePath.isBefore(childPath, selectedChildPath)) {\n        continue\n      }\n\n      if (child.marks?.includes(annotationToRemove)) {\n        previousSpansWithSameAnnotation.push([child, childPath])\n      } else {\n        break\n      }\n    }\n\n    const nextSpansWithSameAnnotation: Array<\n      [span: PortableTextSpan, path: SlatePath]\n    > = []\n\n    for (const [child, childPath] of Node.children(editor, blockPath)) {\n      if (!editor.isTextSpan(child)) {\n        continue\n      }\n\n      if (!SlatePath.isAfter(childPath, selectedChildPath)) {\n        continue\n      }\n\n      if (child.marks?.includes(annotationToRemove)) {\n        nextSpansWithSameAnnotation.push([child, childPath])\n      } else {\n        break\n      }\n    }\n\n    for (const [child, childPath] of [\n      ...previousSpansWithSameAnnotation,\n      [selectedChild, selectedChildPath] as const,\n      ...nextSpansWithSameAnnotation,\n    ]) {\n      Transforms.setNodes(\n        editor,\n        {\n          marks: child.marks?.filter((mark) => mark !== annotationToRemove),\n        },\n        {at: childPath},\n      )\n    }\n  } else {\n    Transforms.setNodes(\n      editor,\n      {},\n      {\n        match: (node) => editor.isTextSpan(node),\n        split: true,\n        hanging: true,\n      },\n    )\n\n    const blocks = Editor.nodes(editor, {\n      at: editor.selection,\n      match: (node) => editor.isTextBlock(node),\n    })\n\n    for (const [block, blockPath] of blocks) {\n      const children = Node.children(editor, blockPath)\n\n      for (const [child, childPath] of children) {\n        if (!editor.isTextSpan(child)) {\n          continue\n        }\n\n        if (!Range.includes(editor.selection, childPath)) {\n          continue\n        }\n\n        const markDefs = block.markDefs ?? []\n        const marks = child.marks ?? []\n        const marksWithoutAnnotation = marks.filter((mark) => {\n          const markDef = markDefs.find((markDef) => markDef._key === mark)\n          return markDef?._type !== action.annotation.name\n        })\n\n        if (marksWithoutAnnotation.length !== marks.length) {\n          Transforms.setNodes(\n            editor,\n            {\n              marks: marksWithoutAnnotation,\n            },\n            {at: childPath},\n          )\n        }\n      }\n    }\n  }\n}\n\nexport const toggleAnnotationActionImplementation: BehaviorActionImplementation<\n  'annotation.toggle',\n  AddedAnnotationPaths | undefined\n> = ({context, action}) => {\n  const isActive = isAnnotationActive({\n    editor: action.editor,\n    annotation: {name: action.annotation.name},\n  })\n\n  if (isActive) {\n    removeAnnotationActionImplementation({\n      context,\n      action: {\n        type: 'annotation.remove',\n        annotation: action.annotation,\n        editor: action.editor,\n      },\n    })\n  } else {\n    return addAnnotationActionImplementation({\n      context,\n      action: {\n        type: 'annotation.add',\n        annotation: action.annotation,\n        editor: action.editor,\n      },\n    })\n  }\n}\n","import {Editor, Transforms, type Descendant} from 'slate'\nimport type {EditorSchema} from '../editor/define-schema'\nimport type {PortableTextSlateEditor} from '../types/editor'\nimport {isEqualToEmptyEditor} from '../utils/values'\n\nexport function insertBlock({\n  block,\n  placement,\n  editor,\n  schema,\n}: {\n  block: Descendant\n  placement: 'auto' | 'after' | 'before'\n  editor: PortableTextSlateEditor\n  schema: EditorSchema\n}) {\n  if (!editor.selection) {\n    const lastBlock = Array.from(\n      Editor.nodes(editor, {\n        match: (n) => !Editor.isEditor(n),\n        at: [],\n        reverse: true,\n      }),\n    )[0]\n\n    // If there is no selection, let's just insert the new block at the\n    // end of the document\n    Editor.insertNode(editor, block)\n\n    if (lastBlock && isEqualToEmptyEditor([lastBlock[0]], schema)) {\n      // And if the last block was an empty text block, let's remove\n      // that too\n      Transforms.removeNodes(editor, {at: lastBlock[1]})\n    }\n  } else {\n    const [focusBlock, focusBlockPath] = Array.from(\n      Editor.nodes(editor, {\n        at: editor.selection.focus.path.slice(0, 1),\n        match: (n) => !Editor.isEditor(n),\n      }),\n    )[0] ?? [undefined, undefined]\n\n    if (placement === 'after') {\n      const nextPath = [focusBlockPath[0] + 1]\n\n      Transforms.insertNodes(editor, block, {at: nextPath})\n      Transforms.select(editor, {\n        anchor: {path: [nextPath[0], 0], offset: 0},\n        focus: {path: [nextPath[0], 0], offset: 0},\n      })\n    } else if (placement === 'before') {\n      Transforms.insertNodes(editor, block, {at: focusBlockPath})\n    } else {\n      Editor.insertNode(editor, block)\n    }\n\n    if (focusBlock && isEqualToEmptyEditor([focusBlock], schema)) {\n      Transforms.removeNodes(editor, {at: focusBlockPath})\n    }\n  }\n}\n","import {toSlateValue} from '../utils/values'\nimport {insertBlock} from './behavior.action-utils.insert-block'\nimport type {BehaviorActionImplementation} from './behavior.actions'\n\nexport const insertBlockObjectActionImplementation: BehaviorActionImplementation<\n  'insert.block object'\n> = ({context, action}) => {\n  const block = toSlateValue(\n    [\n      {\n        _key: context.keyGenerator(),\n        _type: action.blockObject.name,\n        ...(action.blockObject.value ? action.blockObject.value : {}),\n      },\n    ],\n    {schemaTypes: context.schema},\n  )[0]\n\n  insertBlock({\n    block,\n    placement: action.placement,\n    editor: action.editor,\n    schema: context.schema,\n  })\n}\n","import {isEqual} from 'lodash'\nimport {Editor, Node, Path, Range, Transforms} from 'slate'\nimport type {SlateTextBlock, VoidElement} from '../types/slate'\nimport type {BehaviorActionImplementation} from './behavior.actions'\n\nexport const insertBreakActionImplementation: BehaviorActionImplementation<\n  'insert.break'\n> = ({context, action}) => {\n  const keyGenerator = context.keyGenerator\n  const schema = context.schema\n  const editor = action.editor\n\n  if (!editor.selection) {\n    return\n  }\n\n  const [focusSpan] = Array.from(\n    Editor.nodes(editor, {\n      mode: 'lowest',\n      at: editor.selection.focus,\n      match: (n) => editor.isTextSpan(n),\n      voids: false,\n    }),\n  )[0] ?? [undefined]\n  const focusDecorators =\n    focusSpan?.marks?.filter((mark) =>\n      schema.decorators.some((decorator) => decorator.value === mark),\n    ) ?? []\n  const focusAnnotations =\n    focusSpan?.marks?.filter(\n      (mark) =>\n        !schema.decorators.some((decorator) => decorator.value === mark),\n    ) ?? []\n\n  const anchorBlockPath = editor.selection.anchor.path.slice(0, 1)\n  const focusBlockPath = editor.selection.focus.path.slice(0, 1)\n  const focusBlock = Node.descendant(editor, focusBlockPath) as\n    | SlateTextBlock\n    | VoidElement\n\n  if (editor.isTextBlock(focusBlock)) {\n    const [start, end] = Range.edges(editor.selection)\n    const lastFocusBlockChild =\n      focusBlock.children[focusBlock.children.length - 1]\n    const atTheEndOfBlock = isEqual(start, {\n      path: [...focusBlockPath, focusBlock.children.length - 1],\n      offset: editor.isTextSpan(lastFocusBlockChild)\n        ? lastFocusBlockChild.text.length\n        : 0,\n    })\n    const atTheStartOfBlock = isEqual(end, {\n      path: [...focusBlockPath, 0],\n      offset: 0,\n    })\n\n    if (atTheEndOfBlock && Range.isCollapsed(editor.selection)) {\n      Editor.insertNode(\n        editor,\n        editor.pteCreateTextBlock({\n          decorators: [],\n          listItem: focusBlock.listItem,\n          level: focusBlock.level,\n        }),\n      )\n\n      return\n    }\n\n    if (atTheStartOfBlock && Range.isCollapsed(editor.selection)) {\n      Editor.insertNode(\n        editor,\n        editor.pteCreateTextBlock({\n          decorators: focusAnnotations.length === 0 ? focusDecorators : [],\n          listItem: focusBlock.listItem,\n          level: focusBlock.level,\n        }),\n      )\n\n      const [nextBlockPath] = Path.next(focusBlockPath)\n\n      Transforms.select(editor, {\n        anchor: {path: [nextBlockPath, 0], offset: 0},\n        focus: {path: [nextBlockPath, 0], offset: 0},\n      })\n\n      return\n    }\n\n    const selectionAcrossBlocks = anchorBlockPath[0] !== focusBlockPath[0]\n\n    const isInTheMiddleOfNode = !atTheStartOfBlock && !atTheEndOfBlock\n\n    if (isInTheMiddleOfNode && !selectionAcrossBlocks) {\n      Editor.withoutNormalizing(editor, () => {\n        if (!editor.selection) {\n          return\n        }\n\n        Transforms.splitNodes(editor, {\n          at: editor.selection,\n        })\n\n        const [nextNode, nextNodePath] = Editor.node(\n          editor,\n          Path.next(focusBlockPath),\n          {depth: 1},\n        )\n\n        Transforms.setSelection(editor, {\n          anchor: {path: [...nextNodePath, 0], offset: 0},\n          focus: {path: [...nextNodePath, 0], offset: 0},\n        })\n\n        /**\n         * Assign new keys to markDefs that are now split across two blocks\n         */\n        if (\n          editor.isTextBlock(nextNode) &&\n          nextNode.markDefs &&\n          nextNode.markDefs.length > 0\n        ) {\n          const newMarkDefKeys = new Map<string, string>()\n\n          const prevNodeSpans = Array.from(\n            Node.children(editor, focusBlockPath),\n          )\n            .map((entry) => entry[0])\n            .filter((node) => editor.isTextSpan(node))\n          const children = Node.children(editor, nextNodePath)\n\n          for (const [child, childPath] of children) {\n            if (!editor.isTextSpan(child)) {\n              continue\n            }\n\n            const marks = child.marks ?? []\n\n            // Go through the marks of the span and figure out if any of\n            // them refer to annotations that are also present in the\n            // previous block\n            for (const mark of marks) {\n              if (\n                schema.decorators.some((decorator) => decorator.value === mark)\n              ) {\n                continue\n              }\n\n              if (\n                prevNodeSpans.some((prevNodeSpan) =>\n                  prevNodeSpan.marks?.includes(mark),\n                ) &&\n                !newMarkDefKeys.has(mark)\n              ) {\n                // This annotation is both present in the previous block\n                // and this block, so let's assign a new key to it\n                newMarkDefKeys.set(mark, keyGenerator())\n              }\n            }\n\n            const newMarks = marks.map(\n              (mark) => newMarkDefKeys.get(mark) ?? mark,\n            )\n\n            // No need to update the marks if they are the same\n            if (!isEqual(marks, newMarks)) {\n              Transforms.setNodes(\n                editor,\n                {marks: newMarks},\n                {\n                  at: childPath,\n                },\n              )\n            }\n          }\n\n          // Time to update all the markDefs that need a new key because\n          // they've been split across blocks\n          const newMarkDefs = nextNode.markDefs.map((markDef) => ({\n            ...markDef,\n            _key: newMarkDefKeys.get(markDef._key) ?? markDef._key,\n          }))\n\n          // No need to update the markDefs if they are the same\n          if (!isEqual(nextNode.markDefs, newMarkDefs)) {\n            Transforms.setNodes(\n              editor,\n              {markDefs: newMarkDefs},\n              {\n                at: nextNodePath,\n                match: (node) => editor.isTextBlock(node),\n              },\n            )\n          }\n        }\n      })\n      editor.onChange()\n      return\n    }\n  }\n\n  Transforms.splitNodes(editor, {always: true})\n}\n\nexport const insertSoftBreakActionImplementation: BehaviorActionImplementation<\n  'insert.soft break'\n> = ({context, action}) => {\n  // This mimics Slate's internal which also just does a regular insert break\n  // when soft-breaking\n  insertBreakActionImplementation({\n    context,\n    action: {...action, type: 'insert.break'},\n  })\n}\n","import {Editor, Transforms, type Element} from 'slate'\nimport {toSlateValue} from '../utils/values'\nimport type {BehaviorActionImplementation} from './behavior.actions'\n\nexport const insertInlineObjectActionImplementation: BehaviorActionImplementation<\n  'insert.inline object'\n> = ({context, action}) => {\n  if (\n    !context.schema.inlineObjects.some(\n      (inlineObject) => inlineObject.name === action.inlineObject.name,\n    )\n  ) {\n    console.error('Unable to insert unknown inline object')\n    return\n  }\n\n  if (!action.editor.selection) {\n    console.error('Unable to insert inline object without selection')\n    return\n  }\n\n  const [focusTextBlock] = Array.from(\n    Editor.nodes(action.editor, {\n      at: action.editor.selection.focus.path,\n      match: (node) => action.editor.isTextBlock(node),\n    }),\n  ).at(0) ?? [undefined, undefined]\n\n  if (!focusTextBlock) {\n    console.error('Unable to perform action without focus text block')\n    return\n  }\n\n  const block = toSlateValue(\n    [\n      {\n        _type: context.schema.block.name,\n        _key: context.keyGenerator(),\n        children: [\n          {\n            _type: action.inlineObject.name,\n            _key: context.keyGenerator(),\n            ...(action.inlineObject.value ?? {}),\n          },\n        ],\n      },\n    ],\n    {schemaTypes: context.schema},\n  ).at(0) as unknown as Element\n  const child = block?.children.at(0)\n\n  if (!child) {\n    console.error('Unable to insert inline object')\n    return\n  }\n\n  Transforms.insertNodes(action.editor, child)\n}\n","import {Editor, Transforms} from 'slate'\nimport type {BehaviorActionImplementation} from './behavior.actions'\n\nexport const insertSpanActionImplementation: BehaviorActionImplementation<\n  'insert.span'\n> = ({context, action}) => {\n  if (!action.editor.selection) {\n    console.error('Unable to perform action without selection', action)\n    return\n  }\n\n  const [focusBlock, focusBlockPath] = Array.from(\n    Editor.nodes(action.editor, {\n      at: action.editor.selection.focus.path,\n      match: (node) => action.editor.isTextBlock(node),\n    }),\n  )[0] ?? [undefined, undefined]\n\n  if (!focusBlock || !focusBlockPath) {\n    console.error('Unable to perform action without focus block', action)\n    return\n  }\n\n  const markDefs = focusBlock.markDefs ?? []\n  const annotations = action.annotations\n    ? action.annotations.map((annotation) => ({\n        _type: annotation.name,\n        _key: context.keyGenerator(),\n        ...annotation.value,\n      }))\n    : undefined\n\n  if (annotations && annotations.length > 0) {\n    Transforms.setNodes(action.editor, {\n      markDefs: [...markDefs, ...annotations],\n    })\n  }\n\n  Transforms.insertNodes(action.editor, {\n    _type: 'span',\n    _key: context.keyGenerator(),\n    text: action.text,\n    marks: [\n      ...(annotations?.map((annotation) => annotation._key) ?? []),\n      ...(action.decorators ?? []),\n    ],\n  })\n}\n","import {Transforms} from 'slate'\nimport {toSlateRange} from '../utils/ranges'\nimport type {BehaviorActionImplementation} from './behavior.actions'\n\nexport const textBlockSetActionImplementation: BehaviorActionImplementation<\n  'text block.set'\n> = ({action}) => {\n  const at = toSlateRange(\n    {\n      anchor: {path: action.at, offset: 0},\n      focus: {path: action.at, offset: 0},\n    },\n    action.editor,\n  )!\n\n  Transforms.setNodes(\n    action.editor,\n    {\n      ...(action.style ? {style: action.style} : {}),\n      ...(action.listItem ? {listItem: action.listItem} : {}),\n      ...(action.level ? {level: action.level} : {}),\n    },\n    {at},\n  )\n}\n","import {Transforms} from 'slate'\nimport {toSlateRange} from '../utils/ranges'\nimport type {BehaviorActionImplementation} from './behavior.actions'\n\nexport const textBlockUnsetActionImplementation: BehaviorActionImplementation<\n  'text block.unset'\n> = ({action}) => {\n  const at = toSlateRange(\n    {\n      anchor: {path: action.at, offset: 0},\n      focus: {path: action.at, offset: 0},\n    },\n    action.editor,\n  )!\n\n  Transforms.unsetNodes(action.editor, action.props, {at})\n}\n","import {\n  deleteBackward,\n  deleteForward,\n  insertText,\n  Path,\n  Transforms,\n} from 'slate'\nimport {ReactEditor} from 'slate-react'\nimport type {\n  BehaviorAction,\n  SyntheticBehaviorEvent,\n} from '../behaviors/behavior.types'\nimport type {EditorContext} from '../editor/editor-snapshot'\nimport {\n  addAnnotationActionImplementation,\n  removeAnnotationActionImplementation,\n  toggleAnnotationActionImplementation,\n} from '../editor/plugins/createWithEditableAPI'\nimport {\n  addDecoratorActionImplementation,\n  removeDecoratorActionImplementation,\n  toggleDecoratorActionImplementation,\n} from '../editor/plugins/createWithPortableTextMarkModel'\nimport {blockOffsetToSpanSelectionPoint} from '../editor/utils/utils.block-offset'\nimport type {PickFromUnion} from '../type-utils'\nimport {toSlatePath} from '../utils/paths'\nimport {toSlateRange} from '../utils/ranges'\nimport {fromSlateValue, toSlateValue} from '../utils/values'\nimport {KEY_TO_VALUE_ELEMENT} from '../utils/weakMaps'\nimport {insertBlock} from './behavior.action-utils.insert-block'\nimport {insertBlockObjectActionImplementation} from './behavior.action.insert-block-object'\nimport {\n  insertBreakActionImplementation,\n  insertSoftBreakActionImplementation,\n} from './behavior.action.insert-break'\nimport {insertInlineObjectActionImplementation} from './behavior.action.insert-inline-object'\nimport {insertSpanActionImplementation} from './behavior.action.insert-span'\nimport {\n  addListItemActionImplementation,\n  removeListItemActionImplementation,\n  toggleListItemActionImplementation,\n} from './behavior.action.list-item'\nimport {\n  addStyleActionImplementation,\n  removeStyleActionImplementation,\n  toggleStyleActionImplementation,\n} from './behavior.action.style'\nimport {textBlockSetActionImplementation} from './behavior.action.text-block.set'\nimport {textBlockUnsetActionImplementation} from './behavior.action.text-block.unset'\n\nexport type BehaviorActionImplementationContext = Pick<\n  EditorContext,\n  'keyGenerator' | 'schema'\n>\n\nexport type BehaviorActionImplementation<\n  TBehaviorActionType extends BehaviorAction['type'],\n  TReturnType = void,\n> = ({\n  context,\n  action,\n}: {\n  context: BehaviorActionImplementationContext\n  action: PickFromUnion<BehaviorAction, 'type', TBehaviorActionType>\n}) => TReturnType\n\ntype BehaviorActionImplementations = {\n  [TBehaviorActionType in BehaviorAction['type']]: BehaviorActionImplementation<TBehaviorActionType>\n}\n\nconst behaviorActionImplementations: BehaviorActionImplementations = {\n  'annotation.add': addAnnotationActionImplementation,\n  'annotation.remove': removeAnnotationActionImplementation,\n  'annotation.toggle': toggleAnnotationActionImplementation,\n  'blur': ({action}) => {\n    ReactEditor.blur(action.editor)\n  },\n  'decorator.add': addDecoratorActionImplementation,\n  'decorator.remove': removeDecoratorActionImplementation,\n  'decorator.toggle': toggleDecoratorActionImplementation,\n  'focus': ({action}) => {\n    ReactEditor.focus(action.editor)\n  },\n  'delete.backward': ({action}) => {\n    deleteBackward(action.editor, action.unit)\n  },\n  'delete.forward': ({action}) => {\n    deleteForward(action.editor, action.unit)\n  },\n  'delete.block': ({action}) => {\n    const range = toSlateRange(\n      {\n        anchor: {path: action.blockPath, offset: 0},\n        focus: {path: action.blockPath, offset: 0},\n      },\n      action.editor,\n    )\n\n    if (!range) {\n      console.error('Unable to find Slate range from selection points')\n      return\n    }\n\n    Transforms.removeNodes(action.editor, {\n      at: range,\n    })\n  },\n  'delete.text': ({context, action}) => {\n    const value = fromSlateValue(\n      action.editor.children,\n      context.schema.block.name,\n      KEY_TO_VALUE_ELEMENT.get(action.editor),\n    )\n\n    const anchor = blockOffsetToSpanSelectionPoint({\n      value,\n      blockOffset: action.anchor,\n    })\n    const focus = blockOffsetToSpanSelectionPoint({\n      value,\n      blockOffset: action.focus,\n    })\n\n    if (!anchor || !focus) {\n      console.error('Unable to find anchor or focus selection point')\n      return\n    }\n\n    const range = toSlateRange(\n      {\n        anchor,\n        focus,\n      },\n      action.editor,\n    )\n\n    if (!range) {\n      console.error('Unable to find Slate range from selection points')\n      return\n    }\n\n    Transforms.delete(action.editor, {\n      at: range,\n    })\n  },\n  'insert.block object': insertBlockObjectActionImplementation,\n  'insert.break': insertBreakActionImplementation,\n  'insert.inline object': insertInlineObjectActionImplementation,\n  'insert.soft break': insertSoftBreakActionImplementation,\n  'insert.span': insertSpanActionImplementation,\n  'insert.text': ({action}) => {\n    insertText(action.editor, action.text)\n  },\n  'insert.text block': ({context, action}) => {\n    const block = toSlateValue(\n      [\n        {\n          _key: context.keyGenerator(),\n          _type: context.schema.block.name,\n          style: context.schema.styles[0].value ?? 'normal',\n          markDefs: [],\n          children: action.textBlock?.children?.map((child) => ({\n            ...child,\n            _key: context.keyGenerator(),\n          })) ?? [\n            {\n              _type: context.schema.span.name,\n              _key: context.keyGenerator(),\n              text: '',\n            },\n          ],\n        },\n      ],\n      {schemaTypes: context.schema},\n    )[0]\n\n    insertBlock({\n      block,\n      editor: action.editor,\n      schema: context.schema,\n      placement: action.placement,\n    })\n  },\n  'effect': ({action}) => {\n    action.effect()\n  },\n  'list item.add': addListItemActionImplementation,\n  'list item.remove': removeListItemActionImplementation,\n  'list item.toggle': toggleListItemActionImplementation,\n  'move.block': ({action}) => {\n    const at = [toSlatePath(action.at, action.editor)[0]]\n    const to = [toSlatePath(action.to, action.editor)[0]]\n\n    Transforms.moveNodes(action.editor, {\n      at,\n      to,\n      mode: 'highest',\n    })\n  },\n  'move.block down': ({action}) => {\n    const at = [toSlatePath(action.at, action.editor)[0]]\n    const to = [Path.next(at)[0]]\n\n    Transforms.moveNodes(action.editor, {\n      at,\n      to,\n      mode: 'highest',\n    })\n  },\n  'move.block up': ({action}) => {\n    const at = [toSlatePath(action.at, action.editor)[0]]\n\n    if (!Path.hasPrevious(at)) {\n      return\n    }\n\n    const to = [Path.previous(at)[0]]\n\n    Transforms.moveNodes(action.editor, {\n      at,\n      to,\n      mode: 'highest',\n    })\n  },\n  'noop': () => {},\n  'select': ({action}) => {\n    const newSelection = toSlateRange(action.selection, action.editor)\n\n    if (newSelection) {\n      Transforms.select(action.editor, newSelection)\n    } else {\n      Transforms.deselect(action.editor)\n    }\n  },\n  'select.previous block': ({action}) => {\n    if (!action.editor.selection) {\n      console.error('Unable to select previous block without a selection')\n      return\n    }\n\n    const blockPath = action.editor.selection.focus.path.slice(0, 1)\n\n    if (!Path.hasPrevious(blockPath)) {\n      console.error(\"There's no previous block to select\")\n      return\n    }\n\n    const previousBlockPath = Path.previous(blockPath)\n\n    Transforms.select(action.editor, previousBlockPath)\n  },\n  'select.next block': ({action}) => {\n    if (!action.editor.selection) {\n      console.error('Unable to select next block without a selection')\n      return\n    }\n\n    const blockPath = action.editor.selection.focus.path.slice(0, 1)\n    const nextBlockPath = [blockPath[0] + 1]\n\n    Transforms.select(action.editor, nextBlockPath)\n  },\n  'reselect': ({action}) => {\n    const selection = action.editor.selection\n\n    if (selection) {\n      Transforms.select(action.editor, {...selection})\n      action.editor.selection = {...selection}\n    }\n  },\n  'style.toggle': toggleStyleActionImplementation,\n  'style.add': addStyleActionImplementation,\n  'style.remove': removeStyleActionImplementation,\n  'text block.set': textBlockSetActionImplementation,\n  'text block.unset': textBlockUnsetActionImplementation,\n}\n\nexport function performAction({\n  context,\n  action,\n}: {\n  context: BehaviorActionImplementationContext\n  action: BehaviorAction\n}) {\n  switch (action.type) {\n    case 'delete.block': {\n      behaviorActionImplementations['delete.block']({\n        context,\n        action,\n      })\n      break\n    }\n    case 'delete.text': {\n      behaviorActionImplementations['delete.text']({\n        context,\n        action,\n      })\n      break\n    }\n    case 'insert.span': {\n      behaviorActionImplementations['insert.span']({\n        context,\n        action,\n      })\n      break\n    }\n    case 'insert.text block': {\n      behaviorActionImplementations['insert.text block']({\n        context,\n        action,\n      })\n      break\n    }\n    case 'list item.add': {\n      behaviorActionImplementations['list item.add']({\n        context,\n        action,\n      })\n      break\n    }\n    case 'list item.remove': {\n      behaviorActionImplementations['list item.remove']({\n        context,\n        action,\n      })\n      break\n    }\n    case 'move.block': {\n      behaviorActionImplementations['move.block']({\n        context,\n        action,\n      })\n      break\n    }\n    case 'move.block down': {\n      behaviorActionImplementations['move.block down']({\n        context,\n        action,\n      })\n      break\n    }\n    case 'move.block up': {\n      behaviorActionImplementations['move.block up']({\n        context,\n        action,\n      })\n      break\n    }\n    case 'noop': {\n      behaviorActionImplementations.noop({\n        context,\n        action,\n      })\n      break\n    }\n    case 'effect': {\n      behaviorActionImplementations.effect({\n        context,\n        action,\n      })\n      break\n    }\n    case 'select': {\n      behaviorActionImplementations.select({\n        context,\n        action,\n      })\n      break\n    }\n    case 'select.previous block': {\n      behaviorActionImplementations['select.previous block']({\n        context,\n        action,\n      })\n      break\n    }\n    case 'select.next block': {\n      behaviorActionImplementations['select.next block']({\n        context,\n        action,\n      })\n      break\n    }\n    case 'reselect': {\n      behaviorActionImplementations.reselect({\n        context,\n        action,\n      })\n      break\n    }\n    case 'style.add': {\n      behaviorActionImplementations['style.add']({\n        context,\n        action,\n      })\n      break\n    }\n    case 'style.remove': {\n      behaviorActionImplementations['style.remove']({\n        context,\n        action,\n      })\n      break\n    }\n    case 'text block.set': {\n      behaviorActionImplementations['text block.set']({\n        context,\n        action,\n      })\n      break\n    }\n    case 'text block.unset': {\n      behaviorActionImplementations['text block.unset']({\n        context,\n        action,\n      })\n      break\n    }\n    default: {\n      performDefaultAction({context, action})\n    }\n  }\n}\n\nfunction performDefaultAction({\n  context,\n  action,\n}: {\n  context: BehaviorActionImplementationContext\n  action: PickFromUnion<BehaviorAction, 'type', SyntheticBehaviorEvent['type']>\n}) {\n  switch (action.type) {\n    case 'annotation.add': {\n      behaviorActionImplementations['annotation.add']({\n        context,\n        action,\n      })\n      break\n    }\n    case 'annotation.remove': {\n      behaviorActionImplementations['annotation.remove']({\n        context,\n        action,\n      })\n      break\n    }\n    case 'annotation.toggle': {\n      behaviorActionImplementations['annotation.toggle']({\n        context,\n        action,\n      })\n      break\n    }\n    case 'blur': {\n      behaviorActionImplementations.blur({\n        context,\n        action,\n      })\n      break\n    }\n    case 'decorator.add': {\n      behaviorActionImplementations['decorator.add']({\n        context,\n        action,\n      })\n      break\n    }\n    case 'decorator.remove': {\n      behaviorActionImplementations['decorator.remove']({\n        context,\n        action,\n      })\n      break\n    }\n    case 'decorator.toggle': {\n      behaviorActionImplementations['decorator.toggle']({\n        context,\n        action,\n      })\n      break\n    }\n    case 'delete.backward': {\n      behaviorActionImplementations['delete.backward']({\n        context,\n        action,\n      })\n      break\n    }\n    case 'delete.forward': {\n      behaviorActionImplementations['delete.forward']({\n        context,\n        action,\n      })\n      break\n    }\n    case 'focus': {\n      behaviorActionImplementations.focus({\n        context,\n        action,\n      })\n      break\n    }\n    case 'insert.block object': {\n      behaviorActionImplementations['insert.block object']({\n        context,\n        action,\n      })\n      break\n    }\n    case 'insert.inline object': {\n      behaviorActionImplementations['insert.inline object']({\n        context,\n        action,\n      })\n      break\n    }\n    case 'insert.break': {\n      behaviorActionImplementations['insert.break']({\n        context,\n        action,\n      })\n      break\n    }\n    case 'insert.soft break': {\n      behaviorActionImplementations['insert.soft break']({\n        context,\n        action,\n      })\n      break\n    }\n    case 'insert.text': {\n      behaviorActionImplementations['insert.text']({\n        context,\n        action,\n      })\n      break\n    }\n    case 'list item.toggle': {\n      behaviorActionImplementations['list item.toggle']({\n        context,\n        action,\n      })\n      break\n    }\n    default: {\n      behaviorActionImplementations['style.toggle']({\n        context,\n        action,\n      })\n    }\n  }\n}\n","import {Editor} from 'slate'\nimport type {PortableTextSlateEditor} from '../types/editor'\nimport type {EditorSchema} from './define-schema'\n\nexport function getActiveDecorators({\n  schema,\n  slateEditorInstance,\n}: {\n  schema: EditorSchema\n  slateEditorInstance: PortableTextSlateEditor\n}) {\n  const decorators = schema.decorators.map((decorator) => decorator.value)\n\n  const marks =\n    {\n      ...(Editor.marks(slateEditorInstance) ?? {}),\n    }.marks ?? []\n\n  return marks.filter((mark) => decorators.includes(mark))\n}\n","import type {Patch} from '@portabletext/patches'\nimport type {PortableTextBlock} from '@sanity/types'\nimport type {FocusEvent} from 'react'\nimport {Editor} from 'slate'\nimport {\n  assertEvent,\n  assign,\n  emit,\n  enqueueActions,\n  setup,\n  type ActorRefFrom,\n} from 'xstate'\nimport {performAction} from '../behavior-actions/behavior.actions'\nimport {coreBehaviors} from '../behaviors/behavior.core'\nimport type {\n  Behavior,\n  BehaviorAction,\n  NativeBehaviorEvent,\n  SyntheticBehaviorEvent,\n} from '../behaviors/behavior.types'\nimport type {OmitFromUnion, PickFromUnion} from '../type-utils'\nimport type {\n  EditorSelection,\n  InvalidValueResolution,\n  PortableTextSlateEditor,\n} from '../types/editor'\nimport {toPortableTextRange} from '../utils/ranges'\nimport {fromSlateValue} from '../utils/values'\nimport {KEY_TO_VALUE_ELEMENT} from '../utils/weakMaps'\nimport type {EditorSchema} from './define-schema'\nimport type {EditorContext} from './editor-snapshot'\nimport {getActiveDecorators} from './get-active-decorators'\n\nexport * from 'xstate/guards'\n\n/**\n * @internal\n */\nexport type EditorActor = ActorRefFrom<typeof editorMachine>\n\n/**\n * @internal\n */\nexport type PatchEvent = {type: 'patch'; patch: Patch}\n\n/**\n * @internal\n */\nexport type PatchesEvent = {\n  type: 'patches'\n  patches: Array<Patch>\n  snapshot: Array<PortableTextBlock> | undefined\n}\n\n/**\n * @internal\n */\nexport type MutationEvent = {\n  type: 'mutation'\n  patches: Array<Patch>\n  /**\n   * @deprecated Use `value` instead\n   */\n  snapshot: Array<PortableTextBlock> | undefined\n  value: Array<PortableTextBlock> | undefined\n}\n\n/**\n * @internal\n */\nexport type InternalEditorEvent =\n  | {type: 'normalizing'}\n  | {type: 'done normalizing'}\n  | {type: 'done syncing initial value'}\n  | {\n      type: 'behavior event'\n      behaviorEvent: SyntheticBehaviorEvent | NativeBehaviorEvent\n      editor: PortableTextSlateEditor\n      nativeEvent?: {preventDefault: () => void}\n    }\n  | {\n      type: 'update readOnly'\n      readOnly: boolean\n    }\n  | {\n      type: 'update schema'\n      schema: EditorSchema\n    }\n  | {\n      type: 'update behaviors'\n      behaviors: Array<Behavior>\n    }\n  | {\n      type: 'update value'\n      value: Array<PortableTextBlock> | undefined\n    }\n  | {\n      type: 'update maxBlocks'\n      maxBlocks: number | undefined\n    }\n  | OmitFromUnion<\n      InternalEditorEmittedEvent,\n      'type',\n      'ready' | 'read only' | 'editable'\n    >\n\n/**\n * @public\n */\nexport type EditorEmittedEvent = PickFromUnion<\n  InternalEditorEmittedEvent,\n  'type',\n  | 'blurred'\n  | 'done loading'\n  | 'editable'\n  | 'error'\n  | 'focused'\n  | 'invalid value'\n  | 'loading'\n  | 'mutation'\n  | 'patch'\n  | 'read only'\n  | 'ready'\n  | 'selection'\n  | 'value changed'\n>\n\n/**\n * @internal\n */\nexport type InternalEditorEmittedEvent =\n  | {type: 'ready'}\n  | PatchEvent\n  | PatchesEvent\n  | MutationEvent\n  | {\n      type: 'unset'\n      previousValue: Array<PortableTextBlock>\n    }\n  | {\n      type: 'value changed'\n      value: Array<PortableTextBlock> | undefined\n    }\n  | {\n      type: 'invalid value'\n      resolution: InvalidValueResolution | null\n      value: Array<PortableTextBlock> | undefined\n    }\n  | {\n      type: 'error'\n      name: string\n      description: string\n      data: unknown\n    }\n  | {type: 'selection'; selection: EditorSelection}\n  | {type: 'blurred'; event: FocusEvent<HTMLDivElement, Element>}\n  | {type: 'focused'; event: FocusEvent<HTMLDivElement, Element>}\n  | {type: 'loading'}\n  | {type: 'done loading'}\n  | {type: 'read only'}\n  | {type: 'editable'}\n  | PickFromUnion<\n      SyntheticBehaviorEvent,\n      'type',\n      | 'annotation.add'\n      | 'annotation.remove'\n      | 'annotation.toggle'\n      | 'blur'\n      | 'decorator.add'\n      | 'decorator.remove'\n      | 'decorator.toggle'\n      | 'insert.block object'\n      | 'insert.inline object'\n      | 'list item.toggle'\n      | 'focus'\n      | 'style.toggle'\n    >\n\n/**\n * @internal\n */\nexport const editorMachine = setup({\n  types: {\n    context: {} as {\n      behaviors: Array<Behavior>\n      keyGenerator: () => string\n      pendingEvents: Array<PatchEvent | MutationEvent>\n      schema: EditorSchema\n      initialReadOnly: boolean\n      maxBlocks: number | undefined\n      selection: EditorSelection\n      value: Array<PortableTextBlock> | undefined\n    },\n    events: {} as InternalEditorEvent,\n    emitted: {} as InternalEditorEmittedEvent,\n    input: {} as {\n      behaviors?: Array<Behavior>\n      keyGenerator: () => string\n      maxBlocks?: number\n      readOnly?: boolean\n      schema: EditorSchema\n      value?: Array<PortableTextBlock>\n    },\n  },\n  actions: {\n    'assign behaviors': assign({\n      behaviors: ({event}) => {\n        assertEvent(event, 'update behaviors')\n        return event.behaviors\n      },\n    }),\n    'assign schema': assign({\n      schema: ({event}) => {\n        assertEvent(event, 'update schema')\n        return event.schema\n      },\n    }),\n    'emit patch event': emit(({event}) => {\n      assertEvent(event, 'patch')\n      return event\n    }),\n    'emit mutation event': emit(({event}) => {\n      assertEvent(event, 'mutation')\n      return event\n    }),\n    'emit read only': emit({type: 'read only'}),\n    'emit editable': emit({type: 'editable'}),\n    'defer event': assign({\n      pendingEvents: ({context, event}) => {\n        assertEvent(event, ['patch', 'mutation'])\n        return [...context.pendingEvents, event]\n      },\n    }),\n    'emit pending events': enqueueActions(({context, enqueue}) => {\n      for (const event of context.pendingEvents) {\n        enqueue(emit(event))\n      }\n    }),\n    'emit ready': emit({type: 'ready'}),\n    'clear pending events': assign({\n      pendingEvents: [],\n    }),\n    'handle behavior event': enqueueActions(({context, event, enqueue}) => {\n      assertEvent(event, ['behavior event'])\n\n      const defaultAction =\n        event.behaviorEvent.type === 'copy' ||\n        event.behaviorEvent.type === 'key.down' ||\n        event.behaviorEvent.type === 'key.up' ||\n        event.behaviorEvent.type === 'paste'\n          ? undefined\n          : ({\n              ...event.behaviorEvent,\n              editor: event.editor,\n            } satisfies BehaviorAction)\n\n      const eventBehaviors = context.behaviors.filter(\n        (behavior) => behavior.on === event.behaviorEvent.type,\n      )\n\n      if (eventBehaviors.length === 0) {\n        if (!defaultAction) {\n          return\n        }\n\n        Editor.withoutNormalizing(event.editor, () => {\n          performAction({\n            context,\n            action: defaultAction,\n          })\n        })\n        event.editor.onChange()\n        return\n      }\n\n      const value = fromSlateValue(\n        event.editor.children,\n        context.schema.block.name,\n        KEY_TO_VALUE_ELEMENT.get(event.editor),\n      )\n      const selection = toPortableTextRange(\n        value,\n        event.editor.selection,\n        context.schema,\n      )\n\n      const editorContext = {\n        activeDecorators: getActiveDecorators({\n          schema: context.schema,\n          slateEditorInstance: event.editor,\n        }),\n        keyGenerator: context.keyGenerator,\n        schema: context.schema,\n        selection,\n        value,\n      } satisfies EditorContext\n\n      let behaviorOverwritten = false\n\n      for (const eventBehavior of eventBehaviors) {\n        const shouldRun =\n          eventBehavior.guard === undefined ||\n          eventBehavior.guard({\n            context: editorContext,\n            event: event.behaviorEvent,\n          })\n\n        if (!shouldRun) {\n          continue\n        }\n\n        const actionIntendSets = eventBehavior.actions.map((actionSet) =>\n          actionSet(\n            {context: editorContext, event: event.behaviorEvent},\n            shouldRun,\n          ),\n        )\n\n        for (const actionIntends of actionIntendSets) {\n          behaviorOverwritten =\n            behaviorOverwritten ||\n            (actionIntends.length > 0 &&\n              actionIntends.some(\n                (actionIntend) => actionIntend.type !== 'effect',\n              ))\n\n          Editor.withoutNormalizing(event.editor, () => {\n            for (const actionIntend of actionIntends) {\n              const action = {\n                ...actionIntend,\n                editor: event.editor,\n              }\n\n              performAction({context, action})\n            }\n          })\n          event.editor.onChange()\n\n          if (\n            actionIntends.some(\n              (actionIntend) => actionIntend.type === 'reselect',\n            )\n          ) {\n            enqueue.raise({\n              type: 'selection',\n              selection: toPortableTextRange(\n                event.editor.children,\n                event.editor.selection,\n                context.schema,\n              ),\n            })\n          }\n        }\n\n        if (behaviorOverwritten) {\n          event.nativeEvent?.preventDefault()\n          break\n        }\n      }\n\n      if (!behaviorOverwritten) {\n        if (!defaultAction) {\n          return\n        }\n\n        Editor.withoutNormalizing(event.editor, () => {\n          performAction({\n            context,\n            action: defaultAction,\n          })\n        })\n        event.editor.onChange()\n      }\n    }),\n  },\n}).createMachine({\n  id: 'editor',\n  context: ({input}) => ({\n    behaviors: input.behaviors ?? coreBehaviors,\n    keyGenerator: input.keyGenerator,\n    pendingEvents: [],\n    schema: input.schema,\n    selection: null,\n    initialReadOnly: input.readOnly ?? false,\n    maxBlocks: input.maxBlocks,\n    value: input.value,\n  }),\n  on: {\n    'unset': {actions: emit(({event}) => event)},\n    'value changed': {actions: emit(({event}) => event)},\n    'invalid value': {actions: emit(({event}) => event)},\n    'error': {actions: emit(({event}) => event)},\n    'selection': {\n      actions: [\n        assign({selection: ({event}) => event.selection}),\n        emit(({event}) => event),\n      ],\n    },\n    'blurred': {actions: emit(({event}) => event)},\n    'focused': {actions: emit(({event}) => event)},\n    'loading': {actions: emit({type: 'loading'})},\n    'patches': {actions: emit(({event}) => event)},\n    'done loading': {actions: emit({type: 'done loading'})},\n    'update behaviors': {actions: 'assign behaviors'},\n    'update schema': {actions: 'assign schema'},\n    'update value': {actions: assign({value: ({event}) => event.value})},\n    'update maxBlocks': {\n      actions: assign({maxBlocks: ({event}) => event.maxBlocks}),\n    },\n  },\n  type: 'parallel',\n  states: {\n    'edit mode': {\n      initial: 'read only',\n      states: {\n        'read only': {\n          initial: 'determine initial edit mode',\n          states: {\n            'determine initial edit mode': {\n              on: {\n                'done syncing initial value': [\n                  {\n                    target: '#editor.edit mode.read only.read only',\n                    guard: ({context}) => context.initialReadOnly,\n                  },\n                  {\n                    target: '#editor.edit mode.editable',\n                  },\n                ],\n              },\n            },\n            'read only': {\n              on: {\n                'update readOnly': {\n                  guard: ({event}) => !event.readOnly,\n                  target: '#editor.edit mode.editable',\n                  actions: ['emit editable'],\n                },\n              },\n            },\n          },\n        },\n        'editable': {\n          on: {\n            'update readOnly': {\n              guard: ({event}) => event.readOnly,\n              target: '#editor.edit mode.read only.read only',\n              actions: ['emit read only'],\n            },\n            'behavior event': {\n              actions: 'handle behavior event',\n            },\n            'annotation.add': {\n              actions: emit(({event}) => event),\n            },\n            'annotation.remove': {\n              actions: emit(({event}) => event),\n            },\n            'annotation.toggle': {\n              actions: emit(({event}) => event),\n            },\n            'blur': {\n              actions: emit(({event}) => event),\n            },\n            'decorator.*': {\n              actions: emit(({event}) => event),\n            },\n            'focus': {\n              actions: emit(({event}) => event),\n            },\n            'insert.*': {\n              actions: emit(({event}) => event),\n            },\n            'list item.*': {\n              actions: emit(({event}) => event),\n            },\n            'style.*': {\n              actions: emit(({event}) => event),\n            },\n          },\n        },\n      },\n    },\n    'setup': {\n      initial: 'setting up',\n      states: {\n        'setting up': {\n          exit: ['emit ready'],\n          on: {\n            'patch': {\n              actions: 'defer event',\n            },\n            'mutation': {\n              actions: 'defer event',\n            },\n            'done syncing initial value': {\n              target: 'pristine',\n            },\n          },\n        },\n        'pristine': {\n          initial: 'idle',\n          states: {\n            idle: {\n              on: {\n                normalizing: {\n                  target: 'normalizing',\n                },\n                patch: {\n                  actions: 'defer event',\n                  target: '#editor.setup.dirty',\n                },\n                mutation: {\n                  actions: 'defer event',\n                  target: '#editor.setup.dirty',\n                },\n              },\n            },\n            normalizing: {\n              on: {\n                'done normalizing': {\n                  target: 'idle',\n                },\n                'patch': {\n                  actions: 'defer event',\n                },\n                'mutation': {\n                  actions: 'defer event',\n                },\n              },\n            },\n          },\n        },\n        'dirty': {\n          entry: ['emit pending events', 'clear pending events'],\n          on: {\n            patch: {\n              actions: 'emit patch event',\n            },\n            mutation: {\n              actions: 'emit mutation event',\n            },\n          },\n        },\n      },\n    },\n  },\n})\n","import type {PortableTextSlateEditor} from '../types/editor'\nimport {fromSlateValue} from '../utils/values'\nimport {KEY_TO_VALUE_ELEMENT} from '../utils/weakMaps'\nimport type {EditorActor} from './editor-machine'\n\nexport function getValue({\n  editorActorSnapshot,\n  slateEditorInstance,\n}: {\n  editorActorSnapshot: ReturnType<EditorActor['getSnapshot']>\n  slateEditorInstance: PortableTextSlateEditor\n}) {\n  return fromSlateValue(\n    slateEditorInstance.children,\n    editorActorSnapshot.context.schema.block.name,\n    KEY_TO_VALUE_ELEMENT.get(slateEditorInstance),\n  )\n}\n","import {useSelector} from '@xstate/react'\nimport type {PortableTextSlateEditor} from '../types/editor'\nimport type {Editor} from './create-editor'\nimport type {EditorActor} from './editor-machine'\nimport type {EditorSnapshot} from './editor-snapshot'\nimport {getActiveDecorators} from './get-active-decorators'\nimport {getValue} from './get-value'\n\nfunction defaultCompare<T>(a: T, b: T) {\n  return a === b\n}\n\n/**\n * @public\n */\nexport type EditorSelector<TSelected> = (snapshot: EditorSnapshot) => TSelected\n\n/**\n * @public\n */\nexport function useEditorSelector<TSelected>(\n  editor: Editor,\n  selector: EditorSelector<TSelected>,\n  compare: (a: TSelected, b: TSelected) => boolean = defaultCompare,\n) {\n  return useSelector(\n    editor._internal.editorActor,\n    (editorActorSnapshot) => {\n      const snapshot = getEditorSnapshot({\n        editorActorSnapshot,\n        slateEditorInstance: editor._internal.slateEditor.instance,\n      })\n\n      return selector(snapshot)\n    },\n    compare,\n  )\n}\n\nexport function getEditorSnapshot({\n  editorActorSnapshot,\n  slateEditorInstance,\n}: {\n  editorActorSnapshot: ReturnType<EditorActor['getSnapshot']>\n  slateEditorInstance: PortableTextSlateEditor\n}): EditorSnapshot {\n  return {\n    context: {\n      activeDecorators: getActiveDecorators({\n        schema: editorActorSnapshot.context.schema,\n        slateEditorInstance,\n      }),\n      keyGenerator: editorActorSnapshot.context.keyGenerator,\n      schema: editorActorSnapshot.context.schema,\n      selection: editorActorSnapshot.context.selection,\n      value: getValue({editorActorSnapshot, slateEditorInstance}),\n    },\n  }\n}\n","import getRandomValues from 'get-random-values-esm'\n\n/**\n * @public\n */\nexport const defaultKeyGenerator = (): string => randomKey(12)\n\nconst getByteHexTable = (() => {\n  let table: any[]\n  return () => {\n    if (table) {\n      return table\n    }\n\n    table = []\n    for (let i = 0; i < 256; ++i) {\n      table[i] = (i + 0x100).toString(16).slice(1)\n    }\n    return table\n  }\n})()\n\n// WHATWG crypto RNG - https://w3c.github.io/webcrypto/Overview.html\nfunction whatwgRNG(length = 16) {\n  const rnds8 = new Uint8Array(length)\n  getRandomValues(rnds8)\n  return rnds8\n}\n\nfunction randomKey(length?: number): string {\n  const table = getByteHexTable()\n  return whatwgRNG(length)\n    .reduce((str, n) => str + table[n], '')\n    .slice(0, length)\n}\n","import type {\n  ArrayDefinition,\n  ArraySchemaType,\n  PortableTextBlock,\n} from '@sanity/types'\nimport {useActorRef} from '@xstate/react'\nimport {useMemo} from 'react'\nimport {\n  createActor,\n  type ActorRef,\n  type EventObject,\n  type Snapshot,\n} from 'xstate'\nimport type {Behavior} from '../behaviors/behavior.types'\nimport type {PickFromUnion} from '../type-utils'\nimport type {EditableAPI} from '../types/editor'\nimport {compileType} from '../utils/schema'\nimport {createEditorSchema} from './create-editor-schema'\nimport {createSlateEditor, type SlateEditor} from './create-slate-editor'\nimport {compileSchemaDefinition, type SchemaDefinition} from './define-schema'\nimport {\n  editorMachine,\n  type EditorActor,\n  type EditorEmittedEvent,\n  type InternalEditorEvent,\n} from './editor-machine'\nimport {getEditorSnapshot} from './editor-selector'\nimport type {EditorSnapshot} from './editor-snapshot'\nimport {defaultKeyGenerator} from './key-generator'\nimport {createEditableAPI} from './plugins/createWithEditableAPI'\n\n/**\n * @public\n */\nexport type EditorConfig = {\n  /**\n   * @beta\n   */\n  behaviors?: Array<Behavior>\n  keyGenerator?: () => string\n  /**\n   * @deprecated Will be removed in the next major version\n   */\n  maxBlocks?: number\n  readOnly?: boolean\n  initialValue?: Array<PortableTextBlock>\n} & (\n  | {\n      schemaDefinition: SchemaDefinition\n      schema?: undefined\n    }\n  | {\n      schemaDefinition?: undefined\n      schema: ArraySchemaType<PortableTextBlock> | ArrayDefinition\n    }\n)\n\n/**\n * @public\n */\nexport type EditorEvent = PickFromUnion<\n  InternalEditorEvent,\n  'type',\n  | 'annotation.add'\n  | 'annotation.remove'\n  | 'annotation.toggle'\n  | 'blur'\n  | 'decorator.add'\n  | 'decorator.remove'\n  | 'decorator.toggle'\n  | 'focus'\n  | 'insert.block object'\n  | 'insert.inline object'\n  | 'list item.toggle'\n  | 'style.toggle'\n  | 'patches'\n  | 'update behaviors'\n  | 'update readOnly'\n  | 'update value'\n>\n\n/**\n * @public\n */\nexport type Editor = {\n  getSnapshot: () => EditorSnapshot\n  send: (event: EditorEvent) => void\n  on: ActorRef<Snapshot<unknown>, EventObject, EditorEmittedEvent>['on']\n  _internal: {\n    editable: EditableAPI\n    editorActor: EditorActor\n    slateEditor: SlateEditor\n  }\n}\n\nexport function createEditor(config: EditorConfig): Editor {\n  const editorActor = createActor(editorMachine, {\n    input: editorConfigToMachineInput(config),\n  })\n  editorActor.start()\n\n  return createEditorFromActor(editorActor)\n}\n\nexport function useCreateEditor(config: EditorConfig): Editor {\n  const editorActor = useActorRef(editorMachine, {\n    input: editorConfigToMachineInput(config),\n  })\n\n  return useMemo(() => createEditorFromActor(editorActor), [editorActor])\n}\n\nfunction editorConfigToMachineInput(config: EditorConfig) {\n  return {\n    behaviors: config.behaviors,\n    keyGenerator: config.keyGenerator ?? defaultKeyGenerator,\n    maxBlocks: config.maxBlocks,\n    readOnly: config.readOnly,\n    schema: config.schemaDefinition\n      ? compileSchemaDefinition(config.schemaDefinition)\n      : createEditorSchema(\n          config.schema.hasOwnProperty('jsonType')\n            ? config.schema\n            : compileType(config.schema),\n        ),\n    value: config.initialValue,\n  } as const\n}\n\nfunction createEditorFromActor(editorActor: EditorActor): Editor {\n  const slateEditor = createSlateEditor({editorActor})\n  const editable = createEditableAPI(slateEditor.instance, editorActor)\n\n  return {\n    getSnapshot: () =>\n      getEditorSnapshot({\n        editorActorSnapshot: editorActor.getSnapshot(),\n        slateEditorInstance: slateEditor.instance,\n      }),\n    send: (event) => {\n      editorActor.send(event)\n    },\n    on: (event, listener) =>\n      editorActor.on(\n        event,\n        // @ts-expect-error\n        listener,\n      ),\n    _internal: {\n      editable,\n      editorActor,\n      slateEditor,\n    },\n  }\n}\n","import {createContext} from 'react'\nimport type {EditorActor} from './editor-machine'\n\nexport const EditorActorContext = createContext<EditorActor>({} as EditorActor)\n","import {\n  createContext,\n  startTransition,\n  useContext,\n  useEffect,\n  useState,\n} from 'react'\nimport type {EditorSelection} from '../../types/editor'\nimport {debugWithName} from '../../utils/debug'\nimport type {EditorActor} from '../editor-machine'\n\n/**\n * A React context for sharing the editor selection.\n */\nconst PortableTextEditorSelectionContext =\n  createContext<EditorSelection | null>(null)\n\n/**\n * @deprecated Use `useEditorSelector` to get the current editor selection.\n * @public\n * Get the current editor selection from the React context.\n */\nexport const usePortableTextEditorSelection = (): EditorSelection => {\n  const selection = useContext(PortableTextEditorSelectionContext)\n\n  if (selection === undefined) {\n    throw new Error(\n      `The \\`usePortableTextEditorSelection\\` hook must be used inside the <PortableTextEditor> component's context.`,\n    )\n  }\n  return selection\n}\nconst debug = debugWithName('component:PortableTextEditor:SelectionProvider')\nconst debugVerbose = debug.enabled && false\n\n/**\n * @internal\n */\nexport function PortableTextEditorSelectionProvider(\n  props: React.PropsWithChildren<{\n    editorActor: EditorActor\n  }>,\n) {\n  const [selection, setSelection] = useState<EditorSelection>(null)\n\n  // Subscribe to, and handle changes from the editor\n  useEffect(() => {\n    debug('Subscribing to selection changes')\n    const subscription = props.editorActor.on('selection', (event) => {\n      // Set the selection state in a transition, we don't need the state immediately.\n      startTransition(() => {\n        if (debugVerbose) debug('Setting selection')\n        setSelection(event.selection)\n      })\n    })\n\n    return () => {\n      debug('Unsubscribing to selection changes')\n      subscription.unsubscribe()\n    }\n  }, [props.editorActor])\n\n  return (\n    <PortableTextEditorSelectionContext.Provider value={selection}>\n      {props.children}\n    </PortableTextEditorSelectionContext.Provider>\n  )\n}\n","import type {\n  ArrayDefinition,\n  ArraySchemaType,\n  Path,\n  PortableTextBlock,\n  PortableTextChild,\n  PortableTextObject,\n} from '@sanity/types'\nimport {\n  Component,\n  useEffect,\n  type MutableRefObject,\n  type PropsWithChildren,\n} from 'react'\nimport {Subject} from 'rxjs'\nimport {Slate} from 'slate-react'\nimport {useEffectEvent} from 'use-effect-event'\nimport type {\n  EditableAPI,\n  EditableAPIDeleteOptions,\n  EditorChange,\n  EditorChanges,\n  EditorSelection,\n  PatchObservable,\n  PortableTextMemberSchemaTypes,\n} from '../types/editor'\nimport {debugWithName} from '../utils/debug'\nimport {compileType} from '../utils/schema'\nimport {Synchronizer} from './components/Synchronizer'\nimport {createEditor, type Editor} from './create-editor'\nimport {createEditorSchema} from './create-editor-schema'\nimport {EditorActorContext} from './editor-actor-context'\nimport type {EditorActor} from './editor-machine'\nimport {PortableTextEditorContext} from './hooks/usePortableTextEditor'\nimport {PortableTextEditorSelectionProvider} from './hooks/usePortableTextEditorSelection'\nimport {defaultKeyGenerator} from './key-generator'\nimport type {AddedAnnotationPaths} from './plugins/createWithEditableAPI'\n\nconst debug = debugWithName('component:PortableTextEditor')\n\n/**\n * Props for the PortableTextEditor component\n *\n * @public\n * @deprecated Use `EditorProvider` instead\n */\nexport type PortableTextEditorProps<\n  TEditor extends Editor | undefined = undefined,\n> = PropsWithChildren<\n  TEditor extends Editor\n    ? {\n        /**\n         * @alpha\n         */\n        editor: TEditor\n      }\n    : {\n        editor?: undefined\n\n        /**\n         * Function that gets called when the editor changes the value\n         */\n        onChange: (change: EditorChange) => void\n\n        /**\n         * Schema type for the portable text field\n         */\n        schemaType: ArraySchemaType<PortableTextBlock> | ArrayDefinition\n\n        /**\n         * Maximum number of blocks to allow within the editor\n         */\n        maxBlocks?: number | string\n\n        /**\n         * Function used to generate keys for array items (`_key`)\n         */\n        keyGenerator?: () => string\n\n        /**\n         * Observable of local and remote patches for the edited value.\n         */\n        patches$?: PatchObservable\n\n        /**\n         * Backward compatibility (renamed to patches$).\n         */\n        incomingPatches$?: PatchObservable\n\n        /**\n         * Whether or not the editor should be in read-only mode\n         */\n        readOnly?: boolean\n\n        /**\n         * The current value of the portable text field\n         */\n        value?: PortableTextBlock[]\n\n        /**\n         * A ref to the editor instance\n         */\n        editorRef?: MutableRefObject<PortableTextEditor | null>\n      }\n>\n\n/**\n * The main Portable Text Editor component.\n * @public\n * @deprecated Use `EditorProvider` instead\n */\nexport class PortableTextEditor extends Component<\n  PortableTextEditorProps<Editor | undefined>\n> {\n  public static displayName = 'PortableTextEditor'\n  /**\n   * An observable of all the editor changes.\n   */\n  public change$: EditorChanges = new Subject()\n  /**\n   * A lookup table for all the relevant schema types for this portable text type.\n   */\n  public schemaTypes: PortableTextMemberSchemaTypes\n  /**\n   * The editor instance\n   */\n  private editor: Editor\n  /*\n   * The editor API (currently implemented with Slate).\n   */\n  private editable: EditableAPI\n\n  constructor(props: PortableTextEditorProps) {\n    super(props)\n\n    if (props.editor) {\n      this.editor = props.editor as Editor\n    } else {\n      this.editor = createEditor({\n        keyGenerator: props.keyGenerator ?? defaultKeyGenerator,\n        schema: props.schemaType,\n        initialValue: props.value,\n        maxBlocks:\n          props.maxBlocks === undefined\n            ? undefined\n            : Number.parseInt(props.maxBlocks.toString(), 10),\n        readOnly: props.readOnly,\n      })\n    }\n\n    this.schemaTypes =\n      this.editor._internal.editorActor.getSnapshot().context.schema\n    this.editable = this.editor._internal.editable\n  }\n\n  componentDidUpdate(prevProps: PortableTextEditorProps) {\n    // Set up the schema type lookup table again if the source schema type changes\n    if (\n      !this.props.editor &&\n      !prevProps.editor &&\n      this.props.schemaType !== prevProps.schemaType\n    ) {\n      this.schemaTypes = createEditorSchema(\n        this.props.schemaType.hasOwnProperty('jsonType')\n          ? this.props.schemaType\n          : compileType(this.props.schemaType),\n      )\n\n      this.editor._internal.editorActor.send({\n        type: 'update schema',\n        schema: this.schemaTypes,\n      })\n    }\n\n    if (!this.props.editor && !prevProps.editor) {\n      if (this.props.readOnly !== prevProps.readOnly) {\n        this.editor._internal.editorActor.send({\n          type: 'update readOnly',\n          readOnly: this.props.readOnly ?? false,\n        })\n      }\n\n      if (this.props.maxBlocks !== prevProps.maxBlocks) {\n        this.editor._internal.editorActor.send({\n          type: 'update maxBlocks',\n          maxBlocks:\n            this.props.maxBlocks === undefined\n              ? undefined\n              : Number.parseInt(this.props.maxBlocks.toString(), 10),\n        })\n      }\n\n      if (this.props.value !== prevProps.value) {\n        this.editor._internal.editorActor.send({\n          type: 'update value',\n          value: this.props.value,\n        })\n      }\n\n      if (\n        this.props.editorRef !== prevProps.editorRef &&\n        this.props.editorRef\n      ) {\n        this.props.editorRef.current = this\n      }\n    }\n  }\n\n  public setEditable = (editable: EditableAPI) => {\n    this.editor._internal.editable = {\n      ...this.editor._internal.editable,\n      ...editable,\n    }\n  }\n\n  render() {\n    const legacyPatches = !this.props.editor\n      ? (this.props.incomingPatches$ ?? this.props.patches$)\n      : undefined\n\n    return (\n      <>\n        {legacyPatches ? (\n          <RoutePatchesObservableToEditorActor\n            editorActor={this.editor._internal.editorActor}\n            patches$={legacyPatches}\n          />\n        ) : null}\n        <RouteEventsToChanges\n          editorActor={this.editor._internal.editorActor}\n          onChange={(change) => {\n            if (!this.props.editor) {\n              this.props.onChange(change)\n            }\n            /**\n             * For backwards compatibility, we relay all changes to the\n             * `change$` Subject as well.\n             */\n            this.change$.next(change)\n          }}\n        />\n        <Synchronizer\n          editorActor={this.editor._internal.editorActor}\n          slateEditor={this.editor._internal.slateEditor.instance}\n        />\n        <EditorActorContext.Provider value={this.editor._internal.editorActor}>\n          <Slate\n            editor={this.editor._internal.slateEditor.instance}\n            initialValue={this.editor._internal.slateEditor.initialValue}\n          >\n            <PortableTextEditorContext.Provider value={this}>\n              <PortableTextEditorSelectionProvider\n                editorActor={this.editor._internal.editorActor}\n              >\n                {this.props.children}\n              </PortableTextEditorSelectionProvider>\n            </PortableTextEditorContext.Provider>\n          </Slate>\n        </EditorActorContext.Provider>\n      </>\n    )\n  }\n\n  // Static API methods\n  static activeAnnotations = (\n    editor: PortableTextEditor,\n  ): PortableTextObject[] => {\n    return editor && editor.editable ? editor.editable.activeAnnotations() : []\n  }\n  static isAnnotationActive = (\n    editor: PortableTextEditor,\n    annotationType: PortableTextObject['_type'],\n  ): boolean => {\n    return editor && editor.editable\n      ? editor.editable.isAnnotationActive(annotationType)\n      : false\n  }\n  static addAnnotation = <TSchemaType extends {name: string}>(\n    editor: PortableTextEditor,\n    type: TSchemaType,\n    value?: {[prop: string]: unknown},\n  ): AddedAnnotationPaths | undefined =>\n    editor.editable?.addAnnotation(type, value)\n  static blur = (editor: PortableTextEditor): void => {\n    debug('Host blurred')\n    editor.editable?.blur()\n  }\n  static delete = (\n    editor: PortableTextEditor,\n    selection: EditorSelection,\n    options?: EditableAPIDeleteOptions,\n  ) => editor.editable?.delete(selection, options)\n  static findDOMNode = (\n    editor: PortableTextEditor,\n    element: PortableTextBlock | PortableTextChild,\n  ) => {\n    return editor.editable?.findDOMNode(element)\n  }\n  static findByPath = (editor: PortableTextEditor, path: Path) => {\n    return editor.editable?.findByPath(path) || []\n  }\n  static focus = (editor: PortableTextEditor): void => {\n    debug('Host requesting focus')\n    editor.editable?.focus()\n  }\n  static focusBlock = (editor: PortableTextEditor) => {\n    return editor.editable?.focusBlock()\n  }\n  static focusChild = (\n    editor: PortableTextEditor,\n  ): PortableTextChild | undefined => {\n    return editor.editable?.focusChild()\n  }\n  static getSelection = (editor: PortableTextEditor) => {\n    return editor.editable ? editor.editable.getSelection() : null\n  }\n  static getValue = (editor: PortableTextEditor) => {\n    return editor.editable?.getValue()\n  }\n  static hasBlockStyle = (editor: PortableTextEditor, blockStyle: string) => {\n    return editor.editable?.hasBlockStyle(blockStyle)\n  }\n  static hasListStyle = (editor: PortableTextEditor, listStyle: string) => {\n    return editor.editable?.hasListStyle(listStyle)\n  }\n  static isCollapsedSelection = (editor: PortableTextEditor) =>\n    editor.editable?.isCollapsedSelection()\n  static isExpandedSelection = (editor: PortableTextEditor) =>\n    editor.editable?.isExpandedSelection()\n  static isMarkActive = (editor: PortableTextEditor, mark: string) =>\n    editor.editable?.isMarkActive(mark)\n  static insertChild = <TSchemaType extends {name: string}>(\n    editor: PortableTextEditor,\n    type: TSchemaType,\n    value?: {[prop: string]: unknown},\n  ): Path | undefined => {\n    debug(`Host inserting child`)\n    return editor.editable?.insertChild(type, value)\n  }\n  static insertBlock = <TSchemaType extends {name: string}>(\n    editor: PortableTextEditor,\n    type: TSchemaType,\n    value?: {[prop: string]: unknown},\n  ): Path | undefined => {\n    return editor.editable?.insertBlock(type, value)\n  }\n  static insertBreak = (editor: PortableTextEditor): void => {\n    return editor.editable?.insertBreak()\n  }\n  static isVoid = (\n    editor: PortableTextEditor,\n    element: PortableTextBlock | PortableTextChild,\n  ) => {\n    return editor.editable?.isVoid(element)\n  }\n  static isObjectPath = (_editor: PortableTextEditor, path: Path): boolean => {\n    if (!path || !Array.isArray(path)) return false\n    const isChildObjectEditPath = path.length > 3 && path[1] === 'children'\n    const isBlockObjectEditPath = path.length > 1 && path[1] !== 'children'\n    return isBlockObjectEditPath || isChildObjectEditPath\n  }\n  static marks = (editor: PortableTextEditor) => {\n    return editor.editable?.marks()\n  }\n  static select = (\n    editor: PortableTextEditor,\n    selection: EditorSelection | null,\n  ) => {\n    debug(`Host setting selection`, selection)\n    editor.editable?.select(selection)\n  }\n  static removeAnnotation = <TSchemaType extends {name: string}>(\n    editor: PortableTextEditor,\n    type: TSchemaType,\n  ) => editor.editable?.removeAnnotation(type)\n  static toggleBlockStyle = (\n    editor: PortableTextEditor,\n    blockStyle: string,\n  ) => {\n    debug(`Host is toggling block style`)\n    return editor.editable?.toggleBlockStyle(blockStyle)\n  }\n  static toggleList = (editor: PortableTextEditor, listStyle: string): void => {\n    return editor.editable?.toggleList(listStyle)\n  }\n  static toggleMark = (editor: PortableTextEditor, mark: string): void => {\n    debug(`Host toggling mark`, mark)\n    editor.editable?.toggleMark(mark)\n  }\n  static getFragment = (\n    editor: PortableTextEditor,\n  ): PortableTextBlock[] | undefined => {\n    debug(`Host getting fragment`)\n    return editor.editable?.getFragment()\n  }\n  static undo = (editor: PortableTextEditor): void => {\n    debug('Host undoing')\n    editor.editable?.undo()\n  }\n  static redo = (editor: PortableTextEditor): void => {\n    debug('Host redoing')\n    editor.editable?.redo()\n  }\n  static isSelectionsOverlapping = (\n    editor: PortableTextEditor,\n    selectionA: EditorSelection,\n    selectionB: EditorSelection,\n  ) => {\n    return editor.editable?.isSelectionsOverlapping(selectionA, selectionB)\n  }\n}\n\nfunction RoutePatchesObservableToEditorActor(props: {\n  editorActor: EditorActor\n  patches$: PatchObservable\n}) {\n  useEffect(() => {\n    const subscription = props.patches$.subscribe((payload) => {\n      props.editorActor.send({\n        type: 'patches',\n        ...payload,\n      })\n    })\n\n    return () => {\n      subscription.unsubscribe()\n    }\n  }, [props.editorActor, props.patches$])\n\n  return null\n}\n\nexport function RouteEventsToChanges(props: {\n  editorActor: EditorActor\n  onChange: (change: EditorChange) => void\n}) {\n  // We want to ensure that _when_ `props.onChange` is called, it uses the current value.\n  // But we don't want to have the `useEffect` run setup + teardown + setup every time the prop might change, as that's unnecessary.\n  // So we use our own polyfill that lets us use an upcoming React hook that solves this exact problem.\n  // https://19.react.dev/learn/separating-events-from-effects#declaring-an-effect-event\n  const handleChange = useEffectEvent((change: EditorChange) =>\n    props.onChange(change),\n  )\n\n  useEffect(() => {\n    debug('Subscribing to editor changes')\n    const sub = props.editorActor.on('*', (event) => {\n      switch (event.type) {\n        case 'blurred': {\n          handleChange({type: 'blur', event: event.event})\n          break\n        }\n        case 'patch':\n          handleChange(event)\n          break\n        case 'loading': {\n          handleChange({type: 'loading', isLoading: true})\n          break\n        }\n        case 'done loading': {\n          handleChange({type: 'loading', isLoading: false})\n          break\n        }\n        case 'focused': {\n          handleChange({type: 'focus', event: event.event})\n          break\n        }\n        case 'value changed': {\n          handleChange({type: 'value', value: event.value})\n          break\n        }\n        case 'invalid value': {\n          handleChange({\n            type: 'invalidValue',\n            resolution: event.resolution,\n            value: event.value,\n          })\n          break\n        }\n        case 'error': {\n          handleChange({\n            ...event,\n            level: 'warning',\n          })\n          break\n        }\n        case 'annotation.add':\n        case 'annotation.remove':\n        case 'annotation.toggle':\n        case 'blur':\n        case 'decorator.add':\n        case 'decorator.remove':\n        case 'decorator.toggle':\n        case 'focus':\n        case 'insert.block object':\n        case 'insert.inline object':\n        case 'list item.toggle':\n        case 'style.toggle':\n        case 'patches':\n        case 'editable':\n        case 'read only':\n          break\n        default:\n          handleChange(event)\n      }\n    })\n    return () => {\n      debug('Unsubscribing to changes')\n      sub.unsubscribe()\n    }\n  }, [props.editorActor, handleChange])\n\n  return null\n}\n","import type {\n  Path,\n  PortableTextObject,\n  PortableTextTextBlock,\n} from '@sanity/types'\nimport {isEqual, uniq} from 'lodash'\nimport {\n  startTransition,\n  useCallback,\n  useEffect,\n  useMemo,\n  useRef,\n  useState,\n  type ReactElement,\n} from 'react'\nimport {Text} from 'slate'\nimport {useSelected, type RenderLeafProps} from 'slate-react'\nimport type {\n  BlockAnnotationRenderProps,\n  BlockChildRenderProps,\n  BlockDecoratorRenderProps,\n  PortableTextMemberSchemaTypes,\n  RenderAnnotationFunction,\n  RenderChildFunction,\n  RenderDecoratorFunction,\n} from '../../types/editor'\nimport {debugWithName} from '../../utils/debug'\nimport type {EditorActor} from '../editor-machine'\nimport {usePortableTextEditor} from '../hooks/usePortableTextEditor'\nimport {DefaultAnnotation} from '../nodes/DefaultAnnotation'\nimport {PortableTextEditor} from '../PortableTextEditor'\n\nconst debug = debugWithName('components:Leaf')\n\nconst EMPTY_MARKS: string[] = []\n\n/**\n * @internal\n */\nexport interface LeafProps extends RenderLeafProps {\n  editorActor: EditorActor\n  children: ReactElement<any>\n  schemaTypes: PortableTextMemberSchemaTypes\n  renderAnnotation?: RenderAnnotationFunction\n  renderChild?: RenderChildFunction\n  renderDecorator?: RenderDecoratorFunction\n  readOnly: boolean\n}\n\n/**\n * Renders Portable Text span nodes in Slate\n * @internal\n */\nexport const Leaf = (props: LeafProps) => {\n  const {\n    editorActor,\n    attributes,\n    children,\n    leaf,\n    schemaTypes,\n    renderChild,\n    renderDecorator,\n    renderAnnotation,\n  } = props\n  const spanRef = useRef<HTMLElement>(null)\n  const portableTextEditor = usePortableTextEditor()\n  const blockSelected = useSelected()\n  const [focused, setFocused] = useState(false)\n  const [selected, setSelected] = useState(false)\n  const block = children.props.parent as PortableTextTextBlock | undefined\n  const path: Path = useMemo(\n    () => (block ? [{_key: block?._key}, 'children', {_key: leaf._key}] : []),\n    [block, leaf._key],\n  )\n  const decoratorValues = useMemo(\n    () => schemaTypes.decorators.map((dec) => dec.value),\n    [schemaTypes.decorators],\n  )\n  const marks: string[] = useMemo(\n    () =>\n      uniq(\n        (leaf.marks || EMPTY_MARKS).filter((mark) =>\n          decoratorValues.includes(mark),\n        ),\n      ),\n    [decoratorValues, leaf.marks],\n  )\n  const annotationMarks = Array.isArray(leaf.marks) ? leaf.marks : EMPTY_MARKS\n  const annotations = useMemo(\n    () =>\n      annotationMarks\n        .map(\n          (mark) =>\n            !decoratorValues.includes(mark) &&\n            block?.markDefs?.find((def) => def._key === mark),\n        )\n        .filter(Boolean) as PortableTextObject[],\n    [annotationMarks, block, decoratorValues],\n  )\n\n  const shouldTrackSelectionAndFocus = annotations.length > 0 && blockSelected\n\n  useEffect(() => {\n    if (!shouldTrackSelectionAndFocus) {\n      setFocused(false)\n      return\n    }\n    const sel = PortableTextEditor.getSelection(portableTextEditor)\n    if (\n      sel &&\n      isEqual(sel.focus.path, path) &&\n      PortableTextEditor.isCollapsedSelection(portableTextEditor)\n    ) {\n      startTransition(() => {\n        setFocused(true)\n      })\n    }\n  }, [shouldTrackSelectionAndFocus, path, portableTextEditor])\n\n  // Function to check if this leaf is currently inside the user's text selection\n  const setSelectedFromRange = useCallback(() => {\n    if (!shouldTrackSelectionAndFocus) {\n      return\n    }\n    debug('Setting selection and focus from range')\n    const winSelection = window.getSelection()\n    if (!winSelection) {\n      setSelected(false)\n      return\n    }\n    if (winSelection && winSelection.rangeCount > 0) {\n      const range = winSelection.getRangeAt(0)\n      if (spanRef.current && range.intersectsNode(spanRef.current)) {\n        setSelected(true)\n      } else {\n        setSelected(false)\n      }\n    } else {\n      setSelected(false)\n    }\n  }, [shouldTrackSelectionAndFocus])\n\n  useEffect(() => {\n    if (!shouldTrackSelectionAndFocus) {\n      return undefined\n    }\n\n    const onBlur = editorActor.on('blur', () => {\n      setFocused(false)\n      setSelected(false)\n    })\n\n    const onFocus = editorActor.on('focus', () => {\n      const sel = PortableTextEditor.getSelection(portableTextEditor)\n      if (\n        sel &&\n        isEqual(sel.focus.path, path) &&\n        PortableTextEditor.isCollapsedSelection(portableTextEditor)\n      ) {\n        setFocused(true)\n      }\n      setSelectedFromRange()\n    })\n\n    const onSelection = editorActor.on('selection', (event) => {\n      if (\n        event.selection &&\n        isEqual(event.selection.focus.path, path) &&\n        PortableTextEditor.isCollapsedSelection(portableTextEditor)\n      ) {\n        setFocused(true)\n      } else {\n        setFocused(false)\n      }\n      setSelectedFromRange()\n    })\n\n    return () => {\n      onBlur.unsubscribe()\n      onFocus.unsubscribe()\n      onSelection.unsubscribe()\n    }\n  }, [\n    editorActor,\n    path,\n    portableTextEditor,\n    setSelectedFromRange,\n    shouldTrackSelectionAndFocus,\n  ])\n\n  useEffect(() => setSelectedFromRange(), [setSelectedFromRange])\n\n  const content = useMemo(() => {\n    let returnedChildren = children\n    // Render text nodes\n    if (Text.isText(leaf) && leaf._type === schemaTypes.span.name) {\n      marks.forEach((mark) => {\n        const schemaType = schemaTypes.decorators.find(\n          (dec) => dec.value === mark,\n        )\n        if (schemaType && renderDecorator) {\n          const _props: Omit<BlockDecoratorRenderProps, 'type'> =\n            Object.defineProperty(\n              {\n                children: returnedChildren,\n                editorElementRef: spanRef,\n                focused,\n                path,\n                selected,\n                schemaType,\n                value: mark,\n              },\n              'type',\n              {\n                enumerable: false,\n                get() {\n                  console.warn(\n                    \"Property 'type' is deprecated, use 'schemaType' instead.\",\n                  )\n                  return schemaType\n                },\n              },\n            )\n          returnedChildren = renderDecorator(\n            _props as BlockDecoratorRenderProps,\n          )\n        }\n      })\n\n      if (block && annotations.length > 0) {\n        annotations.forEach((annotation) => {\n          const schemaType = schemaTypes.annotations.find(\n            (t) => t.name === annotation._type,\n          )\n          if (schemaType) {\n            if (renderAnnotation) {\n              const _props: Omit<BlockAnnotationRenderProps, 'type'> =\n                Object.defineProperty(\n                  {\n                    block,\n                    children: returnedChildren,\n                    editorElementRef: spanRef,\n                    focused,\n                    path,\n                    selected,\n                    schemaType,\n                    value: annotation,\n                  },\n                  'type',\n                  {\n                    enumerable: false,\n                    get() {\n                      console.warn(\n                        \"Property 'type' is deprecated, use 'schemaType' instead.\",\n                      )\n                      return schemaType\n                    },\n                  },\n                )\n\n              returnedChildren = (\n                <span ref={spanRef}>\n                  {renderAnnotation(_props as BlockAnnotationRenderProps)}\n                </span>\n              )\n            } else {\n              returnedChildren = (\n                <DefaultAnnotation annotation={annotation}>\n                  <span ref={spanRef}>{returnedChildren}</span>\n                </DefaultAnnotation>\n              )\n            }\n          }\n        })\n      }\n      if (block && renderChild) {\n        const child = block.children.find((_child) => _child._key === leaf._key) // Ensure object equality\n        if (child) {\n          const defaultRendered = <>{returnedChildren}</>\n          const _props: Omit<BlockChildRenderProps, 'type'> =\n            Object.defineProperty(\n              {\n                annotations,\n                children: defaultRendered,\n                editorElementRef: spanRef,\n                focused,\n                path,\n                schemaType: schemaTypes.span,\n                selected,\n                value: child,\n              },\n              'type',\n              {\n                enumerable: false,\n                get() {\n                  console.warn(\n                    \"Property 'type' is deprecated, use 'schemaType' instead.\",\n                  )\n                  return schemaTypes.span\n                },\n              },\n            )\n          returnedChildren = renderChild(_props as BlockChildRenderProps)\n        }\n      }\n    }\n    return returnedChildren\n  }, [\n    annotations,\n    block,\n    children,\n    focused,\n    leaf,\n    marks,\n    path,\n    renderAnnotation,\n    renderChild,\n    renderDecorator,\n    schemaTypes.annotations,\n    schemaTypes.decorators,\n    schemaTypes.span,\n    selected,\n  ])\n  return useMemo(\n    () => (\n      <span key={leaf._key} {...attributes} ref={spanRef}>\n        {content}\n      </span>\n    ),\n    [leaf, attributes, content],\n  )\n}\n\nLeaf.displayName = 'Leaf'\n","import type {KeyboardEvent} from 'react'\nimport type {ReactEditor} from 'slate-react'\nimport type {PortableTextSlateEditor} from '../../types/editor'\nimport type {HotkeyOptions} from '../../types/options'\nimport {debugWithName} from '../../utils/debug'\nimport {isHotkey} from '../../utils/is-hotkey'\nimport type {EditorActor} from '../editor-machine'\nimport type {PortableTextEditor} from '../PortableTextEditor'\n\nconst debug = debugWithName('plugin:withHotKeys')\n\nconst DEFAULT_HOTKEYS: HotkeyOptions = {\n  marks: {\n    'mod+b': 'strong',\n    'mod+i': 'em',\n    'mod+u': 'underline',\n    \"mod+'\": 'code',\n  },\n  custom: {},\n}\n\n/**\n * This plugin takes care of all hotkeys in the editor\n *\n */\nexport function createWithHotkeys(\n  editorActor: EditorActor,\n  portableTextEditor: PortableTextEditor,\n  hotkeysFromOptions?: HotkeyOptions,\n): (editor: PortableTextSlateEditor & ReactEditor) => any {\n  const reservedHotkeys = ['enter', 'tab', 'shift', 'delete', 'end']\n  const activeHotkeys = hotkeysFromOptions || DEFAULT_HOTKEYS // TODO: Merge where possible? A union?\n  return function withHotKeys(editor: PortableTextSlateEditor & ReactEditor) {\n    editor.pteWithHotKeys = (event: KeyboardEvent<HTMLDivElement>): void => {\n      // Wire up custom marks hotkeys\n      Object.keys(activeHotkeys).forEach((cat) => {\n        if (cat === 'marks') {\n          for (const hotkey in activeHotkeys[cat]) {\n            if (reservedHotkeys.includes(hotkey)) {\n              throw new Error(`The hotkey ${hotkey} is reserved!`)\n            }\n            if (isHotkey(hotkey, event.nativeEvent)) {\n              event.preventDefault()\n              const possibleMark = activeHotkeys[cat]\n              if (possibleMark) {\n                const mark = possibleMark[hotkey]\n                debug(`HotKey ${hotkey} to toggle ${mark}`)\n                editorActor.send({\n                  type: 'behavior event',\n                  behaviorEvent: {\n                    type: 'decorator.toggle',\n                    decorator: mark,\n                  },\n                  editor,\n                })\n              }\n            }\n          }\n        }\n        if (cat === 'custom') {\n          for (const hotkey in activeHotkeys[cat]) {\n            if (reservedHotkeys.includes(hotkey)) {\n              throw new Error(`The hotkey ${hotkey} is reserved!`)\n            }\n            if (isHotkey(hotkey, event.nativeEvent)) {\n              const possibleCommand = activeHotkeys[cat]\n              if (possibleCommand) {\n                const command = possibleCommand[hotkey]\n                command(event, portableTextEditor)\n              }\n            }\n          }\n        }\n      })\n    }\n    return editor\n  }\n}\n","import {htmlToBlocks, normalizeBlock} from '@sanity/block-tools'\nimport type {PortableTextBlock, PortableTextChild} from '@sanity/types'\nimport {isEqual, uniq} from 'lodash'\nimport {Editor, Range, Transforms, type Descendant, type Node} from 'slate'\nimport {ReactEditor} from 'slate-react'\nimport type {\n  PortableTextMemberSchemaTypes,\n  PortableTextSlateEditor,\n} from '../../types/editor'\nimport {debugWithName} from '../../utils/debug'\nimport {validateValue} from '../../utils/validateValue'\nimport {\n  fromSlateValue,\n  isEqualToEmptyEditor,\n  toSlateValue,\n} from '../../utils/values'\nimport type {EditorActor} from '../editor-machine'\n\nconst debug = debugWithName('plugin:withInsertData')\n\n/**\n * This plugin handles copy/paste in the editor\n *\n */\nexport function createWithInsertData(\n  editorActor: EditorActor,\n  schemaTypes: PortableTextMemberSchemaTypes,\n) {\n  return function withInsertData(\n    editor: PortableTextSlateEditor,\n  ): PortableTextSlateEditor {\n    const blockTypeName = schemaTypes.block.name\n    const spanTypeName = schemaTypes.span.name\n    const whitespaceOnPasteMode =\n      schemaTypes.block.options.unstable_whitespaceOnPasteMode\n\n    const toPlainText = (blocks: PortableTextBlock[]) => {\n      return blocks\n        .map((block) => {\n          if (editor.isTextBlock(block)) {\n            return block.children\n              .map((child: PortableTextChild) => {\n                if (child._type === spanTypeName) {\n                  return child.text\n                }\n                return `[${\n                  schemaTypes.inlineObjects.find((t) => t.name === child._type)\n                    ?.title || 'Object'\n                }]`\n              })\n              .join('')\n          }\n          return `[${\n            schemaTypes.blockObjects.find((t) => t.name === block._type)\n              ?.title || 'Object'\n          }]`\n        })\n        .join('\\n\\n')\n    }\n\n    editor.setFragmentData = (data: DataTransfer, originEvent) => {\n      const {selection} = editor\n\n      if (!selection) {\n        return\n      }\n\n      const [start, end] = Range.edges(selection)\n      const startVoid = Editor.void(editor, {at: start.path})\n      const endVoid = Editor.void(editor, {at: end.path})\n\n      if (Range.isCollapsed(selection) && !startVoid) {\n        return\n      }\n\n      // Create a fake selection so that we can add a Base64-encoded copy of the\n      // fragment to the HTML, to decode on future pastes.\n      const domRange = ReactEditor.toDOMRange(editor, selection)\n      let contents = domRange.cloneContents()\n      // COMPAT: If the end node is a void node, we need to move the end of the\n      // range from the void node's spacer span, to the end of the void node's\n      // content, since the spacer is before void's content in the DOM.\n      if (endVoid) {\n        const [voidNode] = endVoid\n        const r = domRange.cloneRange()\n        const domNode = ReactEditor.toDOMNode(editor, voidNode)\n        r.setEndAfter(domNode)\n        contents = r.cloneContents()\n      }\n      // Remove any zero-width space spans from the cloned DOM so that they don't\n      // show up elsewhere when pasted.\n      Array.from(contents.querySelectorAll('[data-slate-zero-width]')).forEach(\n        (zw) => {\n          const isNewline = zw.getAttribute('data-slate-zero-width') === 'n'\n          zw.textContent = isNewline ? '\\n' : ''\n        },\n      )\n      // Clean up the clipboard HTML for editor spesific attributes\n      Array.from(contents.querySelectorAll('*')).forEach((elm) => {\n        elm.removeAttribute('contentEditable')\n        elm.removeAttribute('data-slate-inline')\n        elm.removeAttribute('data-slate-leaf')\n        elm.removeAttribute('data-slate-node')\n        elm.removeAttribute('data-slate-spacer')\n        elm.removeAttribute('data-slate-string')\n        elm.removeAttribute('data-slate-zero-width')\n        elm.removeAttribute('draggable')\n        for (const key in elm.attributes) {\n          if (elm.hasAttribute(key)) {\n            elm.removeAttribute(key)\n          }\n        }\n      })\n      const div = contents.ownerDocument.createElement('div')\n      div.appendChild(contents)\n      div.setAttribute('hidden', 'true')\n      contents.ownerDocument.body.appendChild(div)\n      const asHTML = div.innerHTML\n      contents.ownerDocument.body.removeChild(div)\n      const fragment = editor.getFragment()\n      const portableText = fromSlateValue(fragment, blockTypeName)\n\n      const asJSON = JSON.stringify(portableText)\n      const asPlainText = toPlainText(portableText)\n      data.clearData()\n      data.setData('text/plain', asPlainText)\n      data.setData('text/html', asHTML)\n      data.setData('application/json', asJSON)\n      data.setData('application/x-portable-text', asJSON)\n      debug('text', asPlainText)\n      data.setData(\n        'application/x-portable-text-event-origin',\n        originEvent || 'external',\n      )\n      debug('Set fragment data', asJSON, asHTML)\n    }\n\n    editor.insertPortableTextData = (data: DataTransfer): boolean => {\n      if (!editor.selection) {\n        return false\n      }\n      const pText = data.getData('application/x-portable-text')\n      const origin = data.getData('application/x-portable-text-event-origin')\n      debug(`Inserting portable text from ${origin} event`, pText)\n      if (pText) {\n        const parsed = JSON.parse(pText) as PortableTextBlock[]\n        if (Array.isArray(parsed) && parsed.length > 0) {\n          const slateValue = _regenerateKeys(\n            editor,\n            toSlateValue(parsed, {schemaTypes}),\n            editorActor.getSnapshot().context.keyGenerator,\n            spanTypeName,\n            schemaTypes,\n          )\n          // Validate the result\n          const validation = validateValue(\n            parsed,\n            schemaTypes,\n            editorActor.getSnapshot().context.keyGenerator,\n          )\n          // Bail out if it's not valid\n          if (!validation.valid && !validation.resolution?.autoResolve) {\n            const errorDescription = `${validation.resolution?.description}`\n            editorActor.send({\n              type: 'error',\n              name: 'pasteError',\n              description: errorDescription,\n              data: validation,\n            })\n            debug('Invalid insert result', validation)\n            return false\n          }\n          _insertFragment(editor, slateValue, schemaTypes)\n          return true\n        }\n      }\n      return false\n    }\n\n    editor.insertTextOrHTMLData = (data: DataTransfer): boolean => {\n      if (!editor.selection) {\n        debug('No selection, not inserting')\n        return false\n      }\n      const html = data.getData('text/html')\n      const text = data.getData('text/plain')\n\n      if (html || text) {\n        debug('Inserting data', data)\n        let portableText: PortableTextBlock[]\n        let fragment: Node[]\n        let insertedType: string | undefined\n\n        if (html) {\n          portableText = htmlToBlocks(html, schemaTypes.portableText, {\n            unstable_whitespaceOnPasteMode: whitespaceOnPasteMode,\n          }).map((block) =>\n            normalizeBlock(block, {blockTypeName}),\n          ) as PortableTextBlock[]\n          fragment = toSlateValue(portableText, {schemaTypes})\n          insertedType = 'HTML'\n\n          if (portableText.length === 0) {\n            return false\n          }\n        } else {\n          // plain text\n          const blocks = escapeHtml(text)\n            .split(/\\n{2,}/)\n            .map((line) =>\n              line\n                ? `<p>${line.replace(/(?:\\r\\n|\\r|\\n)/g, '<br/>')}</p>`\n                : '<p></p>',\n            )\n            .join('')\n          const textToHtml = `<html><body>${blocks}</body></html>`\n          portableText = htmlToBlocks(textToHtml, schemaTypes.portableText).map(\n            (block) => normalizeBlock(block, {blockTypeName}),\n          ) as PortableTextBlock[]\n          fragment = toSlateValue(portableText, {\n            schemaTypes,\n          })\n          insertedType = 'text'\n        }\n\n        // Validate the result\n        const validation = validateValue(\n          portableText,\n          schemaTypes,\n          editorActor.getSnapshot().context.keyGenerator,\n        )\n\n        // Bail out if it's not valid\n        if (!validation.valid) {\n          const errorDescription = `Could not validate the resulting portable text to insert.\\n${validation.resolution?.description}\\nTry to insert as plain text (shift-paste) instead.`\n          editorActor.send({\n            type: 'error',\n            name: 'pasteError',\n            description: errorDescription,\n            data: validation,\n          })\n          debug('Invalid insert result', validation)\n          return false\n        }\n        debug(\n          `Inserting ${insertedType} fragment at ${JSON.stringify(editor.selection)}`,\n        )\n        _insertFragment(editor, fragment, schemaTypes)\n        return true\n      }\n      return false\n    }\n\n    editor.insertData = (data: DataTransfer) => {\n      if (!editor.insertPortableTextData(data)) {\n        editor.insertTextOrHTMLData(data)\n      }\n    }\n\n    editor.insertFragmentData = (data: DataTransfer): boolean => {\n      const fragment = data.getData('application/x-portable-text')\n      if (fragment) {\n        const parsed = JSON.parse(fragment)\n        editor.insertFragment(parsed)\n        return true\n      }\n      return false\n    }\n\n    return editor\n  }\n}\n\nconst entityMap: Record<string, string> = {\n  '&': '&amp;',\n  '<': '&lt;',\n  '>': '&gt;',\n  '\"': '&quot;',\n  \"'\": '&#39;',\n  '/': '&#x2F;',\n  '`': '&#x60;',\n  '=': '&#x3D;',\n}\nfunction escapeHtml(str: string) {\n  return String(str).replace(/[&<>\"'`=/]/g, (s: string) => entityMap[s])\n}\n\n/**\n * Shared helper function to regenerate the keys on a fragment.\n *\n * @internal\n */\nfunction _regenerateKeys(\n  editor: Pick<PortableTextSlateEditor, 'isTextBlock' | 'isTextSpan'>,\n  fragment: Descendant[],\n  keyGenerator: () => string,\n  spanTypeName: string,\n  editorTypes: Pick<PortableTextMemberSchemaTypes, 'annotations'>,\n): Descendant[] {\n  return fragment.map((node) => {\n    const newNode: Descendant = {...node}\n    // Ensure the copy has new keys\n    if (editor.isTextBlock(newNode)) {\n      const annotations = editorTypes.annotations.map((t) => t.name)\n\n      // Ensure that if there are no annotations, we remove the markDefs\n      if (annotations.length === 0) {\n        const {markDefs, ...NewNodeNoDefs} = newNode\n\n        return {...NewNodeNoDefs, _key: keyGenerator()}\n      }\n\n      // Ensure that all annotations are allowed\n      const hasForbiddenAnnotations = (newNode.markDefs || []).some((def) => {\n        return !annotations.includes(def._type)\n      })\n\n      // if they have forbidden annotations, we remove them and keep the rest\n      if (hasForbiddenAnnotations) {\n        const allowedAnnotations = (newNode.markDefs || []).filter((def) => {\n          return annotations.includes(def._type)\n        })\n\n        return {...newNode, markDefs: allowedAnnotations, _key: keyGenerator()}\n      }\n\n      newNode.markDefs = (newNode.markDefs || []).map((def) => {\n        const oldKey = def._key\n        const newKey = keyGenerator()\n        newNode.children = newNode.children.map((child) =>\n          child._type === spanTypeName && editor.isTextSpan(child)\n            ? {\n                ...child,\n                marks:\n                  child.marks && child.marks.includes(oldKey)\n                    ? [...child.marks]\n                        .filter((mark) => mark !== oldKey)\n                        .concat(newKey)\n                    : child.marks,\n              }\n            : child,\n        )\n        return {...def, _key: newKey}\n      })\n    }\n    const nodeWithNewKeys = {...newNode, _key: keyGenerator()}\n    if (editor.isTextBlock(nodeWithNewKeys)) {\n      nodeWithNewKeys.children = nodeWithNewKeys.children.map((child) => ({\n        ...child,\n        _key: keyGenerator(),\n      }))\n    }\n    return nodeWithNewKeys as Descendant\n  })\n}\n\n/**\n * Shared helper function to insert the final fragment into the editor\n *\n * @internal\n */\nfunction _insertFragment(\n  editor: PortableTextSlateEditor,\n  fragment: Descendant[],\n  schemaTypes: PortableTextMemberSchemaTypes,\n) {\n  editor.withoutNormalizing(() => {\n    if (!editor.selection) {\n      return\n    }\n    // Ensure that markDefs for any annotations inside this fragment are copied over to the focused text block.\n    const [focusBlock, focusPath] = Editor.node(editor, editor.selection, {\n      depth: 1,\n    })\n    if (editor.isTextBlock(focusBlock) && editor.isTextBlock(fragment[0])) {\n      const {markDefs} = focusBlock\n      debug(\n        'Mixing markDefs of focusBlock and fragments[0] block',\n        markDefs,\n        fragment[0].markDefs,\n      )\n      if (!isEqual(markDefs, fragment[0].markDefs)) {\n        Transforms.setNodes(\n          editor,\n          {\n            markDefs: uniq([\n              ...(fragment[0].markDefs || []),\n              ...(markDefs || []),\n            ]),\n          },\n          {at: focusPath, mode: 'lowest', voids: false},\n        )\n      }\n    }\n\n    const isPasteToEmptyEditor = isEqualToEmptyEditor(\n      editor.children,\n      schemaTypes,\n    )\n\n    if (isPasteToEmptyEditor) {\n      // Special case for pasting directly into an empty editor (a placeholder block).\n      // When pasting content starting with multiple empty blocks,\n      // `editor.insertFragment` can potentially duplicate the keys of\n      // the placeholder block because of operations that happen\n      // inside `editor.insertFragment` (involves an `insert_node` operation).\n      // However by splitting the placeholder block first in this situation we are good.\n      Transforms.splitNodes(editor, {at: [0, 0]})\n      editor.insertFragment(fragment)\n      Transforms.removeNodes(editor, {at: [0]})\n    } else {\n      // All other inserts\n      editor.insertFragment(fragment)\n    }\n  })\n\n  editor.onChange()\n}\n\n/**\n * functions we don't want to export but want to test\n * @internal\n */\nexport const exportedForTesting = {\n  _regenerateKeys,\n}\n","import type {BaseEditor, Operation} from 'slate'\nimport type {ReactEditor} from 'slate-react'\nimport type {PortableTextSlateEditor} from '../types/editor'\nimport type {EditorActor} from './editor-machine'\n\n// React Compiler considers `slateEditor` as immutable, and opts-out if we do this inline in a useEffect, doing it in a function moves it out of the scope, and opts-in again for the rest of the component.\nexport function withSyncRangeDecorations({\n  editorActor,\n  slateEditor,\n  syncRangeDecorations,\n}: {\n  editorActor: EditorActor\n  slateEditor: BaseEditor & ReactEditor & PortableTextSlateEditor\n  syncRangeDecorations: (operation?: Operation) => void\n}) {\n  const originalApply = slateEditor.apply\n\n  slateEditor.apply = (op: Operation) => {\n    originalApply(op)\n\n    if (\n      !editorActor.getSnapshot().matches({'edit mode': 'read only'}) &&\n      op.type !== 'set_selection'\n    ) {\n      syncRangeDecorations(op)\n    }\n  }\n\n  return () => {\n    slateEditor.apply = originalApply\n  }\n}\n","import type {PortableTextBlock} from '@sanity/types'\nimport {useSelector} from '@xstate/react'\nimport {isEqual, noop} from 'lodash'\nimport {\n  forwardRef,\n  useCallback,\n  useContext,\n  useEffect,\n  useImperativeHandle,\n  useMemo,\n  useRef,\n  useState,\n  type ClipboardEvent,\n  type CSSProperties,\n  type FocusEventHandler,\n  type KeyboardEvent,\n  type MutableRefObject,\n  type TextareaHTMLAttributes,\n} from 'react'\nimport {\n  Editor,\n  Node,\n  Path,\n  Range as SlateRange,\n  Transforms,\n  type BaseRange,\n  type NodeEntry,\n  type Operation,\n  type Text,\n} from 'slate'\nimport {\n  ReactEditor,\n  Editable as SlateEditable,\n  useSlate,\n  type RenderElementProps,\n  type RenderLeafProps,\n} from 'slate-react'\nimport type {\n  EditorSelection,\n  OnCopyFn,\n  OnPasteFn,\n  RangeDecoration,\n  RenderAnnotationFunction,\n  RenderBlockFunction,\n  RenderChildFunction,\n  RenderDecoratorFunction,\n  RenderListItemFunction,\n  RenderPlaceholderFunction,\n  RenderStyleFunction,\n  ScrollSelectionIntoViewFunction,\n} from '../types/editor'\nimport type {HotkeyOptions} from '../types/options'\nimport type {SlateTextBlock, VoidElement} from '../types/slate'\nimport {debugWithName} from '../utils/debug'\nimport {\n  moveRangeByOperation,\n  toPortableTextRange,\n  toSlateRange,\n} from '../utils/ranges'\nimport {normalizeSelection} from '../utils/selection'\nimport {\n  fromSlateValue,\n  isEqualToEmptyEditor,\n  toSlateValue,\n} from '../utils/values'\nimport {Element} from './components/Element'\nimport {Leaf} from './components/Leaf'\nimport {EditorActorContext} from './editor-actor-context'\nimport {usePortableTextEditor} from './hooks/usePortableTextEditor'\nimport {createWithHotkeys} from './plugins/createWithHotKeys'\nimport {createWithInsertData} from './plugins/createWithInsertData'\nimport {PortableTextEditor} from './PortableTextEditor'\nimport {withSyncRangeDecorations} from './withSyncRangeDecorations'\n\nconst debug = debugWithName('component:Editable')\n\nconst PLACEHOLDER_STYLE: CSSProperties = {\n  position: 'absolute',\n  userSelect: 'none',\n  pointerEvents: 'none',\n  left: 0,\n  right: 0,\n}\n\ninterface BaseRangeWithDecoration extends BaseRange {\n  rangeDecoration: RangeDecoration\n}\n\n/**\n * @public\n */\nexport type PortableTextEditableProps = Omit<\n  TextareaHTMLAttributes<HTMLDivElement>,\n  'onPaste' | 'onCopy' | 'onBeforeInput'\n> & {\n  hotkeys?: HotkeyOptions\n  onBeforeInput?: (event: InputEvent) => void\n  onPaste?: OnPasteFn\n  onCopy?: OnCopyFn\n  ref: MutableRefObject<HTMLDivElement | null>\n  rangeDecorations?: RangeDecoration[]\n  renderAnnotation?: RenderAnnotationFunction\n  renderBlock?: RenderBlockFunction\n  renderChild?: RenderChildFunction\n  renderDecorator?: RenderDecoratorFunction\n  renderListItem?: RenderListItemFunction\n  renderPlaceholder?: RenderPlaceholderFunction\n  renderStyle?: RenderStyleFunction\n  scrollSelectionIntoView?: ScrollSelectionIntoViewFunction\n  selection?: EditorSelection\n  spellCheck?: boolean\n}\n\n/**\n * @public\n */\nexport const PortableTextEditable = forwardRef<\n  Omit<HTMLDivElement, 'as' | 'onPaste' | 'onBeforeInput'>,\n  PortableTextEditableProps\n>(function PortableTextEditable(props, forwardedRef) {\n  const {\n    hotkeys,\n    onBlur,\n    onFocus,\n    onBeforeInput,\n    onPaste,\n    onCopy,\n    onClick,\n    rangeDecorations,\n    renderAnnotation,\n    renderBlock,\n    renderChild,\n    renderDecorator,\n    renderListItem,\n    renderPlaceholder,\n    renderStyle,\n    selection: propsSelection,\n    scrollSelectionIntoView,\n    spellCheck,\n    ...restProps\n  } = props\n\n  const portableTextEditor = usePortableTextEditor()\n  const ref = useRef<HTMLDivElement | null>(null)\n  const [editableElement, setEditableElement] = useState<HTMLDivElement | null>(\n    null,\n  )\n  const [hasInvalidValue, setHasInvalidValue] = useState(false)\n  const [rangeDecorationState, setRangeDecorationsState] = useState<\n    BaseRangeWithDecoration[]\n  >([])\n\n  // Forward ref to parent component\n  useImperativeHandle<HTMLDivElement | null, HTMLDivElement | null>(\n    forwardedRef,\n    () => ref.current,\n  )\n\n  const rangeDecorationsRef = useRef(rangeDecorations)\n\n  const editorActor = useContext(EditorActorContext)\n  const readOnly = useSelector(editorActor, (s) =>\n    s.matches({'edit mode': 'read only'}),\n  )\n  const schemaTypes = useSelector(editorActor, (s) => s.context.schema)\n  const slateEditor = useSlate()\n\n  const blockTypeName = schemaTypes.block.name\n\n  // Output a minimal React editor inside Editable when in readOnly mode.\n  // NOTE: make sure all the plugins used here can be safely run over again at any point.\n  // There will be a problem if they redefine editor methods and then calling the original method within themselves.\n  useMemo(() => {\n    // React/UI-specific plugins\n    const withInsertData = createWithInsertData(editorActor, schemaTypes)\n\n    if (readOnly) {\n      debug('Editable is in read only mode')\n      return withInsertData(slateEditor)\n    }\n    const withHotKeys = createWithHotkeys(\n      editorActor,\n      portableTextEditor,\n      hotkeys,\n    )\n\n    debug('Editable is in edit mode')\n    return withInsertData(withHotKeys(slateEditor))\n  }, [\n    editorActor,\n    hotkeys,\n    portableTextEditor,\n    readOnly,\n    schemaTypes,\n    slateEditor,\n  ])\n\n  const renderElement = useCallback(\n    (eProps: RenderElementProps) => (\n      <Element\n        {...eProps}\n        readOnly={readOnly}\n        renderBlock={renderBlock}\n        renderChild={renderChild}\n        renderListItem={renderListItem}\n        renderStyle={renderStyle}\n        schemaTypes={schemaTypes}\n        spellCheck={spellCheck}\n      />\n    ),\n    [\n      schemaTypes,\n      spellCheck,\n      readOnly,\n      renderBlock,\n      renderChild,\n      renderListItem,\n      renderStyle,\n    ],\n  )\n\n  const renderLeaf = useCallback(\n    (\n      lProps: RenderLeafProps & {\n        leaf: Text & {placeholder?: boolean; rangeDecoration?: RangeDecoration}\n      },\n    ) => {\n      if (lProps.leaf._type === 'span') {\n        let rendered = (\n          <Leaf\n            {...lProps}\n            editorActor={editorActor}\n            schemaTypes={schemaTypes}\n            renderAnnotation={renderAnnotation}\n            renderChild={renderChild}\n            renderDecorator={renderDecorator}\n            readOnly={readOnly}\n          />\n        )\n        if (\n          renderPlaceholder &&\n          lProps.leaf.placeholder &&\n          lProps.text.text === ''\n        ) {\n          return (\n            <>\n              <span style={PLACEHOLDER_STYLE} contentEditable={false}>\n                {renderPlaceholder()}\n              </span>\n              {rendered}\n            </>\n          )\n        }\n        const decoration = lProps.leaf.rangeDecoration\n        if (decoration) {\n          rendered = decoration.component({children: rendered})\n        }\n        return rendered\n      }\n      return lProps.children\n    },\n    [\n      editorActor,\n      readOnly,\n      renderAnnotation,\n      renderChild,\n      renderDecorator,\n      renderPlaceholder,\n      schemaTypes,\n    ],\n  )\n\n  const restoreSelectionFromProps = useCallback(() => {\n    if (propsSelection) {\n      debug(`Selection from props ${JSON.stringify(propsSelection)}`)\n      const normalizedSelection = normalizeSelection(\n        propsSelection,\n        fromSlateValue(slateEditor.children, blockTypeName),\n      )\n      if (normalizedSelection !== null) {\n        debug(\n          `Normalized selection from props ${JSON.stringify(normalizedSelection)}`,\n        )\n        const slateRange = toSlateRange(normalizedSelection, slateEditor)\n        if (slateRange) {\n          Transforms.select(slateEditor, slateRange)\n          // Output selection here in those cases where the editor selection was the same, and there are no set_selection operations made.\n          // The selection is usually automatically emitted to change$ by the withPortableTextSelections plugin whenever there is a set_selection operation applied.\n          if (!slateEditor.operations.some((o) => o.type === 'set_selection')) {\n            editorActor.send({\n              type: 'selection',\n              selection: normalizedSelection,\n            })\n          }\n          slateEditor.onChange()\n        }\n      }\n    }\n  }, [blockTypeName, editorActor, propsSelection, slateEditor])\n\n  const syncRangeDecorations = useCallback(\n    (operation?: Operation) => {\n      if (rangeDecorations && rangeDecorations.length > 0) {\n        const newSlateRanges: BaseRangeWithDecoration[] = []\n        rangeDecorations.forEach((rangeDecorationItem) => {\n          const slateRange = toSlateRange(\n            rangeDecorationItem.selection,\n            slateEditor,\n          )\n          if (!SlateRange.isRange(slateRange)) {\n            if (rangeDecorationItem.onMoved) {\n              rangeDecorationItem.onMoved({\n                newSelection: null,\n                rangeDecoration: rangeDecorationItem,\n                origin: 'local',\n              })\n            }\n            return\n          }\n          let newRange: BaseRange | null | undefined\n          if (operation) {\n            newRange = moveRangeByOperation(slateRange, operation)\n            if (\n              (newRange && newRange !== slateRange) ||\n              (newRange === null && slateRange)\n            ) {\n              const value = PortableTextEditor.getValue(portableTextEditor)\n              const newRangeSelection = toPortableTextRange(\n                value,\n                newRange,\n                schemaTypes,\n              )\n              if (rangeDecorationItem.onMoved) {\n                rangeDecorationItem.onMoved({\n                  newSelection: newRangeSelection,\n                  rangeDecoration: rangeDecorationItem,\n                  origin: 'local',\n                })\n              }\n            }\n          }\n          // If the newRange is null, it means that the range is not valid anymore and should be removed\n          // If it's undefined, it means that the slateRange is still valid and should be kept\n          if (newRange !== null) {\n            newSlateRanges.push({\n              ...(newRange || slateRange),\n              rangeDecoration: rangeDecorationItem,\n            })\n          }\n        })\n        if (newSlateRanges.length > 0) {\n          setRangeDecorationsState(newSlateRanges)\n          return\n        }\n      }\n      setRangeDecorationsState((rangeDecorationState) => {\n        // If there's state then we want to reset\n        if (rangeDecorationState.length > 0) {\n          return []\n        }\n        // Otherwise we no-op, React will skip a state update if what we return has reference equality to the previous state\n        return rangeDecorationState\n      })\n    },\n    [portableTextEditor, rangeDecorations, schemaTypes, slateEditor],\n  )\n\n  // Restore selection from props when the editor has been initialized properly with it's value\n  useEffect(() => {\n    const onReady = editorActor.on('ready', () => {\n      syncRangeDecorations()\n      restoreSelectionFromProps()\n    })\n    const onInvalidValue = editorActor.on('invalid value', () => {\n      setHasInvalidValue(true)\n    })\n    const onValueChanged = editorActor.on('value changed', () => {\n      setHasInvalidValue(false)\n    })\n\n    return () => {\n      onReady.unsubscribe()\n      onInvalidValue.unsubscribe()\n      onValueChanged.unsubscribe()\n    }\n  }, [editorActor, restoreSelectionFromProps, syncRangeDecorations])\n\n  // Restore selection from props when it changes\n  useEffect(() => {\n    if (propsSelection && !hasInvalidValue) {\n      restoreSelectionFromProps()\n    }\n  }, [hasInvalidValue, propsSelection, restoreSelectionFromProps])\n\n  const [syncedRangeDecorations, setSyncedRangeDecorations] = useState(false)\n  useEffect(() => {\n    if (!syncedRangeDecorations) {\n      // We only want this to run once, on mount\n      setSyncedRangeDecorations(true)\n      syncRangeDecorations()\n    }\n  }, [syncRangeDecorations, syncedRangeDecorations])\n\n  useEffect(() => {\n    if (!isEqual(rangeDecorations, rangeDecorationsRef.current)) {\n      syncRangeDecorations()\n    }\n    rangeDecorationsRef.current = rangeDecorations\n  }, [rangeDecorations, syncRangeDecorations])\n\n  // Sync range decorations after an operation is applied\n  useEffect(() => {\n    const teardown = withSyncRangeDecorations({\n      editorActor,\n      slateEditor,\n      syncRangeDecorations,\n    })\n    return () => teardown()\n  }, [editorActor, slateEditor, syncRangeDecorations])\n\n  // Handle from props onCopy function\n  const handleCopy = useCallback(\n    (event: ClipboardEvent<HTMLDivElement>): void | ReactEditor => {\n      if (onCopy) {\n        const result = onCopy(event)\n        // CopyFn may return something to avoid doing default stuff\n        if (result !== undefined) {\n          event.preventDefault()\n        }\n      } else if (event.nativeEvent.clipboardData) {\n        editorActor.send({\n          type: 'behavior event',\n          behaviorEvent: {\n            type: 'copy',\n            data: event.nativeEvent.clipboardData,\n          },\n          editor: slateEditor,\n          nativeEvent: event,\n        })\n      }\n    },\n    [onCopy, editorActor, slateEditor],\n  )\n\n  // Handle incoming pasting events in the editor\n  const handlePaste = useCallback(\n    (event: ClipboardEvent<HTMLDivElement>): Promise<void> | void => {\n      const value = PortableTextEditor.getValue(portableTextEditor)\n      const ptRange = toPortableTextRange(\n        value,\n        slateEditor.selection,\n        schemaTypes,\n      )\n      const path = ptRange?.focus.path || []\n      const onPasteResult = onPaste?.({event, value, path, schemaTypes})\n\n      if (onPasteResult || !slateEditor.selection) {\n        event.preventDefault()\n\n        // Resolve it as promise (can be either async promise or sync return value)\n        editorActor.send({type: 'loading'})\n\n        Promise.resolve(onPasteResult)\n          .then((result) => {\n            debug('Custom paste function from client resolved', result)\n\n            if (!result || !result.insert) {\n              debug('No result from custom paste handler, pasting normally')\n\n              slateEditor.insertData(event.clipboardData)\n            } else if (result.insert) {\n              slateEditor.insertFragment(\n                toSlateValue(result.insert as PortableTextBlock[], {\n                  schemaTypes,\n                }),\n              )\n            } else {\n              console.warn(\n                'Your onPaste function returned something unexpected:',\n                result,\n              )\n            }\n          })\n          .catch((error) => {\n            console.error(error)\n\n            return error\n          })\n          .finally(() => {\n            editorActor.send({type: 'done loading'})\n          })\n      } else if (event.nativeEvent.clipboardData) {\n        editorActor.send({\n          type: 'behavior event',\n          behaviorEvent: {\n            type: 'paste',\n            data: event.nativeEvent.clipboardData,\n          },\n          editor: slateEditor,\n          nativeEvent: event,\n        })\n      }\n\n      debug('No result from custom paste handler, pasting normally')\n    },\n    [editorActor, onPaste, portableTextEditor, schemaTypes, slateEditor],\n  )\n\n  const handleOnFocus: FocusEventHandler<HTMLDivElement> = useCallback(\n    (event) => {\n      if (onFocus) {\n        onFocus(event)\n      }\n      if (!event.isDefaultPrevented()) {\n        const selection = PortableTextEditor.getSelection(portableTextEditor)\n        // Create an editor selection if it does'nt exist\n        if (selection === null) {\n          Transforms.select(slateEditor, Editor.start(slateEditor, []))\n          slateEditor.onChange()\n        }\n        editorActor.send({type: 'focused', event})\n        const newSelection = PortableTextEditor.getSelection(portableTextEditor)\n        // If the selection is the same, emit it explicitly here as there is no actual onChange event triggered.\n        if (selection === newSelection) {\n          editorActor.send({\n            type: 'selection',\n            selection,\n          })\n        }\n      }\n    },\n    [editorActor, onFocus, portableTextEditor, slateEditor],\n  )\n\n  const handleClick = useCallback(\n    (event: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n      if (onClick) {\n        onClick(event)\n      }\n\n      const focusBlockPath = slateEditor.selection\n        ? slateEditor.selection.focus.path.slice(0, 1)\n        : undefined\n      const focusBlock = focusBlockPath\n        ? (Node.descendant(slateEditor, focusBlockPath) as\n            | SlateTextBlock\n            | VoidElement)\n        : undefined\n      const [_, lastNodePath] = Node.last(slateEditor, [])\n      const lastBlockPath = lastNodePath.slice(0, 1)\n      const lastNodeFocused = focusBlockPath\n        ? Path.equals(lastBlockPath, focusBlockPath)\n        : false\n      const lastBlockIsVoid = focusBlock\n        ? !slateEditor.isTextBlock(focusBlock)\n        : false\n      const collapsedSelection =\n        slateEditor.selection && SlateRange.isCollapsed(slateEditor.selection)\n\n      if (collapsedSelection && lastNodeFocused && lastBlockIsVoid) {\n        Transforms.insertNodes(\n          slateEditor,\n          slateEditor.pteCreateTextBlock({decorators: []}),\n        )\n        slateEditor.onChange()\n      }\n    },\n    [onClick, slateEditor],\n  )\n\n  const handleOnBlur: FocusEventHandler<HTMLDivElement> = useCallback(\n    (event) => {\n      if (onBlur) {\n        onBlur(event)\n      }\n      if (!event.isPropagationStopped()) {\n        editorActor.send({type: 'blurred', event})\n      }\n    },\n    [editorActor, onBlur],\n  )\n\n  const handleOnBeforeInput = useCallback(\n    (event: InputEvent) => {\n      if (onBeforeInput) {\n        onBeforeInput(event)\n      }\n    },\n    [onBeforeInput],\n  )\n\n  // This function will handle unexpected DOM changes inside the Editable rendering,\n  // and make sure that we can maintain a stable slateEditor.selection when that happens.\n  //\n  // For example, if this Editable is rendered inside something that might re-render\n  // this component (hidden contexts) while the user is still actively changing the\n  // contentEditable, this could interfere with the intermediate DOM selection,\n  // which again could be picked up by ReactEditor's event listeners.\n  // If that range is invalid at that point, the slate.editorSelection could be\n  // set either wrong, or invalid, to which slateEditor will throw exceptions\n  // that are impossible to recover properly from or result in a wrong selection.\n  //\n  // Also the other way around, when the ReactEditor will try to create a DOM Range\n  // from the current slateEditor.selection, it may throw unrecoverable errors\n  // if the current editor.selection is invalid according to the DOM.\n  // If this is the case, default to selecting the top of the document, if the\n  // user already had a selection.\n  const validateSelection = useCallback(() => {\n    if (!slateEditor.selection) {\n      return\n    }\n    const root = ReactEditor.findDocumentOrShadowRoot(slateEditor)\n    const {activeElement} = root\n    // Return if the editor isn't the active element\n    if (ref.current !== activeElement) {\n      return\n    }\n    const window = ReactEditor.getWindow(slateEditor)\n    const domSelection = window.getSelection()\n    if (!domSelection || domSelection.rangeCount === 0) {\n      return\n    }\n    const existingDOMRange = domSelection.getRangeAt(0)\n    try {\n      const newDOMRange = ReactEditor.toDOMRange(\n        slateEditor,\n        slateEditor.selection,\n      )\n      if (\n        newDOMRange.startOffset !== existingDOMRange.startOffset ||\n        newDOMRange.endOffset !== existingDOMRange.endOffset\n      ) {\n        debug('DOM range out of sync, validating selection')\n        // Remove all ranges temporary\n        domSelection?.removeAllRanges()\n        // Set the correct range\n        domSelection.addRange(newDOMRange)\n      }\n    } catch {\n      debug(`Could not resolve selection, selecting top document`)\n      // Deselect the editor\n      Transforms.deselect(slateEditor)\n      // Select top document if there is a top block to select\n      if (slateEditor.children.length > 0) {\n        Transforms.select(slateEditor, [0, 0])\n      }\n      slateEditor.onChange()\n    }\n  }, [ref, slateEditor])\n\n  // Observe mutations (child list and subtree) to this component's DOM,\n  // and make sure the editor selection is valid when that happens.\n  useEffect(() => {\n    if (editableElement) {\n      const mutationObserver = new MutationObserver(validateSelection)\n      mutationObserver.observe(editableElement, {\n        attributeOldValue: false,\n        attributes: false,\n        characterData: false,\n        childList: true,\n        subtree: true,\n      })\n      return () => {\n        mutationObserver.disconnect()\n      }\n    }\n    return undefined\n  }, [validateSelection, editableElement])\n\n  const handleKeyDown = useCallback(\n    (event: KeyboardEvent<HTMLDivElement>) => {\n      if (props.onKeyDown) {\n        props.onKeyDown(event)\n      }\n      if (!event.isDefaultPrevented()) {\n        slateEditor.pteWithHotKeys(event)\n      }\n      if (!event.isDefaultPrevented()) {\n        editorActor.send({\n          type: 'behavior event',\n          behaviorEvent: {\n            type: 'key.down',\n            keyboardEvent: {\n              key: event.key,\n              code: event.code,\n              altKey: event.altKey,\n              ctrlKey: event.ctrlKey,\n              metaKey: event.metaKey,\n              shiftKey: event.shiftKey,\n            },\n          },\n          editor: slateEditor,\n          nativeEvent: event,\n        })\n      }\n    },\n    [props, editorActor, slateEditor],\n  )\n\n  const handleKeyUp = useCallback(\n    (event: KeyboardEvent<HTMLDivElement>) => {\n      if (props.onKeyUp) {\n        props.onKeyUp(event)\n      }\n      if (!event.isDefaultPrevented()) {\n        editorActor.send({\n          type: 'behavior event',\n          behaviorEvent: {\n            type: 'key.up',\n            keyboardEvent: {\n              key: event.key,\n              code: event.code,\n              altKey: event.altKey,\n              ctrlKey: event.ctrlKey,\n              metaKey: event.metaKey,\n              shiftKey: event.shiftKey,\n            },\n          },\n          editor: slateEditor,\n          nativeEvent: event,\n        })\n      }\n    },\n    [props, editorActor, slateEditor],\n  )\n\n  const scrollSelectionIntoViewToSlate = useMemo(() => {\n    // Use slate-react default scroll into view\n    if (scrollSelectionIntoView === undefined) {\n      return undefined\n    }\n    // Disable scroll into view totally\n    if (scrollSelectionIntoView === null) {\n      return noop\n    }\n    // Translate PortableTextEditor prop fn to Slate plugin fn\n    return (_editor: ReactEditor, domRange: Range) => {\n      scrollSelectionIntoView(portableTextEditor, domRange)\n    }\n  }, [portableTextEditor, scrollSelectionIntoView])\n\n  const decorate: (entry: NodeEntry) => BaseRange[] = useCallback(\n    ([, path]) => {\n      if (isEqualToEmptyEditor(slateEditor.children, schemaTypes)) {\n        return [\n          {\n            anchor: {\n              path: [0, 0],\n              offset: 0,\n            },\n            focus: {\n              path: [0, 0],\n              offset: 0,\n            },\n            placeholder: true,\n          },\n        ]\n      }\n      // Editor node has a path length of 0 (should never be decorated)\n      if (path.length === 0) {\n        return []\n      }\n      const result = rangeDecorationState.filter((item) => {\n        // Special case in order to only return one decoration for collapsed ranges\n        if (SlateRange.isCollapsed(item)) {\n          // Collapsed ranges should only be decorated if they are on a block child level (length 2)\n          if (path.length !== 2) {\n            return false\n          }\n          return (\n            Path.equals(item.focus.path, path) &&\n            Path.equals(item.anchor.path, path)\n          )\n        }\n        // Include decorations that either include or intersects with this path\n        return (\n          SlateRange.intersection(item, {\n            anchor: {path, offset: 0},\n            focus: {path, offset: 0},\n          }) || SlateRange.includes(item, path)\n        )\n      })\n      if (result.length > 0) {\n        return result\n      }\n      return []\n    },\n    [slateEditor, schemaTypes, rangeDecorationState],\n  )\n\n  // Set the forwarded ref to be the Slate editable DOM element\n  // Also set the editable element in a state so that the MutationObserver\n  // is setup when this element is ready.\n  useEffect(() => {\n    ref.current = ReactEditor.toDOMNode(\n      slateEditor,\n      slateEditor,\n    ) as HTMLDivElement | null\n    setEditableElement(ref.current)\n  }, [slateEditor, ref])\n\n  if (!portableTextEditor) {\n    return null\n  }\n  return hasInvalidValue ? null : (\n    <SlateEditable\n      {...restProps}\n      autoFocus={false}\n      className={restProps.className || 'pt-editable'}\n      decorate={decorate}\n      onBlur={handleOnBlur}\n      onCopy={handleCopy}\n      onClick={handleClick}\n      onDOMBeforeInput={handleOnBeforeInput}\n      onFocus={handleOnFocus}\n      onKeyDown={handleKeyDown}\n      onKeyUp={handleKeyUp}\n      onPaste={handlePaste}\n      readOnly={readOnly}\n      // We have implemented our own placeholder logic with decorations.\n      // This 'renderPlaceholder' should not be used.\n      renderPlaceholder={undefined}\n      renderElement={renderElement}\n      renderLeaf={renderLeaf}\n      scrollSelectionIntoView={scrollSelectionIntoViewToSlate}\n    />\n  )\n})\n\nPortableTextEditable.displayName = 'ForwardRef(PortableTextEditable)'\n","import React, {useMemo} from 'react'\nimport {Slate} from 'slate-react'\nimport {Synchronizer} from './components/Synchronizer'\nimport {useCreateEditor, type Editor, type EditorConfig} from './create-editor'\nimport {EditorActorContext} from './editor-actor-context'\nimport {PortableTextEditorContext} from './hooks/usePortableTextEditor'\nimport {PortableTextEditorSelectionProvider} from './hooks/usePortableTextEditorSelection'\nimport {\n  PortableTextEditor,\n  RouteEventsToChanges,\n  type PortableTextEditorProps,\n} from './PortableTextEditor'\n\nconst EditorContext = React.createContext<Editor | undefined>(undefined)\n\n/**\n * @public\n */\nexport type EditorProviderProps = {\n  initialConfig: EditorConfig\n  children?: React.ReactNode\n}\n\n/**\n * @public\n */\nexport function EditorProvider(props: EditorProviderProps) {\n  const editor = useCreateEditor(props.initialConfig)\n  const editorActor = editor._internal.editorActor\n  const slateEditor = editor._internal.slateEditor\n  const portableTextEditor = useMemo(\n    () =>\n      new PortableTextEditor({\n        editor,\n      } as unknown as PortableTextEditorProps),\n    [editor],\n  )\n\n  return (\n    <EditorContext.Provider value={editor}>\n      <RouteEventsToChanges\n        editorActor={editorActor}\n        onChange={(change) => {\n          portableTextEditor.change$.next(change)\n        }}\n      />\n      <Synchronizer\n        editorActor={editorActor}\n        slateEditor={slateEditor.instance}\n      />\n      <EditorActorContext.Provider value={editorActor}>\n        <Slate\n          editor={slateEditor.instance}\n          initialValue={slateEditor.initialValue}\n        >\n          <PortableTextEditorContext.Provider value={portableTextEditor}>\n            <PortableTextEditorSelectionProvider editorActor={editorActor}>\n              {props.children}\n            </PortableTextEditorSelectionProvider>\n          </PortableTextEditorContext.Provider>\n        </Slate>\n      </EditorActorContext.Provider>\n    </EditorContext.Provider>\n  )\n}\n\n/**\n * @public\n */\nexport function useEditor() {\n  const editor = React.useContext(EditorContext)\n\n  if (!editor) {\n    throw new Error('No Editor set. Use EditorProvider to set one.')\n  }\n\n  return editor\n}\n","import {useEffect} from 'react'\nimport {useEffectEvent} from 'use-effect-event'\nimport type {EditorEmittedEvent} from './editor-machine'\nimport {useEditor} from './editor-provider'\n\n/**\n * @public\n */\nexport function EditorEventListener(props: {\n  on: (event: EditorEmittedEvent) => void\n}) {\n  const editor = useEditor()\n  const on = useEffectEvent(props.on)\n\n  useEffect(() => {\n    const subscription = editor.on('*', on)\n\n    return () => {\n      subscription.unsubscribe()\n    }\n  }, [editor, on])\n\n  return null\n}\n"],"names":["createEditorSchema","portableTextType","Error","blockType","of","find","findBlockType","childrenField","fields","field","name","ofType","type","spanType","memberType","inlineObjectTypes","filter","blockObjectTypes","styles","resolveEnabledStyles","decorators","resolveEnabledDecorators","lists","resolveEnabledListItems","block","span","portableText","inlineObjects","blockObjects","annotations","styleField","btField","textStyles","options","list","style","value","length","listField","listItems","defineSchema","definition","compileSchemaDefinition","map","blockObject","defineType","title","inlineObject","portableTextSchema","defineField","marks","decorator","startCase","annotation","schema","SanitySchema","compile","types","get","pteSchema","rootName","debug","debugWithName","namespace","enabled","createKeyedPath","point","blockPath","path","keyedBlockPath","_key","_type","keyedChildPath","childPath","slice","child","Array","isArray","children","toSlatePath","editor","from","Editor","nodes","at","match","n","isKeySegment","undefined","Element","isElement","isVoid","childIndex","findIndex","isEqual","concat","toPortableTextRange","range","anchor","focus","anchorPath","offset","focusPath","backward","Boolean","Range","isRange","isBackward","toSlateRange","selection","moveRangeByOperation","operation","Point","transform","equals","normalizePoint","newPath","newOffset","blockKey","childKey","blk","push","cld","text","normalizeSelection","newAnchor","newFocus","EMPTY_MARKDEFS","VOID_CHILD_KEY","keepObjectEquality","object","keyMap","toSlateValue","schemaTypes","rest","voidChildren","textBlock","hasInlines","hasMissingStyle","hasMissingMarkDefs","markDefs","hasMissingChildren","cType","cKey","cRest","__inline","fromSlateValue","textBlockType","_cType","v","k","t","_i","_c","blockValue","isEqualToEmptyEditor","Text","isText","join","IS_PROCESSING_REMOTE_CHANGES","WeakMap","IS_DRAGGING","IS_DRAGGING_BLOCK_ELEMENT","IS_DRAGGING_ELEMENT_TARGET","IS_DRAGGING_BLOCK_TARGET_POSITION","KEY_TO_SLATE_ELEMENT","KEY_TO_VALUE_ELEMENT","SLATE_TO_PORTABLE_TEXT_RANGE","DefaultObject","props","$","t0","JSON","stringify","t1","displayName","DefaultBlockObject","styled","div","selected","DefaultListItem","getLeftPositionForListLevel","listLevel","getContentForListLevelAndStyle","listStyle","getCounterIncrementForListLevel","getCounterResetForListLevel","getCounterContentForListLevel","DefaultListItemInner","level","Number","bullets","normalizedLevel","DraggableBlock","element","readOnly","blockRef","useSlateStatic","dragGhostRef","useRef","isDragOver","setIsDragOver","useState","t2","t3","t4","isInline","blockElement","setBlockElement","t5","t6","current","ReactEditor","toDOMNode","useEffect","t7","event","isMyDragOver","preventDefault","dataTransfer","dropEffect","set","elementRect","getBoundingClientRect","top","height","Y","pageY","loc","Math","abs","handleDragOver","t8","Symbol","for","handleDragLeave","t9","event_0","targetBlock","stopPropagation","delete","document","body","removeChild","dragPosition","targetPath","findPath","myPath","isBefore","Path","originalPath","originalPath_0","Transforms","moveNodes","to","onChange","handleDragEnd","t10","event_1","handleDrop","t11","event_2","target","HTMLElement","opacity","handleDrag","t12","event_3","setData","effectAllowed","dragGhost","cloneNode","customGhost","querySelector","setAttribute","position","left","boxSizing","appendChild","rect","x","clientX","y","clientY","width","setDragImage","handleDragStart","t13","isDraggingOverFirstBlock","t14","isDraggingOverLastBlock","dragPosition_0","isDraggingOverTop","isDraggingOverBottom","t15","t16","borderBottom","zIndex","dropIndicator","t17","t18","t19","EMPTY_ANNOTATIONS","inlineBlockStyle","display","attributes","renderBlock","renderChild","renderListItem","renderStyle","spellCheck","useSelected","inlineBlockObjectRef","focused","isCollapsed","useMemo","renderedBlock","className","node","depth","schemaType","SlateElement","elmPath","debugRenders","ObjectNode","editorElementRef","isListItem","blockStyleType","item","listItem","isListBlock","listType","renderProps","Object","defineProperty","enumerable","warn","propsOrDefaultRendered","renderedBlockFromProps","_props","PortableTextEditorContext","createContext","usePortableTextEditor","useContext","DefaultAnnotation","alert","handleClick","color","compileType","rawType","Schema","FLUSH_PATCHES_THROTTLED_MS","process","env","NODE_ENV","mutationMachine","setup","context","events","input","emitted","actions","emit","patches","pendingPatches","snapshot","slateEditor","assign","patch","guards","slate is normalizing","isNormalizing","createMachine","id","initial","states","on","after","guard","reenter","validateValue","keyGenerator","resolution","valid","validChildTypes","validBlockTypes","unset","description","action","i18n","some","index","isPlainObject","String","values","includes","currentBlockTypeName","key","expectedTypeName","isPortableTextTextBlock","typeName","newSpan","autoResolve","setIfMissing","insert","allUsedMarks","uniq","flatten","unusedMarkDefs","def","markDefKey","m","toString","orphanedMarks","mark","dec","spanChildren","orphaned","cMrk","cIndex","newChild","childType","withRemoteChanges","fn","prev","isChangingRemotely","PATCHING","withoutPatching","isPatching","cloneDiff","diff2","IS_UDOING","IS_REDOING","withUndoing","isUndoing","setIsUndoing","withRedoing","isRedoing","setIsRedoing","debugVerbose","SAVING","REMOTE_PATCHES","UNDO_STEP_LIMIT","isSaving","state","getRemotePatches","createWithUndoRedo","editorActor","blockSchemaType","previousSnapshot","remotePatches","subscriptions","sub","reset","forEach","origin","history","undos","redos","splice","time","Date","unsubscribe","apply","op","getSnapshot","matches","operations","step","lastOp","overwrite","shouldOverwrite","save","merge","shouldMerge","newStep","createSelectOperation","timestamp","shift","shouldClear","undo","otherPatches","transformedOperations","transformOperation","reversedOperations","Operation","inverse","reverse","withoutNormalizing","withoutSaving","normalize","err","deselect","pop","redo","transformedOperation","insertBlockIndex","items","adjustBlockPath","unsetBlockIndex","operationTargetBlock","findOperationTargetBlock","parsePatch","diffPatch","adjustOffsetBy","changedOffset","utf8Start1","diffs","diff","diffType","DIFF_INSERT","DIFF_DELETE","DIFF_EQUAL","every","dType","currentFocus","properties","currentAnchor","newProperties","blockIndex","syncValueCallback","sendBack","streamBlocks","syncValueLogic","fromCallback","syncMachine","initialValueSynced","assertEvent","pendingValue","previousValue","initial value synced","is busy","isProcessingLocalChanges","value changed while syncing","pending value equals previous value","actors","always","entry","idle","busy","syncing","invoke","src","updateValue","isChanged","isValid","hadSelection","childrenLength","_","removeNodes","insertNodes","pteCreateTextBlock","select","slateValueFromProps","Promise","resolve","i","currentBlock","currentBlockIndex","getBlocks","slateValue","blockChanged","blockValid","syncBlock","error","setTimeout","oldBlock","hasChanges","validationValue","validation","console","_updateBlock","_replaceBlock","currentSelection","selectionFocusOnBlock","setNodes","isTextBlock","oldBlockChildrenLength","currentBlockChild","currentBlockChildIndex","oldBlockChild","isChildChanged","isTextChanged","isSpanNode","insertText","voids","Synchronizer","useSelector","_temp","_temp2","syncActorRef","useActorRef","mutationActorRef","subscription","send","subscription_0","s_0","s","createOperationToPatches","textBlockName","insertTextPatch","beforeValue","textChild","isTextSpan","prevBlock","prevChild","prevText","diffMatchPatch","removeTextPatch","beforeBlock","prevTextChild","setNodePatch","setNode","omitBy","isUndefined","keys","keyName","val","indexOf","insertNodePatch","targetKey","splitNodePatch","splitBlock","targetValue","splitSpan","targetSpans","removeNodePatch","spanToRemove","mergeNodePatch","updatedBlock","newBlock","updatedSpan","removedSpan","moveNodePatch","targetChild","childToInsert","createWithEventListeners","maxBlocks","behaviorEvent","placement","addMark","removeMark","deleteBackward","unit","deleteForward","insertBreak","insertSoftBreak","createWithMaxBlocks","rows","createWithObjectKeys","normalizeNode","isEditor","Node","createApplyPatch","changed","insertPatch","unsetPatch","setPatch","findBlockAndChildFromPath","newValue","diffMatchPatchApplyPatches","allowExceedingIndices","cleanupEfficiency","makeDiff","debugState","targetBlockPath","targetChildPath","blocksToInsert","targetBlockIndex","normalizedIdx","childrenToInsert","targetChildIndex","childInsertPath","newText","nextRest","prevChildren","prevRest","c","newVal","applyAll","previousSelection","_child","isKeyedSegment","segment","stateName","findBlockFromPath","isMatch","createWithPatches","patchFunctions","previousChildren","applyPatch","bufferedPatches","handleBufferedRemotePatches","handlePatches","p","editorWasEmpty","editorIsEmpty","createWithPlaceholderBlock","nextPath","next","insertNode","createWithPortableTextBlockStyle","defaultStyle","nodeEntry","SlateText","isPortableTextSpan","isPortableTextBlock","getPreviousSpan","spanPath","previousSpan","getNextSpan","nextSpan","isAfter","createWithPortableTextMarkModel","nextNode","mergeNodes","parent","orphanedAnnotations","markDefKeys","Set","newMarkDefs","markDef","has","add","previousSelectionIsCollapsed","newSelectionIsCollapsed","focusSpan","mode","newFocusSpan","movedToNextSpan","movedToPreviousSpan","_block","previousSpanAnnotations","nextSpanAnnotations","annotationsEnding","atTheEndOfAnnotation","annotationsStarting","atTheStartOfAnnotation","nextSpanDecorators","collapsedSelection","marksWithoutAnnotations","spanHasAnnotations","spanIsEmpty","atTheBeginningOfSpan","atTheEndOfSpan","spanAnnotations","previousSpanHasAnnotations","previousSpanHasSameAnnotations","previousSpanHasSameAnnotation","previousSpanHasSameMarks","nextSpanSharesSomeAnnotations","isExpanded","deletingFromTheEnd","deletingAllText","nextSpanHasSameAnnotation","marksWithoutAnnotationMarks","oldDefs","addDecoratorActionImplementation","split","hanging","splitTextNodes","eMark","lonelyEmptySpan","existingMarks","existingMarksWithoutDecorator","existingMark","removeDecoratorActionImplementation","isDecoratorActive","selectedTextNodes","toggleDecoratorActionImplementation","createWithPortableTextSelections","prevSelection","emitPortableTextSelection","ptRange","existing","createWithSchemaTypes","isPortableTextListBlock","obj","createWithUtils","pteExpandToWord","textNode","focusOffset","charsBefore","charsAfter","isEmpty","str","whiteSpaceBeforeIndex","newStartOffset","whiteSpaceAfterIndex","newEndOffset","isNaN","setSelection","withPlugins","e","operationToPatches","withObjectKeys","withSchemaTypes","withPatches","withMaxBlocks","withUndoRedo","withPortableTextMarkModel","withPortableTextBlockStyle","withPlaceholderBlock","withUtils","withPortableTextSelections","slateEditors","createSlateEditor","config","existingSlateEditor","unsubscriptions","instance","withReact","createEditor","initialValue","toggleListItemActionImplementation","isListItemActive","removeListItemActionImplementation","addListItemActionImplementation","createGuards","selectedBlocks","unsetNodes","toggleStyleActionImplementation","isStyleActive","removeStyleActionImplementation","addStyleActionImplementation","createEditableAPI","blur","toggleMark","toggleList","toggleBlockStyle","isMarkActive","slateSelection","focusBlock","descendant","focusChild","insertChild","focusChildPath","focusNode","move","distance","insertBlock","hasBlockStyle","hasListStyle","findByPath","slatePath","ptBlock","ptChild","findDOMNode","activeAnnotations","spans","isAnnotationActive","annotationType","addAnnotation","paths","addAnnotationActionImplementation","removeAnnotation","getSelection","getValue","isCollapsedSelection","isExpandedSelection","getFragment","isSelectionsOverlapping","selectionA","selectionB","rangeA","rangeB","selectionMarkDefs","reduce","accMarkDefs","markKey","originalSelection","markDefPath","markDefPaths","annotationKey","unshift","existingSameTypeAnnotations","removeAnnotationActionImplementation","potentialAnnotations","selectedChild","selectedChildPath","annotationToRemove","previousSpansWithSameAnnotation","SlatePath","nextSpansWithSameAnnotation","blocks","marksWithoutAnnotation","toggleAnnotationActionImplementation","focusBlockPath","lastBlock","insertBlockObjectActionImplementation","insertBreakActionImplementation","focusDecorators","focusAnnotations","anchorBlockPath","start","end","edges","lastFocusBlockChild","atTheEndOfBlock","atTheStartOfBlock","nextBlockPath","selectionAcrossBlocks","splitNodes","nextNodePath","newMarkDefKeys","Map","prevNodeSpans","prevNodeSpan","newMarks","insertSoftBreakActionImplementation","insertInlineObjectActionImplementation","focusTextBlock","insertSpanActionImplementation","textBlockSetActionImplementation","textBlockUnsetActionImplementation","behaviorActionImplementations","delete.backward","delete.forward","delete.block","delete.text","blockOffsetToSpanSelectionPoint","blockOffset","insert.text","insert.text block","effect","move.block","move.block down","move.block up","hasPrevious","previous","noop","newSelection","select.previous block","previousBlockPath","select.next block","reselect","performAction","performDefaultAction","getActiveDecorators","slateEditorInstance","editorMachine","behaviors","pendingEvents","enqueueActions","enqueue","defaultAction","eventBehaviors","behavior","editorContext","activeDecorators","behaviorOverwritten","eventBehavior","shouldRun","actionIntendSets","actionSet","actionIntends","actionIntend","raise","nativeEvent","coreBehaviors","initialReadOnly","exit","normalizing","mutation","editorActorSnapshot","defaultCompare","a","b","useEditorSelector","selector","compare","_internal","getEditorSnapshot","defaultKeyGenerator","randomKey","getByteHexTable","table","whatwgRNG","rnds8","Uint8Array","getRandomValues","createActor","editorConfigToMachineInput","createEditorFromActor","useCreateEditor","schemaDefinition","hasOwnProperty","editable","listener","EditorActorContext","PortableTextEditorSelectionContext","usePortableTextEditorSelection","PortableTextEditorSelectionProvider","startTransition","PortableTextEditor","Component","change$","Subject","constructor","parseInt","componentDidUpdate","prevProps","editorRef","setEditable","render","legacyPatches","incomingPatches$","patches$","change","blockStyle","isObjectPath","_editor","isChildObjectEditPath","RoutePatchesObservableToEditorActor","subscribe","payload","RouteEventsToChanges","handleChange","useEffectEvent","bb5","isLoading","EMPTY_MARKS","Leaf","leaf","renderDecorator","renderAnnotation","spanRef","portableTextEditor","blockSelected","setFocused","setSelected","decoratorValues","annotationMarks","shouldTrackSelectionAndFocus","sel","setSelectedFromRange","useCallback","winSelection","window","rangeCount","getRangeAt","intersectsNode","onBlur","onFocus","onSelection","content","returnedChildren","DEFAULT_HOTKEYS","custom","createWithHotkeys","hotkeysFromOptions","reservedHotkeys","activeHotkeys","pteWithHotKeys","cat","hotkey","isHotkey","possibleMark","possibleCommand","command","createWithInsertData","blockTypeName","spanTypeName","whitespaceOnPasteMode","unstable_whitespaceOnPasteMode","toPlainText","setFragmentData","data","originEvent","startVoid","void","endVoid","domRange","toDOMRange","contents","cloneContents","voidNode","r","cloneRange","domNode","setEndAfter","querySelectorAll","zw","isNewline","getAttribute","textContent","elm","removeAttribute","hasAttribute","ownerDocument","createElement","asHTML","innerHTML","fragment","asJSON","asPlainText","clearData","insertPortableTextData","pText","getData","parsed","parse","_regenerateKeys","errorDescription","insertTextOrHTMLData","html","insertedType","htmlToBlocks","normalizeBlock","textToHtml","escapeHtml","line","replace","_insertFragment","insertData","insertFragmentData","insertFragment","entityMap","editorTypes","newNode","NewNodeNoDefs","allowedAnnotations","oldKey","newKey","nodeWithNewKeys","withSyncRangeDecorations","syncRangeDecorations","originalApply","PLACEHOLDER_STYLE","userSelect","pointerEvents","right","PortableTextEditable","forwardRef","forwardedRef","hotkeys","onBeforeInput","onPaste","onCopy","onClick","rangeDecorations","renderPlaceholder","propsSelection","scrollSelectionIntoView","restProps","ref","editableElement","setEditableElement","hasInvalidValue","setHasInvalidValue","rangeDecorationState","setRangeDecorationsState","rangeDecorationsRef","useSlate","withInsertData","withHotKeys","renderElement","eProps","renderLeaf","lProps","rendered","placeholder","decoration","rangeDecoration","component","restoreSelectionFromProps","normalizedSelection","slateRange","o","newSlateRanges","rangeDecorationItem","SlateRange","onMoved","newRange","newRangeSelection","onReady","onInvalidValue","onValueChanged","syncedRangeDecorations","setSyncedRangeDecorations","teardown","handleCopy","clipboardData","handlePaste","onPasteResult","then","result","catch","finally","handleOnFocus","isDefaultPrevented","lastNodePath","last","lastBlockPath","lastNodeFocused","lastBlockIsVoid","handleOnBlur","isPropagationStopped","handleOnBeforeInput","validateSelection","root","findDocumentOrShadowRoot","activeElement","domSelection","getWindow","existingDOMRange","newDOMRange","startOffset","endOffset","removeAllRanges","addRange","mutationObserver","MutationObserver","observe","attributeOldValue","characterData","childList","subtree","disconnect","handleKeyDown","onKeyDown","keyboardEvent","code","altKey","ctrlKey","metaKey","shiftKey","handleKeyUp","onKeyUp","scrollSelectionIntoViewToSlate","decorate","intersection","SlateEditable","EditorContext","React","EditorProvider","initialConfig","useEditor","EditorEventListener"],"mappings":"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","x_google_ignoreList":[19,32]}