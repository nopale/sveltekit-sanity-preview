{"version":3,"file":"router.esm.js","sources":["../src/router/useRouter.ts","../src/router/useLink.ts","../src/router/useIntentLink.ts","../src/router/IntentLink.tsx","../src/router/Link.tsx","../src/router/_parseRoute.ts","../src/router/utils/arrayify.ts","../src/router/_findMatchingRoutes.ts","../src/router/encodeURIComponentExcept.ts","../src/router/utils/debug.ts","../src/router/_resolvePathFromState.ts","../src/router/utils/parseScopedParams.ts","../src/router/_resolveStateFromPath.ts","../src/router/utils/base64url.ts","../src/router/utils/jsonParamsEncoding.ts","../src/router/utils/paramsEncoding.ts","../src/router/route.ts","../src/router/RouterProvider.tsx","../src/router/RouteScope.tsx","../src/router/useStateLink.ts","../src/router/StateLink.tsx","../src/router/useRouterState.ts","../src/router/withRouter.tsx"],"sourcesContent":["import {useContext} from 'react'\nimport {RouterContext} from 'sanity/_singletons'\n\nimport {type RouterContextValue} from './types'\n\n/**\n * Returns the router context value.\n * @public\n *\n * @returns The router context value.\n *  {@link RouterContextValue}\n * @throws An error if the router context value is missing.\n *\n * @example\n * ```tsx\n * const router = useRouter()\n * ```\n */\nexport function useRouter(): RouterContextValue {\n  const router = useContext(RouterContext)\n\n  if (!router) {\n    throw new Error('Router: missing context value')\n  }\n\n  return router\n}\n","import {useCallback} from 'react'\n\nimport {useRouter} from './useRouter'\n\nfunction isLeftClickEvent(event: React.MouseEvent) {\n  return event.button === 0\n}\n\nfunction isModifiedEvent(event: React.MouseEvent) {\n  return !!(event.metaKey || event.altKey || event.ctrlKey || event.shiftKey)\n}\n\n/**\n * @public\n */\nexport interface UseLinkOptions {\n  /**\n   * The URL that the link should navigate to.\n   */\n  href?: string\n\n  /**\n   * The event handler function that should be called when the link is clicked.\n   */\n  onClick?: React.MouseEventHandler<HTMLElement>\n\n  /**\n   * Whether the link should replace the current URL in the browser history.\n   */\n  replace?: boolean\n\n  /**\n   * The target window or frame that the linked document will open in.\n   */\n  target?: string\n}\n\n/**\n * Returns an object with an `onClick` function that can be used as a click handler for a link.\n *\n * @public\n *\n * @param options - An object containing the properties for the link.\n *  See {@link UseLinkOptions}\n *\n * @returns An object with an `onClick` function.\n *\n * @example\n * ```tsx\n * const linkProps = useLink({\n *  href: 'https://www.sanity.io',\n *  target: '_blank'\n * })\n *\n * <a {...linkProps}>Link</a>\n * ```\n */\nexport function useLink(options: UseLinkOptions): {onClick: React.MouseEventHandler<HTMLElement>} {\n  const {onClick: onClickProp, href, target, replace = false} = options\n  const {navigateUrl} = useRouter()\n\n  const onClick = useCallback(\n    (event: React.MouseEvent<HTMLElement>): void => {\n      if (event.isDefaultPrevented()) {\n        return\n      }\n\n      if (!href) return\n\n      if (onClickProp) {\n        onClickProp(event)\n      }\n\n      if (isModifiedEvent(event) || !isLeftClickEvent(event)) {\n        return\n      }\n\n      // If target prop is set (e.g. to \"_blank\") let browser handle link.\n      if (target) {\n        return\n      }\n\n      event.preventDefault()\n\n      navigateUrl({path: href, replace})\n    },\n    [href, navigateUrl, onClickProp, replace, target],\n  )\n\n  return {onClick: onClick}\n}\n","import {useMemo} from 'react'\n\nimport {type IntentParameters, type SearchParam} from './types'\nimport {useLink} from './useLink'\nimport {useRouter} from './useRouter'\n\n/**\n * @public\n */\nexport interface UseIntentLinkOptions {\n  /**\n   * The name of the intent to trigger.\n   */\n  intent: string\n\n  /**\n   * An optional click event handler.\n   */\n  onClick?: React.MouseEventHandler<HTMLElement>\n\n  /**\n   * Optional parameters to pass to the intent. See {@link IntentParameters}\n   */\n  params?: IntentParameters\n\n  /**\n   * Whether to replace the current URL in the browser history.\n   */\n  replace?: boolean\n\n  /**\n   * The target window or frame to open the link in.\n   */\n  target?: string\n  searchParams?: SearchParam[]\n}\n\n/**\n *\n * Returns props for an anchor element that will trigger an intent when clicked.\n *\n * @example\n * ```tsx\n * const {onClick, href} = useIntentLink({\n *   intent: 'edit',\n *   params: {id: 'foo'}\n * })\n *\n * <a href={href} onClick={onClick}>Link to \"foo\" editor</a>\n * ```\n *\n * @public\n *\n * @param options - Options to use for the link\n *  {@link UseIntentLinkOptions}\n *\n * @returns - An object with `onClick` and `href` props to use for the link\n */\nexport function useIntentLink(options: UseIntentLinkOptions): {\n  onClick: React.MouseEventHandler<HTMLElement>\n  href: string\n} {\n  const {intent, onClick: onClickProp, params, replace, target, searchParams} = options\n  const {resolveIntentLink} = useRouter()\n  const href = useMemo(\n    () => resolveIntentLink(intent, params, searchParams),\n    [intent, params, searchParams, resolveIntentLink],\n  )\n  const {onClick} = useLink({href, onClick: onClickProp, replace, target})\n\n  return {onClick, href}\n}\n","import {type ForwardedRef, forwardRef, type HTMLProps} from 'react'\n\nimport {type IntentParameters, type SearchParam} from './types'\nimport {useIntentLink} from './useIntentLink'\n\n/**\n * Props for the {@link IntentLink} component.\n *\n * @public\n */\nexport interface IntentLinkProps {\n  /**\n   * The name of the intent.\n   */\n  intent: string\n\n  /**\n   * The parameters to include in the intent.\n   * {@link IntentParameters}\n   */\n  params?: IntentParameters\n\n  /**\n   * Whether to replace the current URL in the browser history instead of adding a new entry.\n   */\n  replace?: boolean\n\n  /**\n   * search params to include in the intent.\n   */\n  searchParams?: SearchParam[]\n}\n\n/**\n * @public\n *\n * @param props - Props to pass to `IntentLink` component.\n *  See {@link IntentLinkProps}\n *\n * @example\n * ```tsx\n * function MyComponent() {\n *  return <IntentLink intent=\"edit\" params={{id: 'abc123'}}>Edit</IntentLink>\n * }\n * ```\n */\nexport const IntentLink = forwardRef(function IntentLink(\n  props: IntentLinkProps & HTMLProps<HTMLAnchorElement>,\n  ref: ForwardedRef<HTMLAnchorElement>,\n) {\n  const {intent, params, target, searchParams, ...restProps} = props\n  const {onClick, href} = useIntentLink({\n    intent,\n    params,\n    target,\n    onClick: props.onClick,\n    searchParams,\n  })\n\n  return <a {...restProps} href={href} onClick={onClick} ref={ref} target={target} />\n})\n","import {type ForwardedRef, forwardRef, type HTMLProps} from 'react'\n\nimport {useLink} from './useLink'\n\n/**\n * Props for the {@link Link} component.\n *\n * @public\n */\nexport interface LinkProps {\n  /**\n   * Whether to replace the current URL in the browser history instead of adding a new entry.\n   */\n  replace?: boolean\n}\n\n/**\n * A component that creates an HTML anchor element.\n *\n * @public\n *\n * @param props - Props to pass to the `Link` component.\n *  See {@link LinkProps}\n *\n * @example\n * ```tsx\n * function MyComponent() {\n *   return (\n *    <Link href=\"https://www.sanity.io\" target=\"_blank\" replace>\n *      Go to Sanity\n *    </Link>\n *   )\n * }\n * ```\n */\nexport const Link = forwardRef(function Link(\n  props: LinkProps & HTMLProps<HTMLAnchorElement>,\n  ref: ForwardedRef<HTMLAnchorElement>,\n) {\n  const {onClick: onClickProp, href, target, replace, ...restProps} = props\n  const {onClick} = useLink({onClick: onClickProp, href, target, replace})\n\n  return <a {...restProps} onClick={onClick} href={href} target={target} ref={ref} />\n})\n","import {type Route, type RouteSegment} from './types'\n\nconst VALID_PARAM_SEGMENT = /^[a-zA-Z0-9_-]+$/\n\nfunction createSegment(segment: string): RouteSegment | null {\n  if (!segment) {\n    return null\n  }\n\n  if (segment.startsWith(':')) {\n    const paramName = segment.slice(1)\n\n    if (!VALID_PARAM_SEGMENT.test(paramName)) {\n      const addendum = segment.includes('*')\n        ? ' Splats are not supported. Consider using child routes instead'\n        : ''\n      // eslint-disable-next-line no-console\n      console.error(\n        new Error(`Warning: Param segments \"${segment}\" includes invalid characters.${addendum}`),\n      )\n    }\n\n    return {type: 'param', name: paramName}\n  }\n\n  return {type: 'dir', name: segment}\n}\n\n/** @internal */\nexport function _parseRoute(route: string): Route {\n  const [pathname] = route.split('?')\n\n  const segments = pathname.split('/').map(createSegment).filter(Boolean) as RouteSegment[]\n\n  return {\n    raw: route,\n    segments: segments,\n  }\n}\n","export function arrayify<T>(val: Array<T> | T): Array<T> {\n  if (Array.isArray(val)) {\n    return val\n  }\n\n  return val ? [val] : []\n}\n","import {difference, intersection, isPlainObject, pick} from 'lodash'\n\nimport {\n  type InternalSearchParam,\n  type MatchError,\n  type MatchOk,\n  type MatchResult,\n  type RouterNode,\n  type RouterState,\n} from './types'\nimport {arrayify} from './utils/arrayify'\n\nfunction isRecord(value: unknown): value is Record<string, unknown> {\n  return isPlainObject(value)\n}\n\nfunction createMatchError(\n  node: RouterNode,\n  missingKeys: string[],\n  unmappableStateKeys: string[],\n): MatchError {\n  return {type: 'error', node, missingKeys, unmappableStateKeys}\n}\n\nfunction createMatchOk(\n  node: RouterNode,\n  matchedState: Record<string, string>,\n  searchParams: InternalSearchParam[],\n  child?: MatchOk | undefined,\n): MatchOk {\n  return {type: 'ok', node, matchedState, searchParams, child}\n}\n\n/** @internal */\nexport function _findMatchingRoutes(node: RouterNode, _state?: RouterState): MatchResult {\n  if (!_state) {\n    return createMatchOk(node, {}, [])\n  }\n\n  const scopedState = node.scope ? (_state[node.scope] as RouterState) : _state\n\n  const {_searchParams: searchParams = [], ...state} = scopedState || {}\n\n  const requiredParams = node.route.segments\n    .filter((seg) => seg.type === 'param')\n    .map((seg) => seg.name)\n\n  const stateKeys = isRecord(state) ? Object.keys(state) : []\n\n  // These are params found in both the state and the route definition\n  const consumedParams = intersection(stateKeys, requiredParams)\n\n  // these are params found in the route definition but not in the state, can't map them to a route\n  const missingParams = difference(requiredParams, consumedParams)\n\n  // these are params found in the state but not in the route definition\n  const remainingParams = difference(stateKeys, consumedParams)\n\n  if (missingParams.length > 0) {\n    return createMatchError(node, missingParams, [])\n  }\n\n  const scopedParams = searchParams.map(([key, value]): InternalSearchParam => [[key], value])\n\n  const consumedState = pick(state, consumedParams) as Record<string, string>\n\n  if (remainingParams.length === 0) {\n    return createMatchOk(node, consumedState, scopedParams)\n  }\n\n  const children = arrayify(\n    (typeof node.children === 'function'\n      ? node.children(isRecord(state) ? state : {})\n      : node.children) || [],\n  )\n\n  if (remainingParams.length > 0 && children.length === 0) {\n    // our state includes extra keys that's not consumed by child routes\n    return createMatchError(node, [], remainingParams)\n  }\n\n  const remainingState = pick(state, remainingParams)\n\n  const childResult = children.map((childNode) => _findMatchingRoutes(childNode, remainingState))\n\n  // Look for a matching route\n  const found = childResult.find((res): res is MatchOk => res.type === 'ok')\n  return found\n    ? createMatchOk(node, consumedState, scopedParams, found)\n    : createMatchError(node, [], remainingParams)\n}\n","/**\n * Like encodeURIComponent, but supports a custom set of unescaped characters.\n * @param uriComponent - A value representing an unencoded URI component.\n * @param unescaped - a string containing characters to not escape\n */\nexport function encodeURIComponentExcept(\n  uriComponent: string | number | boolean,\n  unescaped: string,\n): string {\n  const chars = [...String(uriComponent)]\n  let res = ''\n  for (let i = 0; i < chars.length; i++) {\n    const char = chars[i]\n    if (unescaped.includes(char)) {\n      res += char\n    } else {\n      res += encodeURIComponent(char)\n    }\n  }\n  return res\n}\n","import Debug from 'debug'\n\nexport const debug = Debug('state-router')\n","import {_findMatchingRoutes} from './_findMatchingRoutes'\nimport {encodeURIComponentExcept} from './encodeURIComponentExcept'\nimport {type InternalSearchParam, type MatchOk, type RouterNode, type RouterState} from './types'\nimport {debug} from './utils/debug'\n\n/** @internal */\nexport function _resolvePathFromState(node: RouterNode, _state: RouterState): string {\n  debug('Resolving path from state %o', _state)\n\n  const match = _findMatchingRoutes(node, _state)\n  if (match.type === 'error') {\n    const unmappable = match.unmappableStateKeys\n    if (unmappable.length > 0) {\n      throw new Error(\n        `Unable to find matching route for state. Could not map the following state key${\n          unmappable.length == 1 ? '' : 's'\n        } to a valid url: ${unmappable.map(quote).join(', ')}`,\n      )\n    }\n    const missingKeys = match.missingKeys\n    throw new Error(\n      `Unable to find matching route for state. State object is missing the following key${\n        missingKeys.length == 1 ? '' : 's'\n      } defined in route: ${missingKeys.map(quote).join(', ')}`,\n    )\n  }\n\n  const {path, searchParams} = pathFromMatchResult(match)\n\n  const search = searchParams.length > 0 ? encodeParams(searchParams) : ''\n\n  return `/${path.join('/')}${search ? `?${search}` : ''}`\n}\n\nfunction bracketify(value: string): string {\n  return `[${value}]`\n}\n\nfunction encodeParams(params: InternalSearchParam[]): string {\n  return params\n    .flatMap(([key, value]) => {\n      if (value === undefined) {\n        return []\n      }\n      return [encodeSearchParamKey(serializeScopedPath(key)), encodeSearchParamValue(value)].join(\n        '=',\n      )\n    })\n    .join('&')\n}\n\nfunction serializeScopedPath(scopedPath: string[]): string {\n  const [head, ...tail] = scopedPath\n\n  return tail.length > 0 ? [head, ...tail.map(bracketify)].join('') : head\n}\n\nfunction encodeSearchParamValue(value: string): string {\n  return encodeURIComponentExcept(value, '/')\n}\n\nfunction encodeSearchParamKey(value: string): string {\n  return encodeURIComponentExcept(value, '[]')\n}\n\nfunction pathFromMatchResult(match: MatchOk): {\n  path: string[]\n  searchParams: InternalSearchParam[]\n} {\n  const matchedState = match.matchedState\n\n  const base = match.node.route.segments.map((segment) => {\n    if (segment.type === 'dir') {\n      return segment.name\n    }\n\n    const transform = match.node.transform && match.node.transform[segment.name]\n\n    return transform\n      ? transform.toPath(matchedState[segment.name] as any)\n      : matchedState[segment.name]\n  })\n\n  const childMatch = match.child ? pathFromMatchResult(match.child) : undefined\n\n  const searchParams = childMatch?.searchParams\n    ? [...match.searchParams, ...childMatch.searchParams]\n    : match.searchParams\n\n  return {\n    searchParams: addNodeScope(match.node, searchParams),\n    path: [...(base || []), ...(childMatch?.path || [])],\n  }\n}\n\nfunction addNodeScope(\n  node: RouterNode,\n  searchParams: InternalSearchParam[],\n): InternalSearchParam[] {\n  const scope = node.scope\n  return scope && !node.__unsafe_disableScopedSearchParams\n    ? searchParams.map(([namespaces, value]) => [[scope, ...namespaces], value])\n    : searchParams\n}\n\nfunction quote(value: string): string {\n  return `\"${value}\"`\n}\n","import {type InternalSearchParam} from '../types'\n\nexport function parseScopedParams(params: [key: string, value: string][]): InternalSearchParam[] {\n  return params.map(([key, value]) => [parse(key), value])\n}\n\nconst OPEN = 1\nconst CLOSED = 0\n\nfunction parse(str: string) {\n  const result = []\n  let i = 0\n  let state = CLOSED\n  while (i < str.length) {\n    const nextBracketIdx = str.indexOf('[', i)\n    if (nextBracketIdx === -1) {\n      result.push(str.slice(i, str.length))\n      break\n    }\n    if (state === OPEN) {\n      throw new Error('Nested brackets not supported')\n    }\n    state = OPEN\n    if (nextBracketIdx > i) {\n      result.push(str.slice(i, nextBracketIdx))\n      i = nextBracketIdx\n    }\n\n    const nextClosing = str.indexOf(']', nextBracketIdx)\n    if (nextClosing === -1) {\n      if (state === OPEN) {\n        throw new Error('Unclosed bracket')\n      }\n      break\n    }\n    state = CLOSED\n    result.push(str.slice(i + 1, nextClosing))\n    i = nextClosing + 1\n  }\n  return result\n}\n","import {\n  type InternalSearchParam,\n  type RouterNode,\n  type RouterState,\n  type SearchParam,\n} from './types'\nimport {arrayify} from './utils/arrayify'\nimport {debug} from './utils/debug'\nimport {parseScopedParams} from './utils/parseScopedParams'\n\nfunction matchPath(\n  node: RouterNode,\n  path: string,\n  searchParams: InternalSearchParam[],\n): RouterState | null {\n  const parts = path.split('/').filter(Boolean)\n  const segmentsLength = node.route.segments.length\n\n  if (parts.length < segmentsLength) {\n    return null\n  }\n\n  const state: RouterState = {}\n  const isMatching = node.route.segments.every((segment, i) => {\n    if (segment.type === 'dir') {\n      return segment.name === parts[i]\n    }\n\n    const transform = node.transform && node.transform[segment.name]\n\n    state[segment.name] = transform ? transform.toState(parts[i]) : parts[i]\n\n    return true\n  })\n\n  if (!isMatching) {\n    return null\n  }\n\n  const rest = parts.slice(segmentsLength)\n\n  let childState: RouterState | null = null\n\n  const children =\n    typeof node.children === 'function' ? arrayify(node.children(state)) : node.children\n\n  const unscopedParams = removeScope(node.scope, searchParams)\n\n  children.some((childNode) => {\n    if (childNode) {\n      const childParams = childNode.scope\n        ? unscopedParams.filter(([namespaces]) => childNode.scope === namespaces[0])\n        : unscopedParams\n\n      childState = matchPath(childNode, rest.join('/'), childParams)\n      return childState\n    }\n    return undefined\n  })\n\n  if (rest.length > 0 && !childState) {\n    return null\n  }\n\n  const selfParams = unscopedParams.flatMap(([namespace, value]): SearchParam[] => {\n    return namespace.length === 1 ? [[namespace[0], value]] : []\n  })\n\n  const mergedState: RouterState = {\n    ...state,\n    ...(childState || {}),\n    ...(selfParams.length > 0 ? {_searchParams: selfParams} : {}),\n  }\n\n  return node.scope ? {[node.scope]: mergedState} : mergedState\n}\n\n/**\n * @internal\n */\nexport function _resolveStateFromPath(node: RouterNode, path: string): Record<string, any> | null {\n  debug('resolving state from path %s', path)\n\n  const [pathname, search] = path.split('?')\n  const urlSearchParams = Array.from(new URLSearchParams(search).entries())\n\n  const pathMatch = matchPath(node, pathname, parseScopedParams(urlSearchParams))\n\n  debug('resolved: %o', pathMatch || null)\n\n  return pathMatch || null\n}\n\nfunction removeScope(\n  scope: string | undefined,\n  searchParams: InternalSearchParam[],\n): InternalSearchParam[] {\n  return scope\n    ? searchParams.map(([namespaces, value]) => [\n        namespaces[0] === scope ? namespaces.slice(1) : namespaces,\n        value,\n      ])\n    : searchParams\n}\n","/**\n * `atob()` and `btoa()` do not support Unicode characters outside of the Latin1 range,\n * but we obviously want to support the full range of Unicode characters in our router.\n *\n * Additionally, we would prefer not to use characters like `+` and `=` in URLs, as they\n * have specific meanings there and may be misinterpreted. Thus, this uses base64url instead\n * of the more common base64.\n */\n\n/**\n * Encodes a string as base64url\n *\n * @param str - String to encode\n * @returns Encoded string\n * @internal\n */\nexport function encodeBase64Url(str: string): string {\n  return encodeBase64(str).replace(/\\//g, '_').replace(/\\+/g, '-').replace(/[=]+$/, '')\n}\n\n/**\n * Decodes a base64url-encoded string\n *\n * @param str - String to decode\n * @returns Decoded string\n * @internal\n */\nexport function decodeBase64Url(str: string): string {\n  return decodeBase64(str.replace(/-/g, '+').replace(/_/g, '/'))\n}\n\nfunction percentToByte(p: string) {\n  return String.fromCharCode(parseInt(p.slice(1), 16))\n}\n\nfunction encodeBase64(str: string): string {\n  return btoa(encodeURIComponent(str).replace(/%[0-9A-F]{2}/g, percentToByte))\n}\n\nfunction byteToPercent(b: string) {\n  return `%${`00${b.charCodeAt(0).toString(16)}`.slice(-2)}`\n}\n\nfunction decodeBase64(str: string): string {\n  return decodeURIComponent(Array.from(atob(str), byteToPercent).join(''))\n}\n","import {decodeBase64Url, encodeBase64Url} from './base64url'\n\n/**\n * Decode a path segment containing JSON parameters\n *\n * @param pathSegment - The path segment to decode\n * @returns The decoded parameters\n * @internal\n * @hidden\n */\nexport function decodeJsonParams(pathSegment = ''): Record<string, unknown> {\n  const segment = decodeURIComponent(pathSegment)\n\n  if (!segment) {\n    return {}\n  }\n\n  // Because of high-unicode characters (eg outside of the latin1 range), we prefer base64url\n  // since it also removes characters we'd rather not put in our URLs (eg '=' and '/')\n  try {\n    return JSON.parse(decodeBase64Url(segment))\n  } catch (err) {\n    // Fall-through: previously we used plain base64 encoding instead of base64url\n  }\n\n  try {\n    return JSON.parse(atob(segment))\n  } catch (err) {\n    // Fall-through: before _that_, we used plain URI encoding\n  }\n\n  try {\n    return JSON.parse(segment)\n  } catch (err) {\n    console.warn('Failed to parse JSON parameters')\n  }\n\n  return {}\n}\n\n/**\n * Encodes a set of parameters as a path segment, using base64url\n *\n * @param params - Paramters to encode\n * @returns The encoded parameters as a path segment\n * @internal\n * @hidden\n */\nexport function encodeJsonParams(params?: Record<string, unknown>): string {\n  return params ? encodeBase64Url(JSON.stringify(params)) : ''\n}\n","export function decodeParams(pathSegment: string): Record<string, string> {\n  return pathSegment.split(';').reduce<Record<string, string>>((params, pair) => {\n    const [key, value] = pair.split('=')\n\n    params[decodeURIComponent(key)] = decodeURIComponent(value)\n\n    return params\n  }, {})\n}\n\nexport function encodeParams(params: Record<string, string | undefined | null>): string {\n  return Object.entries(params)\n    .filter(([, value]) => value !== undefined && value !== null)\n    .map(([key, value]) => `${encodeURIComponent(key)}=${encodeURIComponent(value as string)}`)\n    .join(';')\n}\n","import {_parseRoute} from './_parseRoute'\nimport {_resolvePathFromState} from './_resolvePathFromState'\nimport {_resolveStateFromPath} from './_resolveStateFromPath'\nimport {type RouteChildren, type Router, type RouteTransform} from './types'\nimport {decodeJsonParams, encodeJsonParams} from './utils/jsonParamsEncoding'\nimport {decodeParams, encodeParams} from './utils/paramsEncoding'\n\n/**\n * @public\n */\nexport interface RouteNodeOptions {\n  /**\n   * The path of the route node.\n   */\n  path?: string\n  /**\n   * The children of the route node. See {@link RouteChildren}\n   */\n  children?: RouteChildren\n  /**\n   * The transforms to apply to the route node. See {@link RouteTransform}\n   */\n  transform?: {\n    [key: string]: RouteTransform<any>\n  }\n  /**\n   * The scope of the route node.\n   */\n  scope?: string\n\n  /**\n   * Optionally disable scoping of search params\n   * Scoped search params will be represented as scope[param]=value in the url\n   * Disabling this will still scope search params based on any parent scope unless the parent scope also has disabled search params scoping\n   * Caution: enabling this can cause conflicts with multiple plugins defining search params with the same name\n   */\n  __unsafe_disableScopedSearchParams?: boolean\n}\n\n/**\n * Interface for the {@link route} object.\n *\n * @public\n */\nexport interface RouteObject {\n  /**\n   * Creates a new router.\n   * Returns {@link Router}\n   * See {@link RouteNodeOptions} and {@link RouteChildren}\n   */\n  create: (\n    routeOrOpts: RouteNodeOptions | string,\n    childrenOrOpts?: RouteNodeOptions | RouteChildren | null,\n    children?: Router | RouteChildren,\n  ) => Router\n\n  /**\n   * Creates a new router for handling intents.\n   * Returns {@link Router}\n   */\n  intents: (base: string) => Router\n\n  /**\n   * Creates a new router scope.\n   * Returns {@link Router}\n   */\n  scope(\n    scopeName: string,\n    routeOrOpts: RouteNodeOptions | string,\n    childrenOrOpts?: RouteNodeOptions | RouteChildren | null,\n    children?: Router | RouteChildren,\n  ): Router\n}\n\n/**\n * An object containing functions for creating routers and router scopes.\n * See {@link RouteObject}\n *\n * @public\n *\n * @example\n * ```ts\n * const router = route.create({\n *   path: \"/foo\",\n *   children: [\n *     route.create({\n *       path: \"/bar\",\n *       children: [\n *         route.create({\n *           path: \"/:baz\",\n *           transform: {\n *             baz: {\n *               toState: (id) => ({ id }),\n *               toPath: (state) => state.id,\n *             },\n *           },\n *         }),\n *       ],\n *     }),\n *   ],\n * });\n * ```\n */\nexport const route: RouteObject = {\n  create: (routeOrOpts, childrenOrOpts, children) =>\n    _createNode(normalizeArgs(routeOrOpts, childrenOrOpts, children)),\n  intents: (base: string) => {\n    const basePath = normalize(base).join('/')\n\n    return route.create(`${basePath}/:intent`, [\n      route.create(\n        ':params',\n        {\n          transform: {\n            params: {\n              toState: decodeParams,\n              toPath: encodeParams,\n            },\n          },\n        },\n        [\n          route.create(':payload', {\n            transform: {\n              payload: {\n                toState: decodeJsonParams,\n                toPath: encodeJsonParams,\n              },\n            },\n          }),\n        ],\n      ),\n    ])\n  },\n  scope(\n    scopeName: string,\n    routeOrOpts: RouteNodeOptions | string,\n    childrenOrOpts?: RouteNodeOptions | RouteChildren | null,\n    children?: Router | RouteChildren,\n  ) {\n    const options = normalizeArgs(routeOrOpts, childrenOrOpts, children)\n\n    return _createNode({\n      ...options,\n      scope: scopeName,\n    })\n  },\n}\n\nfunction normalizeChildren(children: any): RouteChildren {\n  if (Array.isArray(children) || typeof children === 'function') {\n    return children\n  }\n  return children ? [children] : []\n}\n\nfunction isRoute(val?: RouteNodeOptions | Router | RouteChildren) {\n  return val && '_isRoute' in val\n}\n\nfunction normalizeArgs(...args: any[]): RouteNodeOptions\nfunction normalizeArgs(\n  path: string | RouteNodeOptions,\n  childrenOrOpts?: RouteNodeOptions | Router | RouteChildren,\n  children?: Router | RouteChildren,\n): RouteNodeOptions {\n  if (typeof path === 'object') {\n    return path\n  }\n\n  if (\n    Array.isArray(childrenOrOpts) ||\n    typeof childrenOrOpts === 'function' ||\n    isRoute(childrenOrOpts)\n  ) {\n    return {path, children: normalizeChildren(childrenOrOpts)}\n  }\n\n  if (children) {\n    return {path, ...childrenOrOpts, children: normalizeChildren(children)}\n  }\n\n  return {path, ...childrenOrOpts}\n}\n\nfunction normalize(...paths: string[]) {\n  return paths.reduce<string[]>((acc, path) => acc.concat(path.split('/')), []).filter(Boolean)\n}\n\nconst EMPTY_STATE = {}\n\nfunction isRoot(pathname: string): boolean {\n  // it is the root if every segment is an empty string\n  return pathname.split('/').every((segment) => !segment)\n}\n\n/**\n * @internal\n * @param options - Route node options\n */\nexport function _createNode(options: RouteNodeOptions): Router {\n  // eslint-disable-next-line camelcase\n  const {path, scope, transform, children, __unsafe_disableScopedSearchParams} = options\n\n  if (!path) {\n    throw new TypeError('Missing path')\n  }\n\n  const parsedRoute = _parseRoute(path)\n\n  return {\n    _isRoute: true, // todo: make a Router class instead\n    scope,\n    // eslint-disable-next-line camelcase\n    __unsafe_disableScopedSearchParams,\n    route: parsedRoute,\n    children: children || [],\n    transform,\n    encode(state) {\n      return _resolvePathFromState(this, state)\n    },\n    decode(_path) {\n      return _resolveStateFromPath(this, _path)\n    },\n    isRoot: isRoot,\n    isNotFound(pathname: string): boolean {\n      return this.decode(pathname) === null\n    },\n    getBasePath(): string {\n      return this.encode(EMPTY_STATE)\n    },\n    getRedirectBase(pathname: string): string | null {\n      if (isRoot(pathname)) {\n        const basePath = this.getBasePath()\n        // Check if basepath is something different than given\n        if (pathname !== basePath) {\n          return basePath\n        }\n      }\n      return null\n    },\n  }\n}\n","import {type ReactElement, type ReactNode, useCallback, useMemo} from 'react'\nimport {RouterContext} from 'sanity/_singletons'\n\nimport {\n  type IntentParameters,\n  type NavigateOptions,\n  type Router,\n  type RouterContextValue,\n  type RouterState,\n  type SearchParam,\n} from './types'\n\n/**\n * The props for the {@link RouterProvider} component.\n *\n * @public\n */\nexport interface RouterProviderProps {\n  /**\n   * A function that is called when the user navigates to a new path.\n   * Takes an object containing the path to navigate to and an optional `replace` flag.\n   */\n  onNavigate: (opts: {path: string; replace?: boolean}) => void\n  /**\n   * The router object that is used to handle navigation. See {@link Router}\n   */\n  router: Router\n  /**\n   * The current state of the router. See {@link RouterState}\n   */\n  state: RouterState\n  /**\n   * The child elements to render.\n   */\n  children: ReactNode\n}\n\n/**\n * @example\n * ```tsx\n * import {\n *   NavigateOptions,\n *   route,\n *   RouterProvider,\n *   RouterState\n * } from 'sanity'\n * import {useCallback, useMemo} from 'react'\n *\n * function Root() {\n *   const [router] = useState(() => route.create('/'))\n *\n *   const [state, setState] = useState<RouterState>({})\n *\n *   const handleNavigate = useCallback((\n *     path: string,\n *     options?: NavigateOptions\n *   ) => {\n *     console.log('navigate', path, options)\n *\n *     setState(router.decode(path))\n *   }, [router])\n *\n *   return (\n *     <RouterProvider\n *       onNavigate={handleNavigate}\n *       router={router}\n *       state={state}\n *     >\n *       <div>This is a routed application</div>\n *     </RouterProvider>\n *   )\n * }\n * ```\n *\n * @param props - The component props.\n *  {@link RouterProviderProps}\n *\n * @public\n */\nexport function RouterProvider(props: RouterProviderProps): ReactElement {\n  const {onNavigate, router: routerProp, state} = props\n\n  const resolveIntentLink = useCallback(\n    (intentName: string, parameters?: IntentParameters, _searchParams?: SearchParam[]): string => {\n      const [params, payload] = Array.isArray(parameters) ? parameters : [parameters]\n      return routerProp.encode({\n        intent: intentName,\n        params,\n        payload,\n        _searchParams,\n      })\n    },\n    [routerProp],\n  )\n\n  const resolvePathFromState = useCallback(\n    (nextState: Record<string, unknown>): string => {\n      return routerProp.encode(nextState)\n    },\n    [routerProp],\n  )\n\n  const navigate = useCallback(\n    (nextState: Record<string, unknown>, options: NavigateOptions = {}) => {\n      onNavigate({path: resolvePathFromState(nextState), replace: options.replace})\n    },\n    [onNavigate, resolvePathFromState],\n  )\n\n  const navigateIntent = useCallback(\n    (intentName: string, params?: IntentParameters, options: NavigateOptions = {}) => {\n      onNavigate({path: resolveIntentLink(intentName, params), replace: options.replace})\n    },\n    [onNavigate, resolveIntentLink],\n  )\n\n  const router: RouterContextValue = useMemo(\n    () => ({\n      navigate,\n      navigateIntent,\n      navigateUrl: onNavigate,\n      resolveIntentLink,\n      resolvePathFromState,\n      state,\n    }),\n    [navigate, navigateIntent, onNavigate, resolveIntentLink, resolvePathFromState, state],\n  )\n\n  return <RouterContext.Provider value={router}>{props.children}</RouterContext.Provider>\n}\n","/* eslint-disable camelcase */\nimport {type ReactElement, type ReactNode, useCallback, useEffect, useMemo, useRef} from 'react'\nimport {RouterContext} from 'sanity/_singletons'\n\nimport {type NavigateOptions, type RouterContextValue, type RouterState} from './types'\nimport {useRouter} from './useRouter'\n\nfunction addScope(\n  routerState: Record<string, any>,\n  scope: string,\n  scopedState: Record<string, any>,\n) {\n  return (\n    scopedState && {\n      ...routerState,\n      [scope]: scopedState,\n    }\n  )\n}\n\n/**\n * Props for the {@link RouteScope} component.\n *\n * @public\n */\nexport interface RouteScopeProps {\n  /**\n   * The scope for the nested routes.\n   */\n  scope: string\n\n  /**\n   * Optionally disable scoping of search params\n   * Scoped search params will be represented as scope[param]=value in the url\n   * Disabling this will still scope search params based on any parent scope unless the parent scope also has disabled search params scoping\n   * Caution: enabling this can cause conflicts with multiple plugins defining search params with the same name\n   */\n  __unsafe_disableScopedSearchParams?: boolean\n  /**\n   * The content to display inside the route scope.\n   */\n  children: ReactNode\n}\n\n/**\n * A component that wraps a scoped router context, so that calls to\n * `useRouter()`, `useRouterState()`, and usage of `<StateLink />`\n * will be prefixed with the scope segment.\n *\n * @public\n *\n * @param props - Props to pass `RouteScope` component.\n *  See {@link RouteScopeProps}\n *\n * @example\n * ```tsx\n * function MyComponent() {\n *  return (\n *    <RouteScope scope=\"foo\">\n *      <StateLink state={{bar: 'baz'}}>Link</StateLink>\n *    </RouteScope>\n *  )\n * }\n * ```\n */\nexport const RouteScope = function RouteScope(props: RouteScopeProps): ReactElement {\n  const {children, scope, __unsafe_disableScopedSearchParams} = props\n  const parentRouter = useRouter()\n  const {resolvePathFromState: parent_resolvePathFromState, navigate: parent_navigate} =\n    parentRouter\n\n  const parentStateRef = useRef(parentRouter.state)\n  useEffect(() => {\n    parentStateRef.current = parentRouter.state\n  }, [parentRouter.state])\n\n  const resolveNextParentState = useCallback(\n    (_nextState: RouterState) => {\n      const {_searchParams, ...nextState} = _nextState\n      const nextParentState = addScope(parentStateRef.current, scope, nextState)\n      if (__unsafe_disableScopedSearchParams) {\n        // Move search params to parent scope\n        nextParentState._searchParams = _searchParams\n      } else {\n        nextParentState[scope]._searchParams = _searchParams\n      }\n      return nextParentState\n    },\n    [scope, __unsafe_disableScopedSearchParams],\n  )\n\n  const resolvePathFromState = useCallback(\n    (nextState: RouterState) => parent_resolvePathFromState(resolveNextParentState(nextState)),\n    [parent_resolvePathFromState, resolveNextParentState],\n  )\n\n  const navigate = useCallback(\n    (nextState: RouterState, options?: NavigateOptions) =>\n      parent_navigate(resolveNextParentState(nextState), options),\n    [parent_navigate, resolveNextParentState],\n  )\n\n  const childRouter: RouterContextValue = useMemo(() => {\n    const parentState = parentRouter.state\n    const childState = {...(parentState[scope] || {})} as RouterState\n    if (__unsafe_disableScopedSearchParams) {\n      childState._searchParams = parentState._searchParams\n    }\n    return {\n      ...parentRouter,\n      navigate,\n      resolvePathFromState,\n      state: childState,\n    }\n  }, [scope, parentRouter, navigate, resolvePathFromState, __unsafe_disableScopedSearchParams])\n\n  return <RouterContext.Provider value={childRouter}>{children}</RouterContext.Provider>\n}\nRouteScope.displayName = 'RouteScope'\n","import {type MouseEventHandler, useMemo} from 'react'\n\nimport {useLink} from './useLink'\nimport {useRouter} from './useRouter'\n\nconst EMPTY_STATE = {}\n\n/**\n * @public\n */\nexport interface UseStateLinkOptions {\n  /**\n   * The click event handler for the link.\n   */\n  onClick?: MouseEventHandler<HTMLElement>\n  /**\n   * Whether to replace the current history entry instead of adding a new one.\n   */\n  replace?: boolean\n  /**\n   * The state object to update when the link is clicked.\n   */\n  state?: Record<string, unknown>\n  /**\n   * The target window or frame to open the linked document in.\n   */\n  target?: string\n  /**\n   * Whether to navigate to the index page of the linked document.\n   */\n  toIndex?: boolean\n}\n\n/**\n * @public\n *\n * @param options - Options to use for the link\n *  {@link UseStateLinkOptions}\n *\n * @returns - An object with `onClick` and `href` props to use for the link\n *\n * @example\n * ```tsx\n * const {onClick, href} = useStateLink({state: {foo: 'bar'}})\n * ```\n */\nexport function useStateLink(options: UseStateLinkOptions): {\n  onClick: MouseEventHandler<HTMLElement>\n  href: string\n} {\n  const {onClick: onClickProp, replace, state, target, toIndex = false} = options\n\n  if (state && toIndex) {\n    throw new Error('Passing both `state` and `toIndex={true}` as props to StateLink is invalid')\n  }\n\n  if (!state && !toIndex) {\n    // eslint-disable-next-line no-console\n    console.error(\n      new Error(\n        'No state passed to StateLink. If you want to link to an empty state, its better to use the the `toIndex` property',\n      ),\n    )\n  }\n\n  const {resolvePathFromState} = useRouter()\n\n  const href = useMemo(\n    () => resolvePathFromState(toIndex ? EMPTY_STATE : state || EMPTY_STATE),\n    [resolvePathFromState, state, toIndex],\n  )\n\n  const {onClick} = useLink({href, onClick: onClickProp, replace, target})\n\n  return {onClick, href}\n}\n","import {type ForwardedRef, forwardRef, type HTMLProps} from 'react'\n\nimport {useStateLink} from './useStateLink'\n\n/**\n * Props for the {@link StateLink} component.\n *\n * @public\n */\nexport interface StateLinkProps {\n  /**\n   * Whether to replace the current history entry instead of adding a new one.\n   */\n  replace?: boolean\n  /**\n   * The state to associate with the link.\n   */\n  state?: Record<string, unknown>\n  /**\n   * Whether to navigate to the index page of the app.\n   */\n  toIndex?: boolean\n}\n\n/**\n * A component that creates a link that updates the URL state.\n *\n * @remarks\n * This component uses the {@link useStateLink} hook\n * to create a link that updates the URL state.\n *\n * @param props - Props to pass to the `StateLink` component.\n *  See {@link StateLinkProps}.\n *\n * @public\n *\n * @example\n * ```tsx\n * function MyComponent() {\n *  return <StateLink state={{foo: 'bar'}}>Link</StateLink>\n * }\n * ```\n */\nexport const StateLink = forwardRef(function StateLink(\n  props: StateLinkProps & Omit<HTMLProps<HTMLAnchorElement>, 'href'>,\n  ref: ForwardedRef<HTMLAnchorElement>,\n) {\n  const {onClick: onClickProp, replace, state, target, toIndex = false, ...restProps} = props\n  const {onClick, href} = useStateLink({\n    onClick: onClickProp,\n    replace,\n    state,\n    target,\n    toIndex,\n  })\n\n  return <a {...restProps} href={href} onClick={onClick} ref={ref} />\n})\n","import {identity} from 'lodash'\nimport {useMemo} from 'react'\n\nimport {type RouterState} from './types'\nimport {useRouter} from './useRouter'\n\n/**\n * @public\n *\n * @param selector - A selector function that receives the router state and returns a value. See {@link RouterState}\n *\n * @returns The value returned by the selector function or RouterState. See {@link RouterState}\n *\n * @example\n * ```tsx\n * const {activeTool} = useRouterState(state => state.tool)\n * ```\n */\nexport function useRouterState<R = RouterState>(selector: (routerState: RouterState) => R): R\n\n/**\n * @public\n *\n * @returns The router state. See {@link RouterState}\n *\n * @example\n * ```tsx\n * const routerState = useRouterState()\n * ```\n */\nexport function useRouterState(): RouterState\n\n/**\n * @public\n */\nexport function useRouterState(\n  selector: (routerState: RouterState) => unknown = identity,\n): unknown {\n  const {state} = useRouter()\n  return useMemo(() => selector(state), [selector, state])\n}\n","import {type ComponentType, type FunctionComponent, type ReactElement} from 'react'\n\nimport {type RouterContextValue} from './types'\nimport {useRouter} from './useRouter'\n\n/**\n * A higher-order component that injects the `router` object from the `useRouter` hook\n * into the props of the wrapped component.\n *\n * @internal\n * @deprecated - Use the `useRouter` hook instead.\n *\n * @param Component - The component to wrap.\n *\n * @returns The wrapped component.\n *\n * @example\n * ```tsx\n * function MyComponent(props) {\n *  return <div>{props.router.state.myParam}</div>\n * }\n *\n * export default withRouter(MyComponent)\n * ```\n */\nexport function withRouter<Props extends {router: RouterContextValue}>(\n  Component: ComponentType<Props>,\n): FunctionComponent<Omit<Props, 'router'>> {\n  function WithRouter(props: Omit<Props, 'router'>) {\n    const router = useRouter()\n\n    return <Component {...(props as Props)} router={router} />\n  }\n\n  WithRouter.displayName = `withRouter(${Component.displayName || Component.name})`\n\n  return WithRouter\n}\n\n/**\n * @internal\n * @deprecated - Use the `useRouter` hook instead.\n */\nexport interface WithRouterProps {\n  /**\n   * The `router` object from the `useRouter` hook.\n   *  {@link RouterContextValue}\n   */\n  router: RouterContextValue\n  /**\n   * A function that renders the wrapped component with the `router` object as a parameter.\n   */\n  children: (router: RouterContextValue) => ReactElement\n}\n\n/**\n * A higher-order component that injects the router object into its child component.\n *\n * @internal\n * @deprecated - Use the `useRouter` hook instead.\n *\n * @returns The rendered component.\n *\n * @example\n * ```tsx\n * function MyComponent(props: {router: Router}) {\n *   const {location} = props.router\n *   const {pathname} = location\n *   return <p>The current path is: {pathname}</p>\n * }\n *\n * function App() {\n *   return (\n *     <Router>\n *       <WithRouter>\n *         {router => <MyComponent router={router} />}\n *       </WithRouter>\n *     </Router>\n *   )\n * }\n * ```\n */\nexport const WithRouter = withRouter((props: WithRouterProps) => props.children(props.router))\n"],"names":["useRouter","router","useContext","RouterContext","Error","isLeftClickEvent","event","button","isModifiedEvent","metaKey","altKey","ctrlKey","shiftKey","useLink","options","$","_c","onClick","onClickProp","href","target","replace","t0","undefined","navigateUrl","t1","isDefaultPrevented","preventDefault","path","t2","useIntentLink","intent","params","searchParams","resolveIntentLink","t3","IntentLink","forwardRef","props","ref","restProps","Link","VALID_PARAM_SEGMENT","createSegment","segment","startsWith","paramName","slice","test","addendum","includes","error","type","name","_parseRoute","route","pathname","split","segments","map","filter","Boolean","raw","arrayify","val","Array","isArray","isRecord","value","isPlainObject","createMatchError","node","missingKeys","unmappableStateKeys","createMatchOk","matchedState","child","_findMatchingRoutes","_state","scopedState","scope","_searchParams","state","requiredParams","seg","stateKeys","Object","keys","consumedParams","intersection","missingParams","difference","remainingParams","length","scopedParams","key","consumedState","pick","children","remainingState","found","childNode","find","res","encodeURIComponentExcept","uriComponent","unescaped","chars","String","i","char","encodeURIComponent","debug","Debug","_resolvePathFromState","match","unmappable","quote","join","pathFromMatchResult","search","encodeParams","bracketify","flatMap","encodeSearchParamKey","serializeScopedPath","encodeSearchParamValue","scopedPath","head","tail","base","transform","toPath","childMatch","addNodeScope","__unsafe_disableScopedSearchParams","namespaces","parseScopedParams","parse","OPEN","CLOSED","str","result","nextBracketIdx","indexOf","push","nextClosing","matchPath","parts","segmentsLength","every","toState","rest","childState","unscopedParams","removeScope","some","childParams","selfParams","namespace","mergedState","__spreadValues","_resolveStateFromPath","urlSearchParams","from","URLSearchParams","entries","pathMatch","encodeBase64Url","encodeBase64","decodeBase64Url","decodeBase64","percentToByte","p","fromCharCode","parseInt","btoa","byteToPercent","b","charCodeAt","toString","decodeURIComponent","atob","decodeJsonParams","pathSegment","JSON","err","console","warn","encodeJsonParams","stringify","decodeParams","reduce","pair","create","routeOrOpts","childrenOrOpts","_createNode","normalizeArgs","intents","basePath","normalize","payload","scopeName","__spreadProps","normalizeChildren","isRoute","paths","acc","concat","EMPTY_STATE","isRoot","TypeError","parsedRoute","_isRoute","encode","decode","_path","isNotFound","getBasePath","getRedirectBase","RouterProvider","onNavigate","routerProp","intentName","parameters","nextState","resolvePathFromState","nextState_0","navigate","intentName_0","params_0","t4","options_0","navigateIntent","t5","t6","addScope","routerState","RouteScope","parentRouter","parent_resolvePathFromState","parent_navigate","parentStateRef","useRef","current","useEffect","_nextState","nextParentState","resolveNextParentState","nextState_1","parentState","t7","childRouter","t8","displayName","useStateLink","toIndex","StateLink","useRouterState","selector","identity","withRouter","Component","WithRouter"],"mappings":"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"}