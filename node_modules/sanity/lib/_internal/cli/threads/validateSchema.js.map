{"version":3,"file":"validateSchema.js","sources":["../../../../src/_internal/cli/threads/validateSchema.ts"],"sourcesContent":["import {isMainThread, parentPort, workerData as _workerData} from 'node:worker_threads'\n\nimport {groupProblems, validateSchema} from '@sanity/schema/_internal'\nimport {type SchemaValidationProblem, type SchemaValidationProblemGroup} from '@sanity/types'\nimport {resolveSchemaTypes} from 'sanity'\n\nimport {getStudioConfig} from '../util/getStudioWorkspaces'\nimport {mockBrowserEnvironment} from '../util/mockBrowserEnvironment'\n\n/** @internal */\nexport interface ValidateSchemaWorkerData {\n  workDir: string\n  workspace?: string\n  level?: SchemaValidationProblem['severity']\n}\n\n/** @internal */\nexport interface ValidateSchemaWorkerResult {\n  validation: SchemaValidationProblemGroup[]\n}\n\nconst {\n  workDir,\n  workspace: workspaceName,\n  level = 'warning',\n} = _workerData as ValidateSchemaWorkerData\n\nif (isMainThread || !parentPort) {\n  throw new Error('This module must be run as a worker thread')\n}\n\nconst cleanup = mockBrowserEnvironment(workDir)\n\ntry {\n  const workspaces = getStudioConfig({basePath: workDir})\n\n  if (!workspaces.length) {\n    throw new Error(`Configuration did not return any workspaces.`)\n  }\n\n  let workspace\n  if (workspaceName) {\n    workspace = workspaces.find((w) => w.name === workspaceName)\n    if (!workspace) {\n      throw new Error(`Could not find any workspaces with name \\`${workspaceName}\\``)\n    }\n  } else {\n    if (workspaces.length !== 1) {\n      throw new Error(\n        \"Multiple workspaces found. Please specify which workspace to use with '--workspace'.\",\n      )\n    }\n    workspace = workspaces[0]\n  }\n\n  const schemaTypes = resolveSchemaTypes({\n    config: workspace,\n    context: {dataset: workspace.dataset, projectId: workspace.projectId},\n  })\n\n  const validation = groupProblems(validateSchema(schemaTypes).getTypes())\n\n  const result: ValidateSchemaWorkerResult = {\n    validation: validation\n      .map((group) => ({\n        ...group,\n        problems: group.problems.filter((problem) =>\n          level === 'error' ? problem.severity === 'error' : true,\n        ),\n      }))\n      .filter((group) => group.problems.length),\n  }\n\n  parentPort?.postMessage(result)\n} finally {\n  cleanup()\n}\n"],"names":["workDir","workspace","workspaceName","level","_workerData","isMainThread","parentPort","Error","cleanup","mockBrowserEnvironment","workspaces","getStudioConfig","basePath","length","find","w","name","schemaTypes","resolveSchemaTypes","config","context","dataset","projectId","result","validation","groupProblems","validateSchema","getTypes","map","group","problems","filter","problem","severity","postMessage"],"mappings":";;AAqBA,MAAM;AAAA,EACJA;AAAAA,EACAC,WAAWC;AAAAA,EACXC,QAAQ;AACV,IAAIC,oBAAAA;AAEJ,IAAIC,oBAAAA,gBAAgB,CAACC,oBAAAA;AACb,QAAA,IAAIC,MAAM,4CAA4C;AAG9D,MAAMC,UAAUC,8CAAuBT,OAAO;AAE9C,IAAI;AACF,QAAMU,aAAaC,oBAAAA,gBAAgB;AAAA,IAACC,UAAUZ;AAAAA,EAAAA,CAAQ;AAEtD,MAAI,CAACU,WAAWG;AACR,UAAA,IAAIN,MAAM,8CAA8C;AAG5DN,MAAAA;AACAC,MAAAA;AACFD,QAAAA,YAAYS,WAAWI,KAAMC,CAAAA,MAAMA,EAAEC,SAASd,aAAa,GACvD,CAACD;AACH,YAAM,IAAIM,MAAM,6CAA6CL,aAAa,IAAI;AAAA,SAE3E;AACL,QAAIQ,WAAWG,WAAW;AAClB,YAAA,IAAIN,MACR,sFACF;AAEFN,gBAAYS,WAAW,CAAC;AAAA,EAAA;AAG1B,QAAMO,cAAcC,OAAAA,mBAAmB;AAAA,IACrCC,QAAQlB;AAAAA,IACRmB,SAAS;AAAA,MAACC,SAASpB,UAAUoB;AAAAA,MAASC,WAAWrB,UAAUqB;AAAAA,IAAAA;AAAAA,EAC5D,CAAA,GAIKC,SAAqC;AAAA,IACzCC,YAHiBC,UAAAA,cAAcC,UAAAA,eAAeT,WAAW,EAAEU,UAAU,EAIlEC,IAAKC,CAAW,WAAA;AAAA,MACf,GAAGA;AAAAA,MACHC,UAAUD,MAAMC,SAASC,OAAQC,CAAAA,YAC/B7B,UAAU,UAAU6B,QAAQC,aAAa,UAAU,EACrD;AAAA,IAAA,EACA,EACDF,OAAQF,CAAUA,UAAAA,MAAMC,SAASjB,MAAM;AAAA,EAC5C;AAEAP,sBAAAA,YAAY4B,YAAYX,MAAM;AAChC,UAAU;AACA,UAAA;AACV;"}