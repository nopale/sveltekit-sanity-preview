{"version":3,"file":"previewServer.js","sources":["../../src/_internal/cli/server/buildStaticFiles.ts","../../src/_internal/cli/server/vite/plugin-sanity-basepath-redirect.ts","../../src/_internal/cli/server/previewServer.ts"],"sourcesContent":["import {constants as fsConstants} from 'node:fs'\nimport fs from 'node:fs/promises'\nimport path from 'node:path'\n\nimport {type ReactCompilerConfig, type UserViteConfig} from '@sanity/cli'\nimport readPkgUp from 'read-pkg-up'\n\nimport {debug as serverDebug} from './debug'\nimport {extendViteConfigWithUserConfig, finalizeViteConfig, getViteConfig} from './getViteConfig'\nimport {writeSanityRuntime} from './runtime'\nimport {generateWebManifest} from './webManifest'\n\nconst debug = serverDebug.extend('static')\n\nexport interface ChunkModule {\n  name: string\n  originalLength: number\n  renderedLength: number\n}\n\nexport interface ChunkStats {\n  name: string\n  modules: ChunkModule[]\n}\n\nexport interface StaticBuildOptions {\n  cwd: string\n  basePath: string\n  outputDir: string\n  minify?: boolean\n  profile?: boolean\n  sourceMap?: boolean\n  importMap?: {imports?: Record<string, string>}\n\n  vite?: UserViteConfig\n  reactCompiler: ReactCompilerConfig | undefined\n}\n\nexport async function buildStaticFiles(\n  options: StaticBuildOptions,\n): Promise<{chunks: ChunkStats[]}> {\n  const {\n    cwd,\n    outputDir,\n    sourceMap = false,\n    minify = true,\n    basePath,\n    vite: extendViteConfig,\n    importMap,\n    reactCompiler,\n  } = options\n\n  debug('Writing Sanity runtime files')\n  await writeSanityRuntime({cwd, reactStrictMode: false, watch: false, basePath})\n\n  debug('Resolving vite config')\n  const mode = 'production'\n  let viteConfig = await getViteConfig({\n    cwd,\n    basePath,\n    outputDir,\n    minify,\n    sourceMap,\n    mode,\n    importMap,\n    reactCompiler,\n  })\n\n  // Extend Vite configuration with user-provided config\n  if (extendViteConfig) {\n    viteConfig = await extendViteConfigWithUserConfig(\n      {command: 'build', mode},\n      viteConfig,\n      extendViteConfig,\n    )\n    viteConfig = await finalizeViteConfig(viteConfig)\n  }\n\n  // Copy files placed in /static to the built /static\n  debug('Copying static files from /static to output dir')\n  const staticPath = path.join(outputDir, 'static')\n  await copyDir(path.join(cwd, 'static'), staticPath)\n\n  // Write favicons, not overwriting ones that already exist, to static folder\n  debug('Writing favicons to output dir')\n  const faviconBasePath = `${basePath.replace(/\\/+$/, '')}/static`\n  await writeFavicons(faviconBasePath, staticPath)\n\n  debug('Bundling using vite')\n  const {build} = await import('vite')\n  const bundle = await build(viteConfig)\n  debug('Bundling complete')\n\n  // For typescript only - this shouldn't ever be the case given we're not watching\n  if (Array.isArray(bundle) || !('output' in bundle)) {\n    return {chunks: []}\n  }\n\n  const stats: ChunkStats[] = []\n  bundle.output.forEach((chunk) => {\n    if (chunk.type !== 'chunk') {\n      return\n    }\n\n    stats.push({\n      name: chunk.name,\n      modules: Object.entries(chunk.modules).map(([rawFilePath, chunkModule]) => {\n        const filePath = rawFilePath.startsWith('\\x00')\n          ? rawFilePath.slice('\\x00'.length)\n          : rawFilePath\n\n        return {\n          name: path.isAbsolute(filePath) ? path.relative(cwd, filePath) : filePath,\n          originalLength: chunkModule.originalLength,\n          renderedLength: chunkModule.renderedLength,\n        }\n      }),\n    })\n  })\n\n  return {chunks: stats}\n}\n\nasync function copyDir(srcDir: string, destDir: string, skipExisting?: boolean): Promise<void> {\n  await fs.mkdir(destDir, {recursive: true})\n\n  for (const file of await tryReadDir(srcDir)) {\n    const srcFile = path.resolve(srcDir, file)\n    if (srcFile === destDir) {\n      continue\n    }\n\n    const destFile = path.resolve(destDir, file)\n    const stat = await fs.stat(srcFile)\n\n    if (stat.isDirectory()) {\n      await copyDir(srcFile, destFile, skipExisting)\n    } else if (skipExisting) {\n      await fs.copyFile(srcFile, destFile, fsConstants.COPYFILE_EXCL).catch(skipIfExistsError)\n    } else {\n      await fs.copyFile(srcFile, destFile)\n    }\n  }\n}\n\nasync function tryReadDir(dir: string): Promise<string[]> {\n  try {\n    const content = await fs.readdir(dir)\n    return content\n  } catch (err) {\n    if (err.code === 'ENOENT') {\n      return []\n    }\n\n    throw err\n  }\n}\n\nfunction skipIfExistsError(err: Error & {code: string}) {\n  if (err.code === 'EEXIST') {\n    return\n  }\n\n  throw err\n}\n\nasync function writeFavicons(basePath: string, destDir: string): Promise<void> {\n  const sanityPkgPath = (await readPkgUp({cwd: __dirname}))?.path\n  const faviconsPath = sanityPkgPath\n    ? path.join(path.dirname(sanityPkgPath), 'static', 'favicons')\n    : undefined\n\n  if (!faviconsPath) {\n    throw new Error('Unable to resolve `sanity` module root')\n  }\n\n  await fs.mkdir(destDir, {recursive: true})\n  await copyDir(faviconsPath, destDir, true)\n  await writeWebManifest(basePath, destDir)\n\n  // Copy the /static/favicon.ico to /favicon.ico as well, because some tools/browsers\n  // blindly expects it to be there before requesting the HTML containing the actual path\n  await fs.copyFile(path.join(destDir, 'favicon.ico'), path.join(destDir, '..', 'favicon.ico'))\n}\n\nasync function writeWebManifest(basePath: string, destDir: string): Promise<void> {\n  const content = JSON.stringify(generateWebManifest(basePath), null, 2)\n  await fs\n    .writeFile(path.join(destDir, 'manifest.webmanifest'), content, 'utf8')\n    .catch(skipIfExistsError)\n}\n","import {type Plugin} from 'vite'\n\nexport function sanityBasePathRedirectPlugin(basePath: string | undefined): Plugin {\n  return {\n    name: 'sanity/server/sanity-base-path-redirect',\n    apply: 'serve',\n    configurePreviewServer(vitePreviewServer) {\n      return () => {\n        if (!basePath) {\n          return\n        }\n\n        vitePreviewServer.middlewares.use((req, res, next) => {\n          if (req.url !== '/') {\n            next()\n            return\n          }\n\n          res.writeHead(302, {Location: basePath})\n          res.end()\n        })\n      }\n    },\n  }\n}\n","import fs from 'node:fs/promises'\nimport path from 'node:path'\n\nimport {type UserViteConfig} from '@sanity/cli'\nimport chalk from 'chalk'\nimport {type InlineConfig} from 'vite'\n\nimport {debug as serverDebug} from './debug'\nimport {extendViteConfigWithUserConfig} from './getViteConfig'\nimport {sanityBasePathRedirectPlugin} from './vite/plugin-sanity-basepath-redirect'\n\nconst debug = serverDebug.extend('preview')\n\nexport interface PreviewServer {\n  urls: {local: string[]; network: string[]}\n  close(): Promise<void>\n}\n\nexport interface PreviewServerOptions {\n  root: string\n  cwd: string\n\n  httpPort: number\n  httpHost?: string\n\n  vite?: UserViteConfig\n}\n\nexport async function startPreviewServer(options: PreviewServerOptions): Promise<PreviewServer> {\n  const {httpPort, httpHost, root, vite: extendViteConfig} = options\n  const startTime = Date.now()\n\n  const indexPath = path.join(root, 'index.html')\n  let basePath: string | undefined\n  try {\n    const index = await fs.readFile(indexPath, 'utf8')\n    basePath = tryResolveBasePathFromIndex(index)\n  } catch (err) {\n    if (err.code !== 'ENOENT') {\n      throw err\n    }\n\n    const error = new Error(\n      `Could not find a production build in the '${root}' directory.\\nTry building your studio app with 'sanity build' before starting the preview server.`,\n    )\n    error.name = 'BUILD_NOT_FOUND'\n    throw error\n  }\n\n  const mode = 'production'\n  let previewConfig: InlineConfig = {\n    root,\n    base: basePath || '/',\n    plugins: [sanityBasePathRedirectPlugin(basePath)],\n    configFile: false,\n    preview: {\n      port: httpPort,\n      host: httpHost,\n      strictPort: true,\n    },\n    // Needed for vite to not serve `root/dist`\n    build: {\n      outDir: root,\n    },\n    mode,\n  }\n\n  // Extend Vite configuration with user-provided config\n  if (extendViteConfig) {\n    previewConfig = await extendViteConfigWithUserConfig(\n      {command: 'serve', mode},\n      previewConfig,\n      extendViteConfig,\n    )\n  }\n\n  debug('Creating vite server')\n  const {preview} = await import('vite')\n  const server = await preview(previewConfig)\n  const warn = server.config.logger.warn\n  const info = server.config.logger.info\n  const url = server.resolvedUrls!.local[0]\n\n  if (typeof basePath === 'undefined') {\n    warn('Could not determine base path from index.html, using \"/\" as default')\n  } else if (basePath && basePath !== '/') {\n    info(`Using resolved base path from static build: ${chalk.cyan(basePath)}`)\n  }\n\n  const startupDuration = Date.now() - startTime\n\n  info(\n    `Sanity Studio ` +\n      `using ${chalk.cyan(`vite@${require('vite/package.json').version}`)} ` +\n      `ready in ${chalk.cyan(`${Math.ceil(startupDuration)}ms`)} ` +\n      `and running at ${chalk.cyan(url)} (production preview mode)`,\n  )\n\n  return {\n    urls: server.resolvedUrls!,\n    close: () =>\n      new Promise((resolve, reject) =>\n        server.httpServer.close((err) => (err ? reject(err) : resolve())),\n      ),\n  }\n}\n\nfunction tryResolveBasePathFromIndex(index: string): string | undefined {\n  // <script ... src=\"/some-base-path/static/sanity-a3cc3d86.js\"></script>\n  const basePath = index.match(/<script[^>]+src=\"(.*?)\\/static\\/sanity-/)?.[1]\n\n  // We _expect_ to be able to find the base path. If we can't, we should warn.\n  // Note that we're checking for `undefined` here, since an empty string is a\n  // valid base path.\n  if (typeof basePath === 'undefined') {\n    return undefined\n  }\n\n  // In the case of an empty base path, we still want to return `/` to indicate\n  // that we _found_ the basepath - it just happens to be empty. Eg:\n  // <script ... src = \"/static/sanity-a3cc3d86.js\"></script>\n  // Which differs from not being able to find the script tag at all, in which\n  // case we'll want to show a warning to indicate that it is an abnormality.\n  return basePath === '' ? '/' : basePath\n}\n"],"names":["debug","serverDebug","extend","buildStaticFiles","options","cwd","outputDir","sourceMap","minify","basePath","vite","extendViteConfig","importMap","reactCompiler","writeSanityRuntime","reactStrictMode","watch","mode","viteConfig","getViteConfig","extendViteConfigWithUserConfig","command","finalizeViteConfig","staticPath","path","join","copyDir","faviconBasePath","replace","writeFavicons","build","bundle","Array","isArray","chunks","stats","output","forEach","chunk","type","push","name","modules","Object","entries","map","rawFilePath","chunkModule","filePath","startsWith","slice","isAbsolute","relative","originalLength","renderedLength","srcDir","destDir","skipExisting","fs","mkdir","recursive","file","tryReadDir","srcFile","resolve","destFile","stat","isDirectory","copyFile","fsConstants","COPYFILE_EXCL","catch","skipIfExistsError","dir","readdir","err","code","sanityPkgPath","readPkgUp","__dirname","faviconsPath","dirname","undefined","Error","writeWebManifest","content","JSON","stringify","generateWebManifest","writeFile","sanityBasePathRedirectPlugin","apply","configurePreviewServer","vitePreviewServer","middlewares","use","req","res","next","url","writeHead","Location","end","startPreviewServer","httpPort","httpHost","root","startTime","Date","now","indexPath","index","readFile","tryResolveBasePathFromIndex","error","previewConfig","base","plugins","configFile","preview","port","host","strictPort","outDir","server","warn","config","logger","info","resolvedUrls","local","chalk","cyan","startupDuration","require","version","Math","ceil","urls","close","Promise","reject","httpServer","match"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AAYA,MAAMA,UAAQC,QAAAA,MAAYC,OAAO,QAAQ;AA0BzC,eAAsBC,iBACpBC,SACiC;AAC3B,QAAA;AAAA,IACJC;AAAAA,IACAC;AAAAA,IACAC,YAAY;AAAA,IACZC,SAAS;AAAA,IACTC;AAAAA,IACAC,MAAMC;AAAAA,IACNC;AAAAA,IACAC;AAAAA,EAAAA,IACET;AAEEJ,UAAA,8BAA8B,GACpC,MAAMc,2BAAmB;AAAA,IAACT;AAAAA,IAAKU,iBAAiB;AAAA,IAAOC,OAAO;AAAA,IAAOP;AAAAA,EAAAA,CAAS,GAE9ET,QAAM,uBAAuB;AAC7B,QAAMiB,OAAO;AACTC,MAAAA,aAAa,MAAMC,sBAAc;AAAA,IACnCd;AAAAA,IACAI;AAAAA,IACAH;AAAAA,IACAE;AAAAA,IACAD;AAAAA,IACAU;AAAAA,IACAL;AAAAA,IACAC;AAAAA,EAAAA,CACD;AAGGF,uBACFO,aAAa,MAAME,uCACjB;AAAA,IAACC,SAAS;AAAA,IAASJ;AAAAA,EAAAA,GACnBC,YACAP,gBACF,GACAO,aAAa,MAAMI,QAAmBJ,mBAAAA,UAAU,IAIlDlB,QAAM,iDAAiD;AACvD,QAAMuB,aAAaC,cAAAA,QAAKC,KAAKnB,WAAW,QAAQ;AAC1CoB,QAAAA,QAAQF,sBAAKC,KAAKpB,KAAK,QAAQ,GAAGkB,UAAU,GAGlDvB,QAAM,gCAAgC;AACtC,QAAM2B,kBAAkB,GAAGlB,SAASmB,QAAQ,QAAQ,EAAE,CAAC;AACvD,QAAMC,cAAcF,iBAAiBJ,UAAU,GAE/CvB,QAAM,qBAAqB;AACrB,QAAA;AAAA,IAAC8B;AAAAA,EAAAA,IAAS,MAAM,OAAO,MAAM,GAC7BC,SAAS,MAAMD,MAAMZ,UAAU;AACrClB,MAAAA,QAAM,mBAAmB,GAGrBgC,MAAMC,QAAQF,MAAM,KAAK,EAAE,YAAYA;AAClC,WAAA;AAAA,MAACG,QAAQ,CAAA;AAAA,IAAE;AAGpB,QAAMC,QAAsB,CAAE;AACvBC,SAAAA,OAAAA,OAAOC,QAASC,CAAU,UAAA;AAC3BA,UAAMC,SAAS,WAInBJ,MAAMK,KAAK;AAAA,MACTC,MAAMH,MAAMG;AAAAA,MACZC,SAASC,OAAOC,QAAQN,MAAMI,OAAO,EAAEG,IAAI,CAAC,CAACC,aAAaC,WAAW,MAAM;AACnEC,cAAAA,WAAWF,YAAYG,WAAW,IAAM,IAC1CH,YAAYI,MAAM,CAAa,IAC/BJ;AAEG,eAAA;AAAA,UACLL,MAAMjB,cAAAA,QAAK2B,WAAWH,QAAQ,IAAIxB,cAAK4B,QAAAA,SAAS/C,KAAK2C,QAAQ,IAAIA;AAAAA,UACjEK,gBAAgBN,YAAYM;AAAAA,UAC5BC,gBAAgBP,YAAYO;AAAAA,QAC9B;AAAA,MACD,CAAA;AAAA,IAAA,CACF;AAAA,EAAA,CACF,GAEM;AAAA,IAACpB,QAAQC;AAAAA,EAAK;AACvB;AAEA,eAAeT,QAAQ6B,QAAgBC,SAAiBC,cAAuC;AACvFC,QAAAA,YAAAA,QAAGC,MAAMH,SAAS;AAAA,IAACI,WAAW;AAAA,EAAA,CAAK;AAEzC,aAAWC,QAAQ,MAAMC,WAAWP,MAAM,GAAG;AAC3C,UAAMQ,UAAUvC,cAAAA,QAAKwC,QAAQT,QAAQM,IAAI;AACzC,QAAIE,YAAYP;AACd;AAGF,UAAMS,WAAWzC,cAAAA,QAAKwC,QAAQR,SAASK,IAAI;AAG3C,KAFa,MAAMH,YAAAA,QAAGQ,KAAKH,OAAO,GAEzBI,YAAAA,IACP,MAAMzC,QAAQqC,SAASE,UAAUR,YAAY,IACpCA,eACT,MAAMC,oBAAGU,SAASL,SAASE,UAAUI,KAAAA,UAAYC,aAAa,EAAEC,MAAMC,iBAAiB,IAEvF,MAAMd,YAAGU,QAAAA,SAASL,SAASE,QAAQ;AAAA,EAAA;AAGzC;AAEA,eAAeH,WAAWW,KAAgC;AACpD,MAAA;AACc,WAAA,MAAMf,YAAAA,QAAGgB,QAAQD,GAAG;AAAA,WAE7BE,KAAK;AACZ,QAAIA,IAAIC,SAAS;AACf,aAAO,CAAE;AAGLD,UAAAA;AAAAA,EAAAA;AAEV;AAEA,SAASH,kBAAkBG,KAA6B;AACtD,MAAIA,IAAIC,SAAS;AAIXD,UAAAA;AACR;AAEA,eAAe9C,cAAcpB,UAAkB+C,SAAgC;AAtK/E,MAAA;AAuKQqB,QAAAA,iBAAiB,WAAMC,2BAAU;AAAA,IAACzE,KAAK0E;AAAAA,EAAAA,CAAU,MAAhC,OAAoCvD,SAAAA,GAAAA,MACrDwD,eAAeH,gBACjBrD,cAAAA,QAAKC,KAAKD,cAAAA,QAAKyD,QAAQJ,aAAa,GAAG,UAAU,UAAU,IAC3DK;AAEJ,MAAI,CAACF;AACG,UAAA,IAAIG,MAAM,wCAAwC;AAGpDzB,QAAAA,YAAAA,QAAGC,MAAMH,SAAS;AAAA,IAACI,WAAW;AAAA,EAAK,CAAA,GACzC,MAAMlC,QAAQsD,cAAcxB,SAAS,EAAI,GACzC,MAAM4B,iBAAiB3E,UAAU+C,OAAO,GAIxC,MAAME,oBAAGU,SAAS5C,cAAKC,QAAAA,KAAK+B,SAAS,aAAa,GAAGhC,cAAAA,QAAKC,KAAK+B,SAAS,MAAM,aAAa,CAAC;AAC9F;AAEA,eAAe4B,iBAAiB3E,UAAkB+C,SAAgC;AAChF,QAAM6B,UAAUC,KAAKC,UAAUC,4BAAoB/E,QAAQ,GAAG,MAAM,CAAC;AAC/DiD,QAAAA,oBACH+B,UAAUjE,cAAAA,QAAKC,KAAK+B,SAAS,sBAAsB,GAAG6B,SAAS,MAAM,EACrEd,MAAMC,iBAAiB;AAC5B;AC5LO,SAASkB,6BAA6BjF,UAAsC;AAC1E,SAAA;AAAA,IACLgC,MAAM;AAAA,IACNkD,OAAO;AAAA,IACPC,uBAAuBC,mBAAmB;AACxC,aAAO,MAAM;AACNpF,oBAILoF,kBAAkBC,YAAYC,IAAI,CAACC,KAAKC,KAAKC,SAAS;AAChDF,cAAAA,IAAIG,QAAQ,KAAK;AACd,iBAAA;AACL;AAAA,UAAA;AAGFF,cAAIG,UAAU,KAAK;AAAA,YAACC,UAAU5F;AAAAA,UAAAA,CAAS,GACvCwF,IAAIK,IAAI;AAAA,QAAA,CACT;AAAA,MACH;AAAA,IAAA;AAAA,EAEJ;AACF;ACbA,MAAMtG,QAAQC,QAAAA,MAAYC,OAAO,SAAS;AAiB1C,eAAsBqG,mBAAmBnG,SAAuD;AACxF,QAAA;AAAA,IAACoG;AAAAA,IAAUC;AAAAA,IAAUC;AAAAA,IAAMhG,MAAMC;AAAAA,EAAAA,IAAoBP,SACrDuG,YAAYC,KAAKC,IAAAA,GAEjBC,YAAYtF,sBAAKC,KAAKiF,MAAM,YAAY;AAC1CjG,MAAAA;AACA,MAAA;AACF,UAAMsG,QAAQ,MAAMrD,YAAAA,QAAGsD,SAASF,WAAW,MAAM;AACjDrG,eAAWwG,4BAA4BF,KAAK;AAAA,WACrCpC,KAAK;AACZ,QAAIA,IAAIC,SAAS;AACTD,YAAAA;AAGR,UAAMuC,QAAQ,IAAI/B,MAChB,6CAA6CuB,IAAI;AAAA,qFACnD;AACAQ,UAAAA,MAAMzE,OAAO,mBACPyE;AAAAA,EAAAA;AAGR,QAAMjG,OAAO;AACb,MAAIkG,gBAA8B;AAAA,IAChCT;AAAAA,IACAU,MAAM3G,YAAY;AAAA,IAClB4G,SAAS,CAAC3B,6BAA6BjF,QAAQ,CAAC;AAAA,IAChD6G,YAAY;AAAA,IACZC,SAAS;AAAA,MACPC,MAAMhB;AAAAA,MACNiB,MAAMhB;AAAAA,MACNiB,YAAY;AAAA,IACd;AAAA;AAAA,IAEA5F,OAAO;AAAA,MACL6F,QAAQjB;AAAAA,IACV;AAAA,IACAzF;AAAAA,EACF;AAGIN,uBACFwG,gBAAgB,MAAM/F,uCACpB;AAAA,IAACC,SAAS;AAAA,IAASJ;AAAAA,EACnBkG,GAAAA,eACAxG,gBACF,IAGFX,MAAM,sBAAsB;AACtB,QAAA;AAAA,IAACuH;AAAAA,EAAAA,IAAW,MAAM,OAAO,MAAM,GAC/BK,SAAS,MAAML,QAAQJ,aAAa,GACpCU,OAAOD,OAAOE,OAAOC,OAAOF,MAC5BG,OAAOJ,OAAOE,OAAOC,OAAOC,MAC5B7B,MAAMyB,OAAOK,aAAcC,MAAM,CAAC;AAEpC,SAAOzH,WAAa,MACtBoH,KAAK,qEAAqE,IACjEpH,YAAYA,aAAa,OAClCuH,KAAK,+CAA+CG,eAAAA,QAAMC,KAAK3H,QAAQ,CAAC,EAAE;AAGtE4H,QAAAA,kBAAkBzB,KAAKC,IAAAA,IAAQF;AAGnC,SAAA,KAAA,uBACWwB,eAAMC,QAAAA,KAAK,QAAQE,QAAQ,mBAAmB,EAAEC,OAAO,EAAE,CAAC,aACvDJ,eAAMC,QAAAA,KAAK,GAAGI,KAAKC,KAAKJ,eAAe,CAAC,IAAI,CAAC,mBACvCF,eAAAA,QAAMC,KAAKjC,GAAG,CAAC,4BACrC,GAEO;AAAA,IACLuC,MAAMd,OAAOK;AAAAA,IACbU,OAAOA,MACL,IAAIC,QAAQ,CAAC5E,SAAS6E,WACpBjB,OAAOkB,WAAWH,MAAOhE,SAASA,MAAMkE,OAAOlE,GAAG,IAAIX,SAAU,CAClE;AAAA,EACJ;AACF;AAEA,SAASiD,4BAA4BF,OAAmC;AA3GxE,MAAA;AA6GE,QAAMtG,YAAWsG,KAAAA,MAAMgC,MAAM,yCAAyC,MAArDhC,OAAyD,SAAA,GAAA,CAAA;AAK1E,MAAI,SAAOtG,WAAa;AASjBA,WAAAA,aAAa,KAAK,MAAMA;AACjC;;;"}