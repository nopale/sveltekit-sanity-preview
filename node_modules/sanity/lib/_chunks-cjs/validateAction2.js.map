{"version":3,"file":"validateAction2.js","sources":["../../src/_internal/cli/actions/validation/reporters/jsonReporter.ts","../../src/_internal/cli/actions/validation/reporters/ndjsonReporter.ts","../../src/_internal/cli/actions/validation/reporters/prettyReporter/util.ts","../../src/_internal/cli/actions/validation/reporters/prettyReporter/formatDocumentValidation.ts","../../src/_internal/cli/actions/validation/reporters/prettyReporter/prettyReporter.ts","../../src/_internal/cli/actions/validation/reporters/index.ts","../../src/_internal/cli/util/workerChannels.ts","../../src/_internal/cli/actions/validation/validateDocuments.ts","../../src/_internal/cli/actions/validation/validateAction.ts"],"sourcesContent":["import {type BuiltInValidationReporter} from '../validateAction'\n\n// TODO: replace with Array.fromAsync when it's out of stage3\nasync function arrayFromAsync<T>(iterable: AsyncIterable<T>) {\n  const results: T[] = []\n  for await (const item of iterable) results.push(item)\n  return results\n}\n\nexport const json: BuiltInValidationReporter = async ({output, worker}) => {\n  const results = await arrayFromAsync(worker.stream.validation())\n  const formatted = results\n    // report out only documents with some markers\n    .filter(({markers}) => markers.length)\n    // remove validatedCount from the results\n    .map(({validatedCount, ...result}) => result)\n\n  await worker.dispose()\n\n  output.print(JSON.stringify(formatted))\n\n  let overallLevel: 'error' | 'warning' | 'info' = 'info'\n\n  for (const {level} of formatted) {\n    if (level === 'error') overallLevel = 'error'\n    if (level === 'warning' && overallLevel !== 'error') overallLevel = 'warning'\n  }\n\n  return overallLevel\n}\n","import {type BuiltInValidationReporter} from '../validateAction'\n\nexport const ndjson: BuiltInValidationReporter = async ({output, worker}) => {\n  let overallLevel: 'error' | 'warning' | 'info' = 'info'\n\n  for await (const {validatedCount, ...result} of worker.stream.validation()) {\n    if (result.level === 'error') overallLevel = 'error'\n    if (result.level === 'warning' && overallLevel !== 'error') overallLevel = 'warning'\n\n    if (result.markers.length) {\n      output.print(JSON.stringify(result))\n    }\n  }\n\n  await worker.dispose()\n\n  return overallLevel\n}\n","import {isatty} from 'node:tty'\n\nimport {type ValidationMarker} from '@sanity/types'\nimport logSymbols from 'log-symbols'\n\nexport type Level = ValidationMarker['level']\n\nexport interface DocumentValidationResult {\n  revision: string\n  documentId: string\n  documentType: string\n  intentUrl?: string\n  level: ValidationMarker['level']\n  markers: ValidationMarker[]\n}\n\nexport const isTty = isatty(1)\nexport const levelValues = {error: 0, warning: 1, info: 2} as const\n\n/**\n * Generates a formatted string that includes a numerical amount and a subject\n * in plural or singular form. Note: the subject must end in `s`\n */\nexport const count = (amount: number, subject: string): string =>\n  `${amount.toLocaleString('en-US')} ${\n    amount === 1 ? subject.slice(0, Math.max(0, subject.length - 1)) : subject\n  }`\n\nconst percentageFormatter = new Intl.NumberFormat('en-US', {\n  style: 'percent',\n  minimumFractionDigits: 1,\n  maximumFractionDigits: 1,\n})\n\n/**\n * Given a decimal, this will return that number formatted as a percentage\n */\nexport const percent = (value: number): string => percentageFormatter.format(Math.min(value, 1))\n\nconst secondFormatter = new Intl.NumberFormat('en-US', {\n  minimumFractionDigits: 1,\n  maximumFractionDigits: 1,\n})\n\n/**\n * Given a start time in milliseconds, this will output the time elapsed\n * formatted in seconds\n */\nexport const seconds = (startTime: number): string => {\n  const endTime = Date.now()\n  return `(${secondFormatter.format((endTime - startTime) / 1000)}s)`\n}\n\ninterface ValidationTotals {\n  valid: {documents: number}\n  errors: {documents: number; markers: number}\n  warnings: {documents: number; markers: number}\n  infos: {documents: number; markers: number}\n}\n\n/**\n * Outputs summary text given an object of totals. Omits totals depending on the\n * desired validation `level`\n */\nexport const summary = (\n  {errors, infos, valid, warnings}: ValidationTotals,\n  level: Level = 'warning',\n): string => {\n  const levelValue = levelValues[level]\n\n  return [\n    `${logSymbols.success} Valid:    ${count(valid.documents, 'documents')}`,\n    `${logSymbols.error} Errors:   ${count(errors.documents, 'documents')}, ${count(\n      errors.markers,\n      'errors',\n    )}`,\n    levelValue >= levelValues.warning &&\n      `${logSymbols.warning} Warnings: ${count(warnings.documents, 'documents')}, ${count(\n        warnings.markers,\n        'warnings',\n      )}`,\n    levelValue >= levelValues.info &&\n      `${logSymbols.info} Info:     ${count(infos.documents, 'documents')}, ${count(\n        infos.documents,\n        'markers',\n      )}`,\n  ]\n    .filter(Boolean)\n    .join('\\n')\n}\n","import {type Path, type ValidationMarker} from '@sanity/types'\nimport chalk from 'chalk'\nimport logSymbols from 'log-symbols'\n\nimport {convertToTree, formatTree, maxKeyLength, type Tree} from '../../../../util/tree'\nimport {type DocumentValidationResult, isTty, type Level, levelValues} from './util'\n\nexport interface FormatDocumentValidationOptions extends DocumentValidationResult {\n  studioHost?: string\n  basePath?: string\n}\n\ninterface Marker extends Pick<ValidationMarker, 'level' | 'message'> {\n  path: Path\n}\n\ntype ValidationTree = Tree<Marker>\n\nconst levelHeaders = {\n  error: isTty ? chalk.bold(chalk.bgRed(chalk.black(' ERROR '))) : chalk.red('[ERROR]'),\n  warning: isTty ? chalk.bold(chalk.bgYellow(chalk.black(' WARN '))) : chalk.yellow('[WARN]'),\n  info: isTty ? chalk.bold(chalk.cyan(chalk.black(' INFO '))) : chalk.cyan('[INFO]'),\n}\n/**\n * Creates a terminal hyperlink. Only outputs a hyperlink if the output is\n * determined to be a TTY\n */\nconst link = (text: string, url: string) =>\n  isTty ? `\\u001b]8;;${url}\\u0007${text}\\u001b]8;;\\u0007` : chalk.underline(text)\n\n/**\n * For sorting markers\n */\nconst compareLevels = <T extends {level: Level; message: string}>(a: T, b: T) =>\n  levelValues[a.level] - levelValues[b.level]\n\n/**\n * Formats the markers at the root of the validation tree\n */\nconst formatRootErrors = (root: ValidationTree, hasChildren: boolean, paddingLength: number) => {\n  if (!root.nodes) return ''\n\n  const [first, ...rest] = root.nodes.slice().sort(compareLevels)\n  if (!first) return ''\n\n  const firstElbow = hasChildren ? '│ ' : '└─'\n  const firstPadding = '.'.repeat(paddingLength - 6)\n  const firstLine = `${firstElbow} (root) ${firstPadding} ${logSymbols[first.level]} ${\n    first.message\n  }`\n  const subsequentPadding = ' '.repeat(paddingLength + 2)\n  const subsequentElbow = hasChildren ? '│ ' : '  '\n\n  const restOfLines = rest\n    .map(\n      (marker) =>\n        `${subsequentElbow}${subsequentPadding} ${logSymbols[marker.level]} ${marker.message}`,\n    )\n    .join('\\n')\n  return [firstLine, restOfLines].filter(Boolean).join('\\n')\n}\n\n/**\n * Formats document validation results into a user-friendly tree structure\n */\nexport function formatDocumentValidation({\n  documentId,\n  documentType,\n  level,\n  markers,\n  intentUrl,\n}: FormatDocumentValidationOptions): string {\n  const tree = convertToTree<Marker>(markers)\n\n  const documentTypeHeader = isTty\n    ? chalk.bgWhite(chalk.black(` ${documentType} `))\n    : `[${documentType}]`\n\n  const header = `${levelHeaders[level]} ${documentTypeHeader} ${\n    intentUrl ? link(documentId, intentUrl) : chalk.underline(documentId)\n  }`\n\n  const paddingLength = Math.max(maxKeyLength(tree.children) + 2, 30)\n\n  const childErrors = formatTree<Marker>({\n    node: tree.children,\n    paddingLength,\n    getNodes: ({nodes}) => (nodes ?? []).slice().sort(compareLevels),\n    getMessage: (marker) => [logSymbols[marker.level], marker.message].join(' '),\n  })\n\n  const rootErrors = formatRootErrors(tree, childErrors.length > 0, paddingLength)\n\n  return [header, rootErrors, childErrors].filter(Boolean).join('\\n')\n}\n","import {type BuiltInValidationReporter} from '../../validateAction'\nimport {formatDocumentValidation} from './formatDocumentValidation'\nimport {\n  count,\n  type DocumentValidationResult,\n  type Level,\n  levelValues,\n  percent,\n  seconds,\n  summary,\n} from './util'\n\n/**\n * Represents the default stylish/pretty reporter\n */\n// eslint-disable-next-line max-statements\nexport const pretty: BuiltInValidationReporter = async ({output, worker, flags}) => {\n  const workspaceLoadStart = Date.now()\n  // Report workspace loaded\n  const spinner = output\n    .spinner(flags.workspace ? `Loading workspace '${flags.workspace}'…` : 'Loading workspace…')\n    .start()\n\n  const workspace = await worker.event.loadedWorkspace()\n  spinner.succeed(\n    `Loaded workspace '${workspace.name}' using project '${workspace.projectId}' and dataset '${\n      flags.dataset || workspace.dataset\n    }' ${seconds(workspaceLoadStart)}`,\n  )\n\n  if (!flags.file) {\n    // Report document count\n    spinner.start('Calculating documents to be validated…')\n    const {documentCount} = await worker.event.loadedDocumentCount()\n\n    // Report export progress\n    const downloadStart = Date.now()\n    spinner.text = `Downloading ${count(documentCount, 'documents')}…`\n    for await (const {downloadedCount} of worker.stream.exportProgress()) {\n      const percentage = percent(downloadedCount / documentCount)\n      spinner.text = `Downloading ${count(documentCount, 'documents')}… ${percentage}`\n    }\n    spinner.succeed(`Downloaded ${count(documentCount, 'documents')} ${seconds(downloadStart)}`)\n  }\n\n  const {totalDocumentsToValidate} = await worker.event.exportFinished()\n\n  const referenceIntegrityStart = Date.now()\n  spinner.start(`Checking reference existence…`)\n  await worker.event.loadedReferenceIntegrity()\n  spinner.succeed(`Checked all references ${seconds(referenceIntegrityStart)}`)\n\n  // Report validation progress\n  const validationStart = Date.now()\n  spinner.start(`Validating ${count(totalDocumentsToValidate, 'documents')}…`)\n\n  const results: DocumentValidationResult[] = []\n\n  const totals = {\n    valid: {documents: 0},\n    errors: {documents: 0, markers: 0},\n    warnings: {documents: 0, markers: 0},\n    infos: {documents: 0, markers: 0},\n  }\n\n  for await (const {validatedCount, ...result} of worker.stream.validation()) {\n    const {markers} = result\n\n    if (markers.length) {\n      results.push(result)\n    }\n\n    const errors = markers.filter((marker) => marker.level === 'error')\n    const warnings = markers.filter((marker) => marker.level === 'warning')\n    const infos = markers.filter((marker) => marker.level === 'info')\n\n    if (!markers.length) {\n      totals.valid.documents += 1\n    }\n\n    if (errors.length) {\n      totals.errors.documents += 1\n      totals.errors.markers += errors.length\n    }\n\n    if (warnings.length) {\n      totals.warnings.documents += 1\n      totals.warnings.markers += warnings.length\n    }\n\n    if (infos.length) {\n      totals.infos.documents += 1\n      totals.infos.markers += infos.length\n    }\n\n    spinner.text =\n      `Validating ${count(totalDocumentsToValidate, 'documents')}…\\n\\n` +\n      `Processed ${count(validatedCount, 'documents')} (${percent(\n        validatedCount / totalDocumentsToValidate,\n      )}):\\n${summary(totals, flags.level)}`\n  }\n\n  spinner.succeed(\n    `Validated ${count(totalDocumentsToValidate, 'documents')} ${seconds(validationStart)}`,\n  )\n  output.print(`\\nValidation results:\\n${summary(totals, flags.level)}`)\n\n  results.sort((a, b) => {\n    if (a.level === b.level) return a.documentType.localeCompare(b.documentType)\n    return levelValues[a.level] - levelValues[b.level]\n  })\n\n  let overallLevel: Level = 'info'\n\n  for (const result of results) {\n    if (result.level === 'error') overallLevel = 'error'\n    if (result.level === 'warning' && overallLevel !== 'error') overallLevel = 'warning'\n\n    output.print(`${formatDocumentValidation(result)}\\n`)\n  }\n\n  await worker.dispose()\n\n  return overallLevel\n}\n","import {json} from './jsonReporter'\nimport {ndjson} from './ndjsonReporter'\nimport {pretty} from './prettyReporter'\n\nexport const reporters = {pretty, ndjson, json}\n","import {type MessagePort, type Worker} from 'node:worker_threads'\n\ntype StreamReporter<TPayload = unknown> = {emit: (payload: TPayload) => void; end: () => void}\ntype EventReporter<TPayload = unknown> = (payload: TPayload) => void\ntype EventReceiver<TPayload = unknown> = () => Promise<TPayload>\ntype StreamReceiver<TPayload = unknown> = () => AsyncIterable<TPayload>\n\ntype EventKeys<TWorkerChannel extends WorkerChannel> = {\n  [K in keyof TWorkerChannel]: TWorkerChannel[K] extends WorkerChannelEvent<any> ? K : never\n}[keyof TWorkerChannel]\ntype StreamKeys<TWorkerChannel extends WorkerChannel> = {\n  [K in keyof TWorkerChannel]: TWorkerChannel[K] extends WorkerChannelStream<any> ? K : never\n}[keyof TWorkerChannel]\n\ntype EventMessage<TPayload = unknown> = {type: 'event'; name: string; payload: TPayload}\ntype StreamEmissionMessage<TPayload = unknown> = {type: 'emission'; name: string; payload: TPayload}\ntype StreamEndMessage = {type: 'end'; name: string}\ntype WorkerChannelMessage = EventMessage | StreamEmissionMessage | StreamEndMessage\n\n/**\n * Represents the definition of a \"worker channel\" to report progress from the\n * worker to the parent. Worker channels can define named events or streams and\n * the worker will report events and streams while the parent will await them.\n * This allows the control flow of the parent to follow the control flow of the\n * worker 1-to-1.\n */\nexport type WorkerChannel<\n  TWorkerChannel extends Record<\n    string,\n    WorkerChannelEvent<unknown> | WorkerChannelStream<unknown>\n  > = Record<string, WorkerChannelEvent<unknown> | WorkerChannelStream<unknown>>,\n> = TWorkerChannel\n\nexport type WorkerChannelEvent<TPayload = void> = {type: 'event'; payload: TPayload}\nexport type WorkerChannelStream<TPayload = void> = {type: 'stream'; payload: TPayload}\n\nexport interface WorkerChannelReporter<TWorkerChannel extends WorkerChannel> {\n  event: {\n    [K in EventKeys<TWorkerChannel>]: TWorkerChannel[K] extends WorkerChannelEvent<infer TPayload>\n      ? EventReporter<TPayload>\n      : void\n  }\n  stream: {\n    [K in StreamKeys<TWorkerChannel>]: TWorkerChannel[K] extends WorkerChannelStream<infer TPayload>\n      ? StreamReporter<TPayload>\n      : void\n  }\n}\n\nexport interface WorkerChannelReceiver<TWorkerChannel extends WorkerChannel> {\n  event: {\n    [K in EventKeys<TWorkerChannel>]: TWorkerChannel[K] extends WorkerChannelEvent<infer TPayload>\n      ? EventReceiver<TPayload>\n      : void\n  }\n  stream: {\n    [K in StreamKeys<TWorkerChannel>]: TWorkerChannel[K] extends WorkerChannelStream<infer TPayload>\n      ? StreamReceiver<TPayload>\n      : void\n  }\n  // TODO: good candidate for [Symbol.asyncDispose] when our tooling better supports it\n  dispose: () => Promise<number>\n}\n\n/**\n * A simple queue that has two primary methods: `push(message)` and\n * `await next()`. This message queue is used by the \"receiver\" of the worker\n * channel and this class handles buffering incoming messages if the worker is\n * producing faster than the parent as well as returning a promise if there is\n * no message yet in the queue when the parent awaits `next()`.\n */\nclass MessageQueue<T> {\n  resolver: ((result: IteratorResult<T>) => void) | null = null\n  queue: T[] = []\n\n  push(message: T) {\n    if (this.resolver) {\n      this.resolver({value: message, done: false})\n      this.resolver = null\n    } else {\n      this.queue.push(message)\n    }\n  }\n\n  next(): Promise<IteratorResult<T>> {\n    if (this.queue.length) {\n      return Promise.resolve({value: this.queue.shift()!, done: false})\n    }\n\n    return new Promise((resolve) => (this.resolver = resolve))\n  }\n\n  end() {\n    if (this.resolver) {\n      this.resolver({value: undefined, done: true})\n    }\n  }\n}\n\nfunction isWorkerChannelMessage(message: unknown): message is WorkerChannelMessage {\n  if (typeof message !== 'object') return false\n  if (!message) return false\n  if (!('type' in message)) return false\n  if (typeof message.type !== 'string') return false\n  const types: string[] = ['event', 'emission', 'end'] satisfies WorkerChannelMessage['type'][]\n  return types.includes(message.type)\n}\n\n/**\n * Creates a \"worker channel receiver\" that subscribes to incoming messages\n * from the given worker and returns promises for worker channel events and\n * async iterators for worker channel streams.\n */\nexport function createReceiver<TWorkerChannel extends WorkerChannel>(\n  worker: Worker,\n): WorkerChannelReceiver<TWorkerChannel> {\n  const _events = new Map<string, MessageQueue<EventMessage>>()\n  const _streams = new Map<string, MessageQueue<StreamEmissionMessage>>()\n  const errors = new MessageQueue<{type: 'error'; error: unknown}>()\n\n  const eventQueue = (name: string) => {\n    const queue = _events.get(name) ?? new MessageQueue()\n    if (!_events.has(name)) _events.set(name, queue)\n    return queue\n  }\n\n  const streamQueue = (name: string) => {\n    const queue = _streams.get(name) ?? new MessageQueue()\n    if (!_streams.has(name)) _streams.set(name, queue)\n    return queue\n  }\n\n  const handleMessage = (message: unknown) => {\n    if (!isWorkerChannelMessage(message)) return\n    if (message.type === 'event') eventQueue(message.name).push(message)\n    if (message.type === 'emission') streamQueue(message.name).push(message)\n    if (message.type === 'end') streamQueue(message.name).end()\n  }\n\n  const handleError = (error: unknown) => {\n    errors.push({type: 'error', error})\n  }\n\n  worker.addListener('message', handleMessage)\n  worker.addListener('error', handleError)\n\n  return {\n    event: new Proxy({} as WorkerChannelReceiver<TWorkerChannel>['event'], {\n      get: (target, name) => {\n        if (typeof name !== 'string') return target[name as keyof typeof target]\n\n        const eventReceiver: EventReceiver = async () => {\n          const {value} = await Promise.race([eventQueue(name).next(), errors.next()])\n          if (value.type === 'error') throw value.error\n          return value.payload\n        }\n\n        return eventReceiver\n      },\n    }),\n    stream: new Proxy({} as WorkerChannelReceiver<TWorkerChannel>['stream'], {\n      get: (target, prop) => {\n        if (typeof prop !== 'string') return target[prop as keyof typeof target]\n        const name = prop // alias for better typescript narrowing\n\n        async function* streamReceiver() {\n          while (true) {\n            const {value, done} = await Promise.race([streamQueue(name).next(), errors.next()])\n            if (done) return\n            if (value.type === 'error') throw value.error\n            yield value.payload\n          }\n        }\n\n        return streamReceiver satisfies StreamReceiver\n      },\n    }),\n    dispose: () => {\n      worker.removeListener('message', handleMessage)\n      worker.removeListener('error', handleError)\n      return worker.terminate()\n    },\n  }\n}\n\n/**\n * Creates a \"worker channel reporter\" that sends messages to the given\n * `parentPort` to be received by a worker channel receiver.\n */\nexport function createReporter<TWorkerChannel extends WorkerChannel>(\n  parentPort: MessagePort | null,\n): WorkerChannelReporter<TWorkerChannel> {\n  if (!parentPort) {\n    throw new Error('parentPart was falsy')\n  }\n\n  return {\n    event: new Proxy({} as WorkerChannelReporter<TWorkerChannel>['event'], {\n      get: (target, name) => {\n        if (typeof name !== 'string') return target[name as keyof typeof target]\n\n        const eventReporter: EventReporter = (payload) => {\n          const message: EventMessage = {type: 'event', name, payload}\n          parentPort.postMessage(message)\n        }\n\n        return eventReporter\n      },\n    }),\n    stream: new Proxy({} as WorkerChannelReporter<TWorkerChannel>['stream'], {\n      get: (target, name) => {\n        if (typeof name !== 'string') return target[name as keyof typeof target]\n\n        const streamReporter: StreamReporter = {\n          emit: (payload) => {\n            const message: StreamEmissionMessage = {type: 'emission', name, payload}\n            parentPort.postMessage(message)\n          },\n          end: () => {\n            const message: StreamEndMessage = {type: 'end', name}\n            parentPort.postMessage(message)\n          },\n        }\n\n        return streamReporter\n      },\n    }),\n  }\n}\n","import path from 'node:path'\nimport {Worker} from 'node:worker_threads'\n\nimport {type ClientConfig} from '@sanity/client'\nimport {type ValidationMarker} from '@sanity/types'\nimport readPkgUp from 'read-pkg-up'\n\nimport {\n  type ValidateDocumentsWorkerData,\n  type ValidationWorkerChannel,\n} from '../../threads/validateDocuments'\nimport {createReceiver, type WorkerChannelReceiver} from '../../util/workerChannels'\n\nexport interface ValidateDocumentsOptions<TReturn = unknown> {\n  level?: 'error' | 'warning' | 'info'\n  workspace?: string\n  workDir?: string\n  configPath?: string\n  clientConfig?: Partial<ClientConfig>\n  projectId?: string // override\n  dataset?: string // override\n  ndjsonFilePath?: string\n  maxCustomValidationConcurrency?: number\n  maxFetchConcurrency?: number\n  reporter?: (worker: WorkerChannelReceiver<ValidationWorkerChannel>) => TReturn\n  studioHost?: string\n}\n\nexport interface DocumentValidationResult {\n  documentId: string\n  documentType: string\n  revision: string\n  level: ValidationMarker['level']\n  markers: ValidationMarker[]\n}\n\nconst defaultReporter = ({stream, dispose}: WorkerChannelReceiver<ValidationWorkerChannel>) => {\n  async function* createValidationGenerator() {\n    for await (const {documentId, documentType, markers, revision, level} of stream.validation()) {\n      const result: DocumentValidationResult = {\n        documentId,\n        documentType,\n        revision,\n        level,\n        markers,\n      }\n\n      yield result\n    }\n\n    await dispose()\n  }\n\n  return createValidationGenerator()\n}\n\nexport function validateDocuments<TReturn>(\n  options: ValidateDocumentsOptions<TReturn> &\n    Required<Pick<ValidateDocumentsOptions<TReturn>, 'reporter'>>,\n): TReturn\nexport function validateDocuments(\n  options: ValidateDocumentsOptions,\n): AsyncIterable<DocumentValidationResult>\nexport function validateDocuments(options: ValidateDocumentsOptions): unknown {\n  const {\n    workspace,\n    clientConfig,\n    configPath,\n    dataset,\n    projectId,\n    workDir = process.cwd(),\n    reporter = defaultReporter,\n    level,\n    maxCustomValidationConcurrency,\n    maxFetchConcurrency,\n    ndjsonFilePath,\n  } = options\n\n  const rootPkgPath = readPkgUp.sync({cwd: __dirname})?.path\n  if (!rootPkgPath) {\n    throw new Error('Could not find root directory for `sanity` package')\n  }\n\n  const workerPath = path.join(\n    path.dirname(rootPkgPath),\n    'lib',\n    '_internal',\n    'cli',\n    'threads',\n    'validateDocuments.js',\n  )\n\n  const worker = new Worker(workerPath, {\n    workerData: {\n      workDir,\n      // removes props in the config that make this object fail to serialize\n      clientConfig: JSON.parse(JSON.stringify(clientConfig)),\n      configPath,\n      workspace,\n      dataset,\n      projectId,\n      level,\n      ndjsonFilePath,\n      maxCustomValidationConcurrency,\n      maxFetchConcurrency,\n      studioHost: options.studioHost,\n    } satisfies ValidateDocumentsWorkerData,\n    // eslint-disable-next-line no-process-env\n    env: process.env,\n  })\n\n  return reporter(createReceiver<ValidationWorkerChannel>(worker))\n}\n","import fs from 'node:fs'\nimport path from 'node:path'\n\nimport {\n  type CliCommandArguments,\n  type CliCommandContext,\n  type CliConfig,\n  type CliOutputter,\n} from '@sanity/cli'\nimport {type ClientConfig} from '@sanity/client'\nimport chalk from 'chalk'\nimport logSymbols from 'log-symbols'\n\nimport {type ValidationWorkerChannel} from '../../threads/validateDocuments'\nimport {type WorkerChannelReceiver} from '../../util/workerChannels'\nimport {reporters} from './reporters'\nimport {validateDocuments} from './validateDocuments'\n\ninterface ValidateFlags {\n  'workspace'?: string\n  'format'?: string\n  'dataset'?: string\n  'file'?: string\n  'level'?: 'error' | 'warning' | 'info'\n  'max-custom-validation-concurrency'?: number\n  'max-fetch-concurrency'?: number\n  'yes'?: boolean\n  'y'?: boolean\n}\n\nexport type BuiltInValidationReporter = (options: {\n  output: CliOutputter\n  worker: WorkerChannelReceiver<ValidationWorkerChannel>\n  flags: ValidateFlags\n}) => Promise<'error' | 'warning' | 'info'>\n\nexport default async function validateAction(\n  args: CliCommandArguments<ValidateFlags>,\n  {apiClient, workDir, output, cliConfig, prompt}: CliCommandContext,\n): Promise<void> {\n  const flags = args.extOptions\n  const unattendedMode = Boolean(flags.yes || flags.y)\n\n  if (!unattendedMode) {\n    output.print(\n      `${chalk.yellow(`${logSymbols.warning} Warning:`)} This command ${\n        flags.file\n          ? 'reads all documents from your input file'\n          : 'downloads all documents from your dataset'\n      } and processes them through your local schema within a ` +\n        `simulated browser environment.\\n`,\n    )\n    output.print(`Potential pitfalls:\\n`)\n    output.print(\n      `- Processes all documents locally (excluding assets). Large datasets may require more resources.`,\n    )\n    output.print(\n      `- Executes all custom validation functions. Some functions may need to be refactored for compatibility.`,\n    )\n    output.print(\n      `- Not all standard browser features are available and may cause issues while loading your Studio.`,\n    )\n    output.print(\n      `- Adheres to document permissions. Ensure this account can see all desired documents.`,\n    )\n    if (flags.file) {\n      output.print(\n        `- Checks for missing document references against the live dataset if not found in your file.`,\n      )\n    }\n\n    const confirmed = await prompt.single<boolean>({\n      type: 'confirm',\n      message: `Are you sure you want to continue?`,\n      default: true,\n    })\n\n    if (!confirmed) {\n      output.print('User aborted')\n      process.exitCode = 1\n      return\n    }\n  }\n\n  if (flags.format && !(flags.format in reporters)) {\n    const formatter = new Intl.ListFormat('en-US', {\n      style: 'long',\n      type: 'conjunction',\n    })\n    throw new Error(\n      `Did not recognize format '${flags.format}'. Available formats are ${formatter.format(\n        Object.keys(reporters).map((key) => `'${key}'`),\n      )}`,\n    )\n  }\n\n  const level = flags.level || 'warning'\n\n  if (level !== 'error' && level !== 'warning' && level !== 'info') {\n    throw new Error(`Invalid level. Available levels are 'error', 'warning', and 'info'.`)\n  }\n\n  const maxCustomValidationConcurrency = flags['max-custom-validation-concurrency']\n  if (\n    maxCustomValidationConcurrency &&\n    typeof maxCustomValidationConcurrency !== 'number' &&\n    !Number.isInteger(maxCustomValidationConcurrency)\n  ) {\n    throw new Error(`'--max-custom-validation-concurrency' must be an integer.`)\n  }\n\n  const maxFetchConcurrency = flags['max-fetch-concurrency']\n  if (\n    maxFetchConcurrency &&\n    typeof maxFetchConcurrency !== 'number' &&\n    !Number.isInteger(maxFetchConcurrency)\n  ) {\n    throw new Error(`'--max-fetch-concurrency' must be an integer.`)\n  }\n\n  const clientConfig: Partial<ClientConfig> = {\n    ...apiClient({\n      requireUser: true,\n      requireProject: false, // we'll get this from the workspace\n    }).config(),\n    // we set this explictly to true because the default client configuration\n    // from the CLI comes configured with `useProjectHostname: false` when\n    // `requireProject` is set to false\n    useProjectHostname: true,\n    // we set this explictly to true because we pass in a token via the\n    // `clientConfiguration` object and also mock a browser environment in\n    // this worker which triggers the browser warning\n    ignoreBrowserTokenWarning: true,\n  }\n\n  let ndjsonFilePath\n  if (flags.file) {\n    if (typeof flags.file !== 'string') {\n      throw new Error(`'--file' must be a string`)\n    }\n    const filePath = path.resolve(workDir, flags.file)\n\n    const stat = await fs.promises.stat(filePath)\n    if (!stat.isFile()) {\n      throw new Error(`'--file' must point to a valid ndjson file or tarball`)\n    }\n\n    ndjsonFilePath = filePath\n  }\n\n  const overallLevel = await validateDocuments({\n    workspace: flags.workspace,\n    dataset: flags.dataset,\n    clientConfig,\n    workDir,\n    level,\n    maxCustomValidationConcurrency,\n    maxFetchConcurrency,\n    ndjsonFilePath,\n    reporter: (worker) => {\n      const reporter =\n        flags.format && flags.format in reporters\n          ? reporters[flags.format as keyof typeof reporters]\n          : reporters.pretty\n\n      return reporter({output, worker, flags})\n    },\n    studioHost: (cliConfig as CliConfig)?.studioHost,\n  })\n\n  process.exitCode = overallLevel === 'error' ? 1 : 0\n}\n"],"names":["arrayFromAsync","iterable","results","__forAwait","item","push","temp","json","output","worker","formatted","stream","validation","filter","markers","length","map","validatedCount","result","dispose","print","JSON","stringify","overallLevel","level","ndjson","isTty","isatty","levelValues","error","warning","info","count","amount","subject","toLocaleString","slice","Math","max","percentageFormatter","Intl","NumberFormat","style","minimumFractionDigits","maximumFractionDigits","percent","value","format","min","secondFormatter","seconds","startTime","endTime","Date","now","summary","errors","infos","valid","warnings","levelValue","logSymbols","success","documents","Boolean","join","levelHeaders","chalk","bold","bgRed","black","red","bgYellow","yellow","cyan","link","text","url","underline","compareLevels","a","b","formatRootErrors","root","hasChildren","paddingLength","nodes","first","rest","sort","firstElbow","firstPadding","repeat","firstLine","message","subsequentPadding","subsequentElbow","restOfLines","marker","formatDocumentValidation","documentId","documentType","intentUrl","tree","convertToTree","documentTypeHeader","bgWhite","header","maxKeyLength","children","childErrors","formatTree","node","getNodes","getMessage","rootErrors","pretty","flags","workspaceLoadStart","spinner","workspace","start","event","loadedWorkspace","succeed","name","projectId","dataset","file","documentCount","loadedDocumentCount","downloadStart","exportProgress","downloadedCount","percentage","totalDocumentsToValidate","exportFinished","referenceIntegrityStart","loadedReferenceIntegrity","validationStart","totals","iter","more","localeCompare","reporters","MessageQueue","queue","resolver","done","next","Promise","resolve","shift","end","undefined","isWorkerChannelMessage","type","includes","createReceiver","_events","Map","_streams","eventQueue","get","has","set","streamQueue","handleMessage","handleError","addListener","Proxy","target","race","payload","prop","streamReceiver","__asyncGenerator","__await","removeListener","terminate","defaultReporter","createValidationGenerator","revision","validateDocuments","options","clientConfig","configPath","workDir","process","cwd","reporter","maxCustomValidationConcurrency","maxFetchConcurrency","ndjsonFilePath","rootPkgPath","readPkgUp","sync","__dirname","path","Error","workerPath","dirname","Worker","workerData","parse","studioHost","env","validateAction","args","apiClient","cliConfig","prompt","extOptions","yes","y","single","default","exitCode","formatter","ListFormat","Object","keys","key","Number","isInteger","requireUser","requireProject","config","useProjectHostname","ignoreBrowserTokenWarning","filePath","fs","promises","stat","isFile"],"mappings":"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"}