{"version":3,"file":"devAction.js","sources":["../../src/_internal/cli/server/devServer.ts","../../src/_internal/cli/actions/dev/devAction.ts"],"sourcesContent":["import {type ReactCompilerConfig, type UserViteConfig} from '@sanity/cli'\nimport chalk from 'chalk'\n\nimport {debug} from './debug'\nimport {extendViteConfigWithUserConfig, getViteConfig} from './getViteConfig'\nimport {writeSanityRuntime} from './runtime'\n\nexport interface DevServerOptions {\n  cwd: string\n  basePath: string\n  staticPath: string\n\n  httpPort: number\n  httpHost?: string\n  projectName?: string\n\n  reactStrictMode: boolean\n  reactCompiler: ReactCompilerConfig | undefined\n  vite?: UserViteConfig\n}\n\nexport interface DevServer {\n  close(): Promise<void>\n}\n\nexport async function startDevServer(options: DevServerOptions): Promise<DevServer> {\n  const {\n    cwd,\n    httpPort,\n    httpHost,\n    basePath,\n    reactStrictMode,\n    vite: extendViteConfig,\n    reactCompiler,\n  } = options\n\n  const startTime = Date.now()\n  debug('Writing Sanity runtime files')\n  await writeSanityRuntime({cwd, reactStrictMode, watch: true, basePath})\n\n  debug('Resolving vite config')\n  const mode = 'development'\n  let viteConfig = await getViteConfig({\n    basePath,\n    mode: 'development',\n    server: {port: httpPort, host: httpHost},\n    cwd,\n    reactCompiler,\n  })\n\n  // Extend Vite configuration with user-provided config\n  if (extendViteConfig) {\n    viteConfig = await extendViteConfigWithUserConfig(\n      {command: 'serve', mode},\n      viteConfig,\n      extendViteConfig,\n    )\n  }\n\n  debug('Creating vite server')\n  const {createServer} = await import('vite')\n  const server = await createServer(viteConfig)\n  const info = server.config.logger.info\n\n  debug('Listening on specified port')\n  await server.listen()\n\n  const startupDuration = Date.now() - startTime\n  const url = `http://${httpHost || 'localhost'}:${httpPort || '3333'}${basePath}`\n  info(\n    `Sanity Studio ` +\n      `using ${chalk.cyan(`vite@${require('vite/package.json').version}`)} ` +\n      `ready in ${chalk.cyan(`${Math.ceil(startupDuration)}ms`)} ` +\n      `and running at ${chalk.cyan(url)}`,\n  )\n\n  return {close: () => server.close()}\n}\n","import path from 'node:path'\n\nimport {\n  type CliCommandArguments,\n  type CliCommandContext,\n  type CliConfig,\n  type CliOutputter,\n} from '@sanity/cli'\n\nimport {type DevServerOptions, startDevServer} from '../../server/devServer'\nimport {checkRequiredDependencies} from '../../util/checkRequiredDependencies'\nimport {checkStudioDependencyVersions} from '../../util/checkStudioDependencyVersions'\nimport {getSharedServerConfig, gracefulServerDeath} from '../../util/servers'\nimport {getTimer} from '../../util/timing'\n\nexport interface StartDevServerCommandFlags {\n  host?: string\n  port?: string\n}\n\nexport default async function startSanityDevServer(\n  args: CliCommandArguments<StartDevServerCommandFlags>,\n  context: CliCommandContext,\n): Promise<void> {\n  const timers = getTimer()\n  const flags = args.extOptions\n  const {output, workDir, cliConfig} = context\n\n  timers.start('checkStudioDependencyVersions')\n  checkStudioDependencyVersions(workDir)\n  timers.end('checkStudioDependencyVersions')\n\n  // If the check resulted in a dependency install, the CLI command will be re-run,\n  // thus we want to exit early\n  if ((await checkRequiredDependencies(context)).didInstall) {\n    return\n  }\n\n  // Try to load CLI configuration from sanity.cli.(js|ts)\n  const config = getDevServerConfig({flags, workDir, cliConfig, output})\n\n  try {\n    await startDevServer(config)\n  } catch (err) {\n    gracefulServerDeath('dev', config.httpHost, config.httpPort, err)\n  }\n}\n\nfunction getDevServerConfig({\n  flags,\n  workDir,\n  cliConfig,\n  output,\n}: {\n  flags: StartDevServerCommandFlags\n  workDir: string\n  cliConfig?: CliConfig\n  output: CliOutputter\n}): DevServerOptions {\n  const configSpinner = output.spinner('Checking configuration files...')\n  const baseConfig = getSharedServerConfig({flags, workDir, cliConfig})\n  configSpinner.succeed()\n\n  const env = process.env // eslint-disable-line no-process-env\n  const reactStrictMode = env.SANITY_STUDIO_REACT_STRICT_MODE\n    ? env.SANITY_STUDIO_REACT_STRICT_MODE === 'true'\n    : Boolean(cliConfig?.reactStrictMode)\n\n  if (env.SANITY_STUDIO_BASEPATH && cliConfig?.project?.basePath) {\n    output.warn(\n      `Overriding configured base path (${cliConfig.project.basePath}) with value from environment variable (${env.SANITY_STUDIO_BASEPATH})`,\n    )\n  }\n\n  return {\n    ...baseConfig,\n    staticPath: path.join(workDir, 'static'),\n    reactStrictMode,\n    reactCompiler: cliConfig && 'reactCompiler' in cliConfig ? cliConfig.reactCompiler : undefined,\n  }\n}\n"],"names":["startDevServer","options","cwd","httpPort","httpHost","basePath","reactStrictMode","vite","extendViteConfig","reactCompiler","startTime","Date","now","debug","writeSanityRuntime","watch","mode","viteConfig","getViteConfig","server","port","host","extendViteConfigWithUserConfig","command","createServer","info","config","logger","listen","startupDuration","url","chalk","cyan","require","version","Math","ceil","close","startSanityDevServer","args","context","timers","getTimer","flags","extOptions","output","workDir","cliConfig","start","checkStudioDependencyVersions","end","checkRequiredDependencies","didInstall","getDevServerConfig","err","gracefulServerDeath","configSpinner","spinner","baseConfig","getSharedServerConfig","succeed","env","process","SANITY_STUDIO_REACT_STRICT_MODE","Boolean","SANITY_STUDIO_BASEPATH","project","warn","staticPath","path","join","undefined"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AAyBA,eAAsBA,eAAeC,SAA+C;AAC5E,QAAA;AAAA,IACJC;AAAAA,IACAC;AAAAA,IACAC;AAAAA,IACAC;AAAAA,IACAC;AAAAA,IACAC,MAAMC;AAAAA,IACNC;AAAAA,EACER,IAAAA,SAEES,YAAYC,KAAKC,IAAI;AACrBC,gBAAA,8BAA8B,GACpC,MAAMC,2BAAmB;AAAA,IAACZ;AAAAA,IAAKI;AAAAA,IAAiBS,OAAO;AAAA,IAAMV;AAAAA,EAAAA,CAAS,GAEtEQ,QAAAA,MAAM,uBAAuB;AAC7B,QAAMG,OAAO;AACTC,MAAAA,aAAa,MAAMC,sBAAc;AAAA,IACnCb;AAAAA,IACAW,MAAM;AAAA,IACNG,QAAQ;AAAA,MAACC,MAAMjB;AAAAA,MAAUkB,MAAMjB;AAAAA,IAAQ;AAAA,IACvCF;AAAAA,IACAO;AAAAA,EAAAA,CACD;AAGGD,uBACFS,aAAa,MAAMK,uCACjB;AAAA,IAACC,SAAS;AAAA,IAASP;AAAAA,EACnBC,GAAAA,YACAT,gBACF,IAGFK,QAAAA,MAAM,sBAAsB;AACtB,QAAA;AAAA,IAACW;AAAAA,EAAgB,IAAA,MAAM,OAAO,MAAM,GACpCL,SAAS,MAAMK,aAAaP,UAAU,GACtCQ,OAAON,OAAOO,OAAOC,OAAOF;AAElCZ,UAAAA,MAAM,6BAA6B,GACnC,MAAMM,OAAOS,OAAO;AAEpB,QAAMC,kBAAkBlB,KAAKC,IAAI,IAAIF,WAC/BoB,MAAM,UAAU1B,YAAY,WAAW,IAAID,YAAY,MAAM,GAAGE,QAAQ;AAE5E,SAAA,KAAA,uBACW0B,eAAMC,QAAAA,KAAK,QAAQC,QAAQ,mBAAmB,EAAEC,OAAO,EAAE,CAAC,aACvDH,eAAAA,QAAMC,KAAK,GAAGG,KAAKC,KAAKP,eAAe,CAAC,IAAI,CAAC,mBACvCE,eAAAA,QAAMC,KAAKF,GAAG,CAAC,EACrC,GAEO;AAAA,IAACO,OAAOA,MAAMlB,OAAOkB,MAAM;AAAA,EAAC;AACrC;;;;;;;;;ACzD8BC,eAAAA,qBAC5BC,MACAC,SACe;AACf,QAAMC,SAASC,OAAAA,SAAAA,GACTC,QAAQJ,KAAKK,YACb;AAAA,IAACC;AAAAA,IAAQC;AAAAA,IAASC;AAAAA,EAAAA,IAAaP;AAQrC,MANAC,OAAOO,MAAM,+BAA+B,GAC5CC,0BAAAA,8BAA8BH,OAAO,GACrCL,OAAOS,IAAI,+BAA+B,IAIrC,MAAMC,0BAAAA,0BAA0BX,OAAO,GAAGY;AAC7C;AAIF,QAAM1B,SAAS2B,mBAAmB;AAAA,IAACV;AAAAA,IAAOG;AAAAA,IAASC;AAAAA,IAAWF;AAAAA,EAAAA,CAAO;AAEjE,MAAA;AACF,UAAM7C,eAAe0B,MAAM;AAAA,WACpB4B,KAAK;AACZC,YAAAA,oBAAoB,OAAO7B,OAAOtB,UAAUsB,OAAOvB,UAAUmD,GAAG;AAAA,EAAA;AAEpE;AAEA,SAASD,mBAAmB;AAAA,EAC1BV;AAAAA,EACAG;AAAAA,EACAC;AAAAA,EACAF;AAMF,GAAqB;AA1DrB,MAAA;AA2DE,QAAMW,gBAAgBX,OAAOY,QAAQ,iCAAiC,GAChEC,aAAaC,8BAAsB;AAAA,IAAChB;AAAAA,IAAOG;AAAAA,IAASC;AAAAA,EAAAA,CAAU;AACpES,gBAAcI,QAAQ;AAEhBC,QAAAA,MAAMC,QAAQD,KACdvD,kBAAkBuD,IAAIE,kCACxBF,IAAIE,oCAAoC,SACxCC,CAAAA,EAAQjB,aAAWzC,QAAAA,UAAAA;AAEvB,SAAIuD,IAAII,2BAA0BlB,KAAAA,aAAAA,OAAAA,SAAAA,UAAWmB,YAAXnB,QAAoB1C,GAAAA,YACpDwC,OAAOsB,KACL,oCAAoCpB,UAAUmB,QAAQ7D,QAAQ,2CAA2CwD,IAAII,sBAAsB,GACrI,GAGK,iCACFP,UADE,GAAA;AAAA,IAELU,YAAYC,cAAAA,QAAKC,KAAKxB,SAAS,QAAQ;AAAA,IACvCxC;AAAAA,IACAG,eAAesC,aAAa,mBAAmBA,YAAYA,UAAUtC,gBAAgB8D;AAAAA,EAAAA,CACvF;AACF;;"}